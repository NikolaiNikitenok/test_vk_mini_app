{"version":3,"sources":["../../../src/components/ChipsInput/useChipsInput.ts"],"names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","useState","inputValue","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  ChipsInputOption,\n  ChipsInputProps,\n  ChipsInputValue,\n} from \"./ChipsInput\";\n\nexport const useChipsInput = <Option extends ChipsInputOption>(\n  props: Partial<ChipsInputProps<Option>>\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } =\n    props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue(\"\");\n    onInputChange!({ target: { value: \"\" } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange]\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) =>\n          getOptionValue!(newOption) !== getOptionValue!(option)\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange]\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption]\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value: ChipsInputValue) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData]\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue(\"\");\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"],"file":"useChipsInput.js"}