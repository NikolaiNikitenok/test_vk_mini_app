{"version":3,"sources":["../../../../src/components/SliderSwitch/SliderSwitch.tsx"],"names":["warn","SliderSwitch","props","value","onSwitch","setState","activeValue","options","hoveredOptionId","event","key","preventDefault","state","find","option","undefined","firstButton","current","focus","secondButton","React","createRef","process","env","NODE_ENV","name","_activeValue","restProps","firstOption","secondOption","firstActive","secondActive","switchByKey","resetFocusedOption","handleFirstClick","handleFirstHover","handleSecondClick","handleSecondHover","nextProps","prevState","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { SliderSwitchButton } from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { HasPlatform } from \"../../types\";\nimport \"./SliderSwitch.css\";\n\nexport interface SliderSwitchOptionInterface {\n  name: string;\n  value: string | number;\n}\n\nexport interface SliderSwitchProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    HasPlatform {\n  options: Array<{\n    name: string;\n    value: string | number;\n  }>;\n  activeValue?: SliderSwitchOptionInterface[\"value\"];\n  name?: string;\n  onSwitch?: (value: SliderSwitchOptionInterface[\"value\"]) => void;\n}\n\ninterface SliderSwitchState {\n  activeValue: SliderSwitchOptionInterface[\"value\"];\n  hoveredOptionId: number;\n}\n\nconst warn = warnOnce(\"SliderSwitch\");\n/**\n * @deprecated Этот компонент устарел и будет удален в 5.0.0. Используйте [`SegmentedControl`](#/SegmentedControl).\n */\nclass SliderSwitch extends React.Component<\n  SliderSwitchProps,\n  SliderSwitchState\n> {\n  public constructor(props: SliderSwitchProps) {\n    super(props);\n\n    this.state = {\n      activeValue: props.activeValue ?? \"\",\n      hoveredOptionId: -1,\n    };\n\n    this.firstButton = React.createRef();\n    this.secondButton = React.createRef();\n  }\n\n  static defaultProps = {\n    options: [\n      { name: \"\", value: \"\" },\n      { name: \"\", value: \"\" },\n    ],\n  };\n\n  firstButton: React.RefObject<HTMLDivElement>;\n  secondButton: React.RefObject<HTMLDivElement>;\n\n  onSwitch = (value: SliderSwitchOptionInterface[\"value\"]) => {\n    const { onSwitch } = this.props;\n\n    this.setState(\n      () => ({\n        activeValue: value,\n      }),\n      () => {\n        onSwitch && onSwitch(value);\n      }\n    );\n  };\n\n  handleFirstClick = () => {\n    const { options } = this.props;\n    const { value } = options[0];\n\n    this.onSwitch(value);\n  };\n\n  handleSecondClick = () => {\n    const { options } = this.props;\n    const { value } = options[1];\n\n    this.onSwitch(value);\n  };\n\n  handleFirstHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 0,\n    }));\n  };\n\n  handleSecondHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 1,\n    }));\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      hoveredOptionId: -1,\n    }));\n  };\n\n  switchByKey = (event: React.KeyboardEvent) => {\n    if (\n      event.key !== \"Enter\" &&\n      event.key !== \"Spacebar\" &&\n      event.key !== \" \"\n    ) {\n      return;\n    }\n    event.preventDefault();\n\n    const { options } = this.props;\n    const { activeValue } = this.state;\n    const value = options.find((option) => option.value !== activeValue)?.value;\n\n    if (value !== undefined) {\n      this.onSwitch(value);\n    }\n\n    if (options[0].value === value) {\n      this.firstButton.current?.focus();\n    } else {\n      this.secondButton.current?.focus();\n    }\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: SliderSwitchProps,\n    prevState: SliderSwitchState\n  ) {\n    if (\n      nextProps.activeValue &&\n      nextProps.activeValue !== prevState.activeValue\n    ) {\n      return {\n        activeValue: nextProps.activeValue,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount(): void {\n    if (process.env.NODE_ENV === \"development\") {\n      warn(\n        \"Этот компонент устарел и будет удален в 5.0.0. Используйте SegmentedControl.\"\n      );\n    }\n  }\n\n  public render() {\n    const {\n      name,\n      options,\n      activeValue: _activeValue,\n      onSwitch,\n      ...restProps\n    } = this.props;\n    const { activeValue, hoveredOptionId } = this.state;\n\n    const [firstOption, secondOption] = options;\n    const firstActive = firstOption.value === activeValue;\n    const secondActive = secondOption.value === activeValue;\n\n    return (\n      <div\n        {...restProps}\n        vkuiClass=\"SliderSwitch\"\n        onKeyDown={this.switchByKey}\n        onMouseLeave={this.resetFocusedOption}\n      >\n        {!firstActive && !secondActive && (\n          <div vkuiClass=\"SliderSwitch__border\" />\n        )}\n        <div\n          vkuiClass={classNames(\"SliderSwitch__slider\", {\n            [\"SliderSwitch--firstActive\"]: firstActive,\n            [\"SliderSwitch--secondActive\"]: secondActive,\n          })}\n        />\n        <input type=\"hidden\" name={name} value={activeValue} />\n        <SliderSwitchButton\n          active={firstActive}\n          hovered={hoveredOptionId === 0}\n          aria-pressed={firstActive}\n          onClick={this.handleFirstClick}\n          onMouseEnter={this.handleFirstHover}\n          getRootRef={this.firstButton}\n        >\n          {firstOption.name}\n        </SliderSwitchButton>\n        <SliderSwitchButton\n          active={secondActive}\n          hovered={hoveredOptionId === 1}\n          onClick={this.handleSecondClick}\n          onMouseEnter={this.handleSecondHover}\n          getRootRef={this.secondButton}\n        >\n          {secondOption.name}\n        </SliderSwitchButton>\n      </div>\n    );\n  }\n}\n\nexport { SliderSwitch };\n"],"file":"SliderSwitch.js"}