{"version":3,"sources":["../../../../src/components/GridAvatar/GridAvatar.tsx"],"names":["MIN_GRID_LENGTH","MAX_GRID_LENGTH","warn","GridAvatar","src","restProps","process","env","NODE_ENV","length","count","Math","max","min","slice","map","i","backgroundImage"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AACA;;;AAWA,IAAMA,eAAe,GAAG,CAAxB;AACA,IAAMC,eAAe,GAAG,CAAxB;AAEA,IAAMC,IAAI,GAAG,wBAAS,YAAT,CAAb;;AAEO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAG9B;AAAA,sBAFrBC,GAEqB;AAAA,MAFrBA,GAEqB,yBAFf,EAEe;AAAA,MADlBC,SACkB;;AACrB,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CJ,GAAG,CAACK,MAAJ,GAAaR,eAA3D,EAA4E;AAC1EC,IAAAA,IAAI,oFACmBE,GAAG,CAACK,MADvB,oIACwDR,eADxD,OAAJ;AAGD;;AAED,MAAMS,KAAK,GAAGC,IAAI,CAACC,GAAL,CACZZ,eADY,EAEZW,IAAI,CAACE,GAAL,CAASZ,eAAT,EAA0BG,GAAG,CAACK,MAA9B,CAFY,CAAd;AAKA,SACE,qCAAC,eAAD,6BACMJ,SADN;AAEE,IAAA,SAAS,EAAE,4BAAW,YAAX,+BAA+CK,KAA/C;AAFb,MAIE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGN,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAab,eAAb,EAA8Bc,GAA9B,CAAkC,UAACX,GAAD,EAAMY,CAAN,EAAY;AAC7C,WACE;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,SAAS,EAAC,kBAFZ;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,gBAASb,GAAT;AAAjB;AAHT,MADF;AAOD,GARA,CADH,CAJF,CADF;AAkBD,CAjCM","sourcesContent":["import * as React from \"react\";\nimport Avatar, { AvatarProps } from \"../Avatar/Avatar\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { HasRootRef } from \"../../types\";\nimport \"./GridAvatar.css\";\n\nexport interface GridAvatarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    HasRootRef<HTMLDivElement>,\n    Pick<AvatarProps, \"size\" | \"shadow\" | \"badge\"> {\n  src?: string[];\n}\n\nconst MIN_GRID_LENGTH = 1;\nconst MAX_GRID_LENGTH = 4;\n\nconst warn = warnOnce(\"GridAvatar\");\n\nexport const GridAvatar: React.FC<GridAvatarProps> = ({\n  src = [],\n  ...restProps\n}: GridAvatarProps) => {\n  if (process.env.NODE_ENV === \"development\" && src.length > MAX_GRID_LENGTH) {\n    warn(\n      `Размер пропа src (${src.length}) больше максимального (${MAX_GRID_LENGTH})`\n    );\n  }\n\n  const count = Math.max(\n    MIN_GRID_LENGTH,\n    Math.min(MAX_GRID_LENGTH, src.length)\n  );\n\n  return (\n    <Avatar\n      {...restProps}\n      vkuiClass={classNames(\"GridAvatar\", `GridAvatar--images-${count}`)}\n    >\n      <div vkuiClass=\"GridAvatar__in\">\n        {src.slice(0, MAX_GRID_LENGTH).map((src, i) => {\n          return (\n            <div\n              key={i}\n              vkuiClass=\"GridAvatar__item\"\n              style={{ backgroundImage: `url(${src})` }}\n            ></div>\n          );\n        })}\n      </div>\n    </Avatar>\n  );\n};\n"],"file":"GridAvatar.js"}