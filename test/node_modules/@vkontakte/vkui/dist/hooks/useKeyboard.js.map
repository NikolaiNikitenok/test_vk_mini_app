{"version":3,"sources":["../../src/hooks/useKeyboard.ts"],"names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","document","useState","isOpened","setIsOpened","isPrecise","setIsPrecise","transitionalTimeout","useRef","onFocus","useCallback","event","current","clearTimeout","type","activeElement","tagName","setTimeout","useEffect"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT;AACA,SAASC,sBAAT;;AAOA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAuD;AAC5D,MACEC,WADF,GAGID,MAHJ,CACEC,WADF;AAAA,MAEYC,WAFZ,GAGIF,MAHJ,CAEEG,MAFF,CAEYD,WAFZ;AAKA,MAAME,yBAAyB,GAAGC,IAAI,CAACC,KAAL,CAChC,CAAC,IAAIL,WAAW,GAAGC,WAAnB,IAAkC,GADF,CAAlC;AAGA,SAAOE,yBAAyB,GAAG,EAAnC;AACD;AAED,IAAMG,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;AAKA,OAAO,SAASC,WAAT,GAA8C;AAAA;;AACnD,gBAA6Bb,MAAM,EAAnC;AAAA,MAAQG,MAAR,WAAQA,MAAR;AAAA,MAAgBW,QAAhB,WAAgBA,QAAhB;;AAEA,wBAAgCf,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAhC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,yBAAkClB,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAlC;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,mBAAmB,GAAGrB,KAAK,CAACsB,MAAN,CAElB,IAFkB,CAA5B;AAIA,MAAMC,OAAO,GAAGvB,KAAK,CAACwB,WAAN,CACd,UAACC,KAAD,EAA8B;AAAA;;AAC5B,QAAIJ,mBAAmB,CAACK,OAAxB,EAAiC;AAC/BC,MAAAA,YAAY,CAACN,mBAAmB,CAACK,OAArB,CAAZ;AACD;;AAED,QAAMT,QAAQ,GACZ,CAACQ,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACG,IAAN,KAAe,SAAlC,MACC,CAAAb,QAAQ,SAAR,IAAAA,QAAQ,WAAR,qCAAAA,QAAQ,CAAEc,aAAV,gFAAyBC,OAAzB,MAAqC,OAArC,IACC,CAAAf,QAAQ,SAAR,IAAAA,QAAQ,WAAR,sCAAAA,QAAQ,CAAEc,aAAV,kFAAyBC,OAAzB,MAAqC,UAFvC,CADF;AAIAZ,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAV4B,CAY5B;;AACAC,IAAAA,mBAAmB,CAACK,OAApB,GAA8BK,UAAU,CAAC,YAAM;AAC7Cb,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,MAAAA,YAAY,CAACjB,uBAAuB,CAACC,MAAD,CAAxB,CAAZ;AACD,KAHuC,EAGrC,GAHqC,CAAxC;AAID,GAlBa,EAmBd,CAACW,QAAD,aAACA,QAAD,iDAACA,QAAQ,CAAEc,aAAX,2DAAC,uBAAyBC,OAA1B,EAAmC1B,MAAnC,CAnBc,CAAhB;AAsBA;AACF;AACA;AACA;;AACEJ,EAAAA,KAAK,CAACgC,SAAN,CAAgB,YAAM;AACpBT,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAIArB,EAAAA,sBAAsB,CAACa,QAAD,EAAW,UAAX,EAAuBQ,OAAvB,EAAgCZ,YAAhC,CAAtB;AACAT,EAAAA,sBAAsB,CAACa,QAAD,EAAW,SAAX,EAAsBQ,OAAtB,EAA+BZ,YAA/B,CAAtB;AAEA,SAAO;AAAEM,IAAAA,QAAQ,EAARA,QAAF;AAAYE,IAAAA,SAAS,EAATA;AAAZ,GAAP;AACD","sourcesContent":["import * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n  isPrecise: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большиству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round(\n    (1 - innerHeight / availHeight) * 100\n  );\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { window, document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n  const [isPrecise, setIsPrecise] = React.useState(false);\n\n  const transitionalTimeout = React.useRef<ReturnType<\n    typeof setTimeout\n  > | null>(null);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      if (transitionalTimeout.current) {\n        clearTimeout(transitionalTimeout.current);\n      }\n\n      const isOpened =\n        (event === true || event.type === \"focusin\") &&\n        (document?.activeElement?.tagName === \"INPUT\" ||\n          document?.activeElement?.tagName === \"TEXTAREA\");\n      setIsOpened(isOpened);\n      setIsPrecise(false);\n\n      // Ожидаем прохождение анимации раскрытия клавиатуры\n      transitionalTimeout.current = setTimeout(() => {\n        setIsOpened(isOpened);\n        setIsPrecise(getPreciseKeyboardState(window));\n      }, 300);\n    },\n    [document?.activeElement?.tagName, window]\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n\n  return { isOpened, isPrecise };\n}\n"],"file":"useKeyboard.js"}