{"version":3,"sources":["../../tmp/SvgIcon.tsx"],"names":["React","useContext","IconSettingsContext","svgStyle","display","iconClass","fragments","classPrefix","globalClasses","res","i","length","SvgIcon","width","height","viewBox","id","className","style","fill","getRootRef","Component","restProps","size","Math","max","iconSettings","ownClass","color","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAyEC,UAAzE,QAA2F,OAA3F;AACA,SAAgCC,mBAAhC,QAA2D,gBAA3D;AAWA,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAjB;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,QAA+F;AAAA,MAArDC,WAAqD,QAArDA,WAAqD;AAAA,MAAxCC,aAAwC,QAAxCA,aAAwC;AAC7F,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIH,WAAJ,EAAiB;AACfE,MAAAA,GAAG,IAAI,OAAOF,WAAW,GAAGD,SAAS,CAACI,CAAD,CAA9B,CAAP;AACD;;AACD,QAAI,CAACH,WAAD,IAAgBC,aAApB,EAAmC;AACjCC,MAAAA,GAAG,IAAI,MAAMH,SAAS,CAACI,CAAD,CAAtB;AACD;AACF;;AACD,SAAOD,GAAP;AACD;;AAED,OAAO,IAAMG,OAAyB,GAAG,SAA5BA,OAA4B,QAAiG;AAAA,MAA9FC,KAA8F,SAA9FA,KAA8F;AAAA,MAAvFC,MAAuF,SAAvFA,MAAuF;AAAA,MAA/EC,OAA+E,SAA/EA,OAA+E;AAAA,MAAtEC,EAAsE,SAAtEA,EAAsE;AAAA,MAAlEC,SAAkE,SAAlEA,SAAkE;AAAA,MAAvDC,KAAuD,SAAvDA,KAAuD;AAAA,MAAhDC,IAAgD,SAAhDA,IAAgD;AAAA,MAA1CC,UAA0C,SAA1CA,UAA0C;AAAA,MAA9BC,SAA8B,SAA9BA,SAA8B;AAAA,MAAhBC,SAAgB;;AACxI,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASZ,KAAT,EAAgBC,MAAhB,CAAb;AAEA,MAAMY,YAAY,GAAGzB,UAAU,CAACC,mBAAD,CAA/B;AACA,MAAMyB,QAAQ,GAAGtB,SAAS,CAAC,CAAC,MAAD,kBAAkBkB,IAAlB,qBAAqCV,KAArC,qBAAyDC,MAAzD,mBAA4EE,EAA5E,EAAD,EAAoFU,YAApF,CAA1B;AAEA,sBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC;AADP,KAEMJ,SAFN;AAGE,IAAA,GAAG,EAAEF,UAHP;AAIE,IAAA,SAAS,YAAKO,QAAL,cAAiBV,SAAjB,CAJX;AAKE,IAAA,KAAK,kCAAOC,KAAP;AAAcL,MAAAA,KAAK,EAALA,KAAd;AAAqBC,MAAAA,MAAM,EAANA;AAArB;AALP,mBAOE;AAAK,IAAA,OAAO,EAAEC,OAAd;AAAuB,IAAA,KAAK,EAAEF,KAA9B;AAAqC,IAAA,MAAM,EAAEC,MAA7C;AAAqD,IAAA,KAAK,EAAEX;AAA5D,kBACE;AAAK,IAAA,SAAS,aAAMa,EAAN,CAAd;AAA0B,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAE,cAAR;AAAwBS,MAAAA,KAAK,EAAET;AAA/B;AAAjC,IADF,CAPF,CADF;AAaD,CAnBM;AAqBPP,OAAO,CAACiB,YAAR,GAAuB;AACrBR,EAAAA,SAAS,EAAE,KADU;AAErBJ,EAAAA,SAAS,EAAE,EAFU;AAGrBC,EAAAA,KAAK,EAAE;AAHc,CAAvB","sourcesContent":["import React, { ElementType, FC, HTMLAttributes, RefCallback, RefObject, useContext } from 'react';\nimport { IconSettingsInterface, IconSettingsContext } from './IconSettings';\n\ninterface SvgIconProps extends HTMLAttributes<HTMLDivElement> {\n  width?: number;\n  height?: number;\n  viewBox?: string;\n  fill?: string;\n  getRootRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement>;\n  Component?: ElementType,\n}\n\nconst svgStyle = { display: 'block' };\n\nfunction iconClass(fragments: string[], { classPrefix, globalClasses }: IconSettingsInterface) {\n  let res = '';\n  for (let i = 0; i < fragments.length; i++) {\n    if (classPrefix) {\n      res += ' ' + (classPrefix + fragments[i]);\n    }\n    if (!classPrefix || globalClasses) {\n      res += ' ' + fragments[i];\n    }\n  }\n  return res;\n}\n\nexport const SvgIcon: FC<SvgIconProps> = ({ width, height, viewBox, id, className, style, fill, getRootRef, Component, ...restProps }) => {\n  const size = Math.max(width, height);\n\n  const iconSettings = useContext(IconSettingsContext);\n  const ownClass = iconClass(['Icon', `Icon--${size}`, `Icon--w-${width}`, `Icon--h-${height}`, `Icon--${id}`], iconSettings);\n\n  return (\n    <Component\n      role=\"presentation\"\n      {...restProps}\n      ref={getRootRef}\n      className={`${ownClass} ${className}`}\n      style={{ ...style, width, height }}\n    >\n      <svg viewBox={viewBox} width={width} height={height} style={svgStyle}>\n        <use xlinkHref={`#${id}`} style={{ fill: 'currentColor', color: fill }} />\n      </svg>\n    </Component>\n  );\n};\n\nSvgIcon.defaultProps = {\n  Component: 'div',\n  className: '',\n  style: {},\n};\n"],"file":"SvgIcon.js"}