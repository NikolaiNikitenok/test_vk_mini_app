{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\"; // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\n\nexport function getCreateAddress(tx) {\n  const from = getAddress(tx.from);\n  const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n  let nonceHex = nonce.toString(16);\n\n  if (nonceHex === \"0\") {\n    nonceHex = \"0x\";\n  } else if (nonceHex.length % 2) {\n    nonceHex = \"0x0\" + nonceHex;\n  } else {\n    nonceHex = \"0x\" + nonceHex;\n  }\n\n  return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));\n}\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\n\nexport function getCreate2Address(_from, _salt, _initCodeHash) {\n  const from = getAddress(_from);\n  const salt = getBytes(_salt, \"salt\");\n  const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n  assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n  assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n  return getAddress(dataSlice(keccak256(concat([\"0xff\", from, salt, initCodeHash])), 12));\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SACIC,MADJ,EACYC,SADZ,EACuBC,SADvB,EACkCC,QADlC,EAC4CC,SAD5C,EACuDC,cADvD,QAEO,mBAFP;AAIA,SAASC,UAAT,QAA2B,cAA3B,C,CAKA;;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,gBAAV,CAA2BC,EAA3B,EAAoE;AACtE,QAAMC,IAAI,GAAGH,UAAU,CAACE,EAAE,CAACC,IAAJ,CAAvB;AACA,QAAMC,KAAK,GAAGR,SAAS,CAACM,EAAE,CAACE,KAAJ,EAAW,UAAX,CAAvB;AAEA,MAAIC,QAAQ,GAAGD,KAAK,CAACE,QAAN,CAAe,EAAf,CAAf;;AACA,MAAID,QAAQ,KAAK,GAAjB,EAAsB;AAClBA,YAAQ,GAAG,IAAX;AACH,GAFD,MAEO,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AAC5BF,YAAQ,GAAG,QAAQA,QAAnB;AACH,GAFM,MAEA;AACHA,YAAQ,GAAG,OAAOA,QAAlB;AACH;;AAED,SAAOL,UAAU,CAACL,SAAS,CAACF,SAAS,CAACK,SAAS,CAAC,CAAEK,IAAF,EAAQE,QAAR,CAAD,CAAV,CAAV,EAA2C,EAA3C,CAAV,CAAjB;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUG,iBAAV,CAA4BC,KAA5B,EAA2CC,KAA3C,EAA6DC,aAA7D,EAAqF;AACvF,QAAMR,IAAI,GAAGH,UAAU,CAACS,KAAD,CAAvB;AACA,QAAMG,IAAI,GAAGf,QAAQ,CAACa,KAAD,EAAQ,MAAR,CAArB;AACA,QAAMG,YAAY,GAAGhB,QAAQ,CAACc,aAAD,EAAgB,cAAhB,CAA7B;AAEAZ,gBAAc,CAACa,IAAI,CAACL,MAAL,KAAgB,EAAjB,EAAqB,uBAArB,EAA8C,MAA9C,EAAsDG,KAAtD,CAAd;AAEAX,gBAAc,CAACc,YAAY,CAACN,MAAb,KAAwB,EAAzB,EAA6B,+BAA7B,EAA8D,cAA9D,EAA8EI,aAA9E,CAAd;AAEA,SAAOX,UAAU,CAACL,SAAS,CAACF,SAAS,CAACC,MAAM,CAAC,CAAE,MAAF,EAAUS,IAAV,EAAgBS,IAAhB,EAAsBC,YAAtB,CAAD,CAAP,CAAV,EAA0D,EAA1D,CAAV,CAAjB;AACH","names":["keccak256","concat","dataSlice","getBigInt","getBytes","encodeRlp","assertArgument","getAddress","getCreateAddress","tx","from","nonce","nonceHex","toString","length","getCreate2Address","_from","_salt","_initCodeHash","salt","initCodeHash"],"sourceRoot":"","sources":["../../src.ts/address/contract-address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}