{"ast":null,"code":"import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nexport class NonceManager extends AbstractSigner {\n  signer;\n  #noncePromise;\n  #delta;\n\n  constructor(signer) {\n    super(signer.provider);\n    defineProperties(this, {\n      signer\n    });\n    this.#noncePromise = null;\n    this.#delta = 0;\n  }\n\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (this.#noncePromise == null) {\n        this.#noncePromise = super.getNonce(\"pending\");\n      }\n\n      return (await this.#noncePromise) + this.#delta;\n    }\n\n    return super.getNonce(blockTag);\n  }\n\n  increment() {\n    this.#delta++;\n  }\n\n  reset() {\n    this.#delta = 0;\n    this.#noncePromise = null;\n  }\n\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise; // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n\n    return await this.signer.sendTransaction(tx);\n  }\n\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAUA,OAAM,MAAOC,YAAP,SAA4BD,cAA5B,CAA0C;AAC5CE,QAAM;AAEN;AACA;;AAEAC,cAAYD,MAAZ,EAA0B;AACtB,UAAMA,MAAM,CAACE,QAAb;AACAL,oBAAgB,CAAe,IAAf,EAAqB;AAAEG;AAAF,KAArB,CAAhB;AAEA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,MAAL,GAAc,CAAd;AACH;;AAEe,QAAVG,UAAU;AACZ,WAAO,KAAKH,MAAL,CAAYG,UAAZ,EAAP;AACH;;AAEDC,SAAO,CAACF,QAAD,EAA0B;AAC7B,WAAO,IAAIH,YAAJ,CAAiB,KAAKC,MAAL,CAAYI,OAAZ,CAAoBF,QAApB,CAAjB,CAAP;AACH;;AAEa,QAARG,QAAQ,CAACC,QAAD,EAAoB;AAC9B,QAAIA,QAAQ,KAAK,SAAjB,EAA4B;AACxB,UAAI,KAAK,aAAL,IAAsB,IAA1B,EAAgC;AAC5B,aAAK,aAAL,GAAqB,MAAMD,QAAN,CAAe,SAAf,CAArB;AACH;;AACD,aAAO,CAAC,MAAM,KAAK,aAAZ,IAA6B,KAAK,MAAzC;AACH;;AAED,WAAO,MAAMA,QAAN,CAAeC,QAAf,CAAP;AACH;;AAEDC,WAAS;AACL,SAAK,MAAL;AACH;;AAEDC,OAAK;AACD,SAAK,MAAL,GAAc,CAAd;AACA,SAAK,aAAL,GAAqB,IAArB;AACH;;AAEoB,QAAfC,eAAe,CAACC,EAAD,EAAuB;AACxC,UAAMC,YAAY,GAAG,KAAKN,QAAL,CAAc,SAAd,CAArB;AACA,SAAKE,SAAL;AAEAG,MAAE,GAAG,MAAM,KAAKV,MAAL,CAAYY,mBAAZ,CAAgCF,EAAhC,CAAX;AACAA,MAAE,CAACG,KAAH,GAAW,MAAMF,YAAjB,CALwC,CAOxC;AACA;;AACA,WAAO,MAAM,KAAKX,MAAL,CAAYS,eAAZ,CAA4BC,EAA5B,CAAb;AACH;;AAEDI,iBAAe,CAACJ,EAAD,EAAuB;AAClC,WAAO,KAAKV,MAAL,CAAYc,eAAZ,CAA4BJ,EAA5B,CAAP;AACH;;AAEDK,aAAW,CAACC,OAAD,EAA6B;AACpC,WAAO,KAAKhB,MAAL,CAAYe,WAAZ,CAAwBC,OAAxB,CAAP;AACH;;AAEDC,eAAa,CAACC,MAAD,EAA0BC,KAA1B,EAAwEC,KAAxE,EAAkG;AAC3G,WAAO,KAAKpB,MAAL,CAAYiB,aAAZ,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyCC,KAAzC,CAAP;AACH;;AAhE2C","names":["defineProperties","AbstractSigner","NonceManager","signer","constructor","provider","getAddress","connect","getNonce","blockTag","increment","reset","sendTransaction","tx","noncePromise","populateTransaction","nonce","signTransaction","signMessage","message","signTypedData","domain","types","value"],"sourceRoot":"","sources":["../../src.ts/providers/signer-noncemanager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}