{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\k8909\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\GitHub\\\\test_vk_mini_app\\\\test\\\\src\\\\panels\\\\Settings.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ethers } from 'ethers';\nimport { Button, Group, Panel, PanelHeader, PanelHeaderBack, Div, Header, TabsItem, Tabs, Snackbar, Avatar, CellButton } from '@vkontakte/vkui';\nimport { Icon28SettingsOutline, Icon28LogoVk, Icon16Done } from '@vkontakte/icons'; // import MetaMask from 'metamask-connect';\n\nimport Web3 from 'web3'; // import WalletConnectProvider from '@walletconnect/web3-provider';\n\nimport './Persik.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Settings = _ref => {\n  _s();\n\n  let {\n    id,\n    go\n  } = _ref;\n  const [userAccount, setUserAccount] = useState(null);\n\n  const onConnect = () => {\n    let provider;\n\n    if (window.ethereum) {\n      //если есть метамаск\n      window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }).then(account => {\n        setUserAccount(account[0]);\n        getBalance(account[0]);\n      });\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      alert(\"Установите МетаМаск!\");\n    }\n  };\n\n  const getBalance = account => {\n    window.ethereum.request({\n      method: \"eth_getBalance\",\n      params: [account, \"Latest\"]\n    }).then(balance => {\n      console.log(balance);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      left: /*#__PURE__*/_jsxDEV(Icon28LogoVk, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 23\n      }, this),\n      children: \" NFT for Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      children: [/*#__PURE__*/_jsxDEV(TabsItem, {\n        onClick: go,\n        \"data-to\": \"home\",\n        children: \"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TabsItem, {\n        onClick: go,\n        \"data-to\": \"inventory\",\n        children: \"\\u041C\\u043E\\u0438 \\u041C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TabsItem, {\n        selected: true,\n        onClick: go,\n        \"data-to\": \"settings\",\n        children: \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Group, {\n      header: /*#__PURE__*/_jsxDEV(Header, {\n        mode: \"secondary\",\n        children: \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 19\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Div, {\n        children: userAccount ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u041A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D!!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u0435 \\u0441\\u0432\\u043E\\u0439 \\u043A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A \\u043A \\u043F\\u0440\\u0438\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u044E!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            stretched: true,\n            size: \"l\",\n            mode: \"secondary\",\n            onClick: onConnect,\n            children: \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u043A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A MetaMask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this); // const [isConnected, setIsConnected] = useState(false);\n  // const [ethBalance, setEthBalance] = useState(\"\");\n  // const detectCurrentProvider = () => {\n  //   let provider;\n  //   if (window.ethereum) {\n  //     provider = window.ethereum;\n  //   } else if (window.web3) {\n  //     provider = window.web3.currentProvider;\n  //   } else {\n  //     console.log(\"Non-ethereum browser detected. You should install Metamask\");\n  //   }\n  //   return provider;\n  // };\n  // const onConnect = async() => {\n  //   try {\n  //     const currentProvider = detectCurrentProvider();\n  //     if(currentProvider) {\n  //       await currentProvider.request({method: 'eth_requestAccounts'});\n  //       const web3 = new Web3(currentProvider);\n  //       const userAccount  =await web3.eth.getAccounts();\n  //       const account = userAccount[0];\n  //       let ethBalance = await web3.eth.getBalance(account);\n  //       setEthBalance(ethBalance);\n  //       setIsConnected(true);\n  //     }\n  //   } catch(err) {\n  //     console.log(err);\n  //   }\n  // }\n  // const onDisconnect = () => {\n  //   setIsConnected(false);\n  // }\n  // return (\n  //   <div className=\"app\">\n  //     <div className=\"app-header\">\n  //       <h1>React dApp authentication with React, We3.js and Metamask</h1>\n  //     </div>\n  //     <div className=\"app-wrapper\">\n  //       {!isConnected && (\n  //         <div>\n  //           <button className=\"app-button__login\" onClick={onConnect}>\n  //           Login\n  //           </button>\n  //         </div>\n  //       )}\n  //     </div>\n  //     {isConnected && (\n  //       <div className=\"app-wrapper\">\n  //         <div className=\"app-details\">\n  //           <h2> You are connected to metamask.</h2>\n  //           <div className=\"app-balance\">\n  //             <span>Balance: </span>\n  //             {ethBalance}\n  //           </div>\n  //         </div>\n  //         <div>\n  //           <button className=\"app-buttons__logout\" onClick={onDisconnect}>\n  //           Disconnect\n  //           </button>\n  //         </div>\n  //       </div>\n  //     )}\n  //   </div>\n  // );\n};\n\n_s(Settings, \"B4a7qos7mNGLupLh51BdB7QXy9g=\");\n\n_c = Settings;\nSettings.propTypes = {\n  id: PropTypes.string.isRequired,\n  go: PropTypes.func.isRequired\n}; // Inventory.propTypes = {\n// \tid: PropTypes.string.isRequired,\n// \tgo: PropTypes.func.isRequired,\n// };\n\nexport default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/src/panels/Settings.js"],"names":["React","useState","useEffect","PropTypes","ethers","Button","Group","Panel","PanelHeader","PanelHeaderBack","Div","Header","TabsItem","Tabs","Snackbar","Avatar","CellButton","Icon28SettingsOutline","Icon28LogoVk","Icon16Done","Web3","Settings","id","go","userAccount","setUserAccount","onConnect","provider","window","ethereum","request","method","then","account","getBalance","web3","currentProvider","alert","params","balance","console","log","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {ethers} from 'ethers'\r\nimport { Button, Group, Panel, PanelHeader, PanelHeaderBack, Div, Header, TabsItem, Tabs, Snackbar, Avatar, CellButton} from '@vkontakte/vkui';\r\nimport {Icon28SettingsOutline, Icon28LogoVk, Icon16Done} from '@vkontakte/icons';\r\n// import MetaMask from 'metamask-connect';\r\nimport Web3 from 'web3';\r\n// import WalletConnectProvider from '@walletconnect/web3-provider';\r\n\r\nimport './Persik.css';\r\n\r\nconst Settings = ({id, go}) => {\r\n\tconst [userAccount, setUserAccount] = useState(null);\r\n\r\n\tconst onConnect = () => {\r\n\t\tlet provider;\r\n\t\tif (window.ethereum) {\r\n\t\t\t//если есть метамаск\r\n\t\t\twindow.ethereum.request({method: \"eth_requestAccounts\"}).then((account) => {\r\n\t\t\t\tsetUserAccount(account[0]);\r\n\t\t\t\tgetBalance(account[0]);\r\n\t\t\t})\r\n\t\t} else if (window.web3) {\r\n\t\t\tprovider = window.web3.currentProvider;\r\n\t\t} else {\r\n\t\t\talert(\"Установите МетаМаск!\")\r\n\t\t}\r\n\t};\r\n\r\n\tconst getBalance = (account) => {\r\n\t\twindow.ethereum.request({method: \"eth_getBalance\", params: [account, \"Latest\"],}).then((balance) => {\r\n\t\t\tconsole.log(balance)\t\r\n\t\t})\r\n\t};\r\n    \r\n\r\n\treturn(\r\n\t\t<Panel>\r\n\t\t\t<PanelHeader left={<Icon28LogoVk/>}> NFT for Events\r\n\t\t\t\r\n\t\t\t</PanelHeader>\r\n\t\t\t<Tabs>\r\n\t\t\t\t<TabsItem onClick={go} data-to=\"home\">Главная</TabsItem>\r\n\t\t\t\t{/* <TabsItem>Купить билеты</TabsItem> */}\r\n\t\t\t\t<TabsItem onClick={go} data-to=\"inventory\">Мои Мероприятия</TabsItem>\r\n\t\t\t\t<TabsItem selected onClick={go} data-to=\"settings\">Настройки</TabsItem>\r\n\t\t\t</Tabs>\r\n\t\t\t<Group header={<Header mode=\"secondary\">Подключить MetaMask</Header>}>\r\n\t\t\t\t<Div>\t\r\n\t\t\t\t\t{userAccount ? (\r\n                        <>\r\n                            <span>Кошелек подключен!!!</span>\r\n                        </>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<><h2>Подключите свой кошелек к приложению!</h2>\r\n\t\t\t\t\t\t\t<Button stretched size=\"l\" mode=\"secondary\" onClick={onConnect} >Подключить кошелек MetaMask</Button></>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t{/* <><h2>Подключите свой кошелек к приложению!</h2>\r\n\t\t\t\t\t<Button>Подключить кошелек MetaMask</Button></> */}\r\n\t\t\t\t</Div>\r\n\t\t\t</Group>\r\n\t\t</Panel>\r\n\t)\r\n\r\n\t// const [isConnected, setIsConnected] = useState(false);\r\n  // const [ethBalance, setEthBalance] = useState(\"\");\r\n  \r\n  // const detectCurrentProvider = () => {\r\n  //   let provider;\r\n  //   if (window.ethereum) {\r\n  //     provider = window.ethereum;\r\n  //   } else if (window.web3) {\r\n  //     provider = window.web3.currentProvider;\r\n  //   } else {\r\n  //     console.log(\"Non-ethereum browser detected. You should install Metamask\");\r\n  //   }\r\n  //   return provider;\r\n  // };\r\n  \r\n  // const onConnect = async() => {\r\n  //   try {\r\n  //     const currentProvider = detectCurrentProvider();\r\n  //     if(currentProvider) {\r\n  //       await currentProvider.request({method: 'eth_requestAccounts'});\r\n  //       const web3 = new Web3(currentProvider);\r\n  //       const userAccount  =await web3.eth.getAccounts();\r\n  //       const account = userAccount[0];\r\n  //       let ethBalance = await web3.eth.getBalance(account);\r\n  //       setEthBalance(ethBalance);\r\n  //       setIsConnected(true);\r\n  //     }\r\n  //   } catch(err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // const onDisconnect = () => {\r\n  //   setIsConnected(false);\r\n  // }\r\n  \r\n  \r\n  \r\n  // return (\r\n  //   <div className=\"app\">\r\n  //     <div className=\"app-header\">\r\n  //       <h1>React dApp authentication with React, We3.js and Metamask</h1>\r\n  //     </div>\r\n  //     <div className=\"app-wrapper\">\r\n  //       {!isConnected && (\r\n  //         <div>\r\n  //           <button className=\"app-button__login\" onClick={onConnect}>\r\n  //           Login\r\n  //           </button>\r\n  //         </div>\r\n  //       )}\r\n  //     </div>\r\n  //     {isConnected && (\r\n  //       <div className=\"app-wrapper\">\r\n  //         <div className=\"app-details\">\r\n  //           <h2> You are connected to metamask.</h2>\r\n  //           <div className=\"app-balance\">\r\n  //             <span>Balance: </span>\r\n  //             {ethBalance}\r\n  //           </div>\r\n  //         </div>\r\n  //         <div>\r\n  //           <button className=\"app-buttons__logout\" onClick={onDisconnect}>\r\n  //           Disconnect\r\n  //           </button>\r\n  //         </div>\r\n  //       </div>\r\n  //     )}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nSettings.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n// Inventory.propTypes = {\r\n// \tid: PropTypes.string.isRequired,\r\n// \tgo: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}