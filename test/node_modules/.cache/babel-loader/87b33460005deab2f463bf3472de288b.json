{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"defaultValue\", \"grow\", \"style\", \"onResize\", \"className\", \"getRootRef\", \"getRef\", \"sizeY\", \"rows\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { FormField } from \"../FormField/FormField\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { useEnsuredControl } from \"../../hooks/useEnsuredControl\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nvar Textarea = /*#__PURE__*/React.memo(function (_ref) {\n  var _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n      _ref$grow = _ref.grow,\n      grow = _ref$grow === void 0 ? true : _ref$grow,\n      style = _ref.style,\n      onResize = _ref.onResize,\n      className = _ref.className,\n      getRootRef = _ref.getRootRef,\n      getRef = _ref.getRef,\n      sizeY = _ref.sizeY,\n      _ref$rows = _ref.rows,\n      rows = _ref$rows === void 0 ? 2 : _ref$rows,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useEnsuredControl = useEnsuredControl(restProps, {\n    defaultValue: defaultValue\n  }),\n      _useEnsuredControl2 = _slicedToArray(_useEnsuredControl, 2),\n      value = _useEnsuredControl2[0],\n      onChange = _useEnsuredControl2[1];\n\n  var currentScrollHeight = React.useRef();\n  var elementRef = useExternRef(getRef);\n  var platform = usePlatform(); // autosize input\n\n  React.useEffect(function () {\n    var el = elementRef.current;\n\n    if (grow && el !== null && el !== void 0 && el.offsetParent) {\n      el.style.height = \"\";\n      el.style.height = \"\".concat(el.scrollHeight, \"px\");\n\n      if (el.scrollHeight !== currentScrollHeight.current && onResize) {\n        onResize(el);\n        currentScrollHeight.current = el.scrollHeight;\n      }\n    }\n  }, [grow, value, sizeY, elementRef, onResize]);\n  return createScopedElement(FormField, {\n    vkuiClass: classNames(getClassName(\"Textarea\", platform), \"Textarea--sizeY-\".concat(sizeY)),\n    className: className,\n    style: style,\n    getRootRef: getRootRef,\n    disabled: restProps.disabled\n  }, createScopedElement(\"textarea\", _extends({}, restProps, {\n    rows: rows,\n    vkuiClass: \"Textarea__el\",\n    value: value,\n    onChange: onChange,\n    ref: elementRef\n  })));\n}); // eslint-disable-next-line import/no-default-export\n\nexport default withAdaptivity(Textarea, {\n  sizeY: true\n});","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT;AACA,SAASC,SAAT;AAEA,SAASC,cAAT;AACA,SAASC,YAAT;AACA,SAASC,iBAAT;AACA,SAASC,YAAT;AACA,SAASC,WAAT;AAaA,IAAMC,QAAiC,gBAAGR,KAAK,CAACS,IAANT,CACxC,gBAWqB;AAAA,+BAVnBU,YAUmB;AAAA,MAVnBA,YAUmB,kCAVJ,EAUI;AAAA,uBATnBC,IASmB;AAAA,MATnBA,IASmB,0BATZ,IASY;AAAA,MARnBC,KAQmB,QARnBA,KAQmB;AAAA,MAPnBC,QAOmB,QAPnBA,QAOmB;AAAA,MANnBC,SAMmB,QANnBA,SAMmB;AAAA,MALnBC,UAKmB,QALnBA,UAKmB;AAAA,MAJnBC,MAImB,QAJnBA,MAImB;AAAA,MAHnBC,KAGmB,QAHnBA,KAGmB;AAAA,uBAFnBC,IAEmB;AAAA,MAFnBA,IAEmB,0BAFZ,CAEY;AAAA,MADhBC,SACgB;;AACnB,2BAA0Bd,iBAAiB,CAACc,SAAD,EAAY;AAAET,gBAAY,EAAZA;AAAF,GAAZ,CAA3C;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,mBAAmB,GAAGtB,KAAK,CAACuB,MAANvB,EAA5B;AACA,MAAMwB,UAAU,GAAGlB,YAAY,CAACU,MAAD,CAA/B;AACA,MAAMS,QAAQ,GAAGlB,WAAW,EAA5B,CAJmB,CAMnB;;AACAP,OAAK,CAAC0B,SAAN1B,CAAgB,YAAM;AACpB,QAAM2B,EAAE,GAAGH,UAAU,CAACI,OAAtB;;AAEA,QAAIjB,IAAI,IAAIgB,EAAJ,SAAJhB,IAAQgB,EAAJ,WAAJhB,IAAQgB,EAAE,CAAEE,YAAhB,EAA8B;AAC5BF,QAAE,CAACf,KAAHe,CAASG,MAATH,GAAkB,EAAlBA;AACAA,QAAE,CAACf,KAAHe,CAASG,MAATH,aAAqBA,EAAE,CAACI,YAAxB;;AAEA,UAAIJ,EAAE,CAACI,YAAHJ,KAAoBL,mBAAmB,CAACM,OAAxCD,IAAmDd,QAAvD,EAAiE;AAC/DA,gBAAQ,CAACc,EAAD,CAARd;AACAS,2BAAmB,CAACM,OAApBN,GAA8BK,EAAE,CAACI,YAAjCT;AACD;AACF;AAXH,KAYG,CAACX,IAAD,EAAOS,KAAP,EAAcH,KAAd,EAAqBO,UAArB,EAAiCX,QAAjC,CAZHb;AAcA,SACEgC,oBAAC9B,SAAD;AACE+B,aAAS,EAAEhC,UAAU,CACnBG,YAAY,CAAC,UAAD,EAAaqB,QAAb,CADO,4BAEAR,KAFA,EADvB;AAKEH,aAAS,EAAEA,SALb;AAMEF,SAAK,EAAEA,KANT;AAOEG,cAAU,EAAEA,UAPd;AAQEmB,YAAQ,EAAEf,SAAS,CAACe;AARtB,KAUEF,6CACMb,SADN;AAEED,QAAI,EAAEA,IAFR;AAGEe,aAAS,EAAC,cAHZ;AAIEb,SAAK,EAAEA,KAJT;AAKEC,YAAQ,EAAEA,QALZ;AAMEc,OAAG,EAAEX;AANP,KAVF,CADF;AAjCsC,EAA1C,C,CAyDA;;AACA,eAAerB,cAAc,CAACK,QAAD,EAAW;AAAES,OAAK,EAAE;AAAT,CAAX,CAA7B","names":["React","classNames","FormField","withAdaptivity","getClassName","useEnsuredControl","useExternRef","usePlatform","Textarea","memo","defaultValue","grow","style","onResize","className","getRootRef","getRef","sizeY","rows","restProps","value","onChange","currentScrollHeight","useRef","elementRef","platform","useEffect","el","current","offsetParent","height","scrollHeight","createScopedElement","vkuiClass","disabled","ref"],"sources":["../../../src/components/Textarea/Textarea.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { FormField } from \"../FormField/FormField\";\nimport { HasRef, HasRootRef } from \"../../types\";\nimport { withAdaptivity, AdaptivityProps } from \"../../hoc/withAdaptivity\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { useEnsuredControl } from \"../../hooks/useEnsuredControl\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport \"./Textarea.css\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HasRef<HTMLTextAreaElement>,\n    HasRootRef<HTMLElement>,\n    AdaptivityProps {\n  grow?: boolean;\n  onResize?(el: HTMLTextAreaElement): void;\n  defaultValue?: string;\n}\n\nconst Textarea: React.FC<TextareaProps> = React.memo(\n  ({\n    defaultValue = \"\",\n    grow = true,\n    style,\n    onResize,\n    className,\n    getRootRef,\n    getRef,\n    sizeY,\n    rows = 2,\n    ...restProps\n  }: TextareaProps) => {\n    const [value, onChange] = useEnsuredControl(restProps, { defaultValue });\n    const currentScrollHeight = React.useRef<number>();\n    const elementRef = useExternRef(getRef);\n    const platform = usePlatform();\n\n    // autosize input\n    React.useEffect(() => {\n      const el = elementRef.current;\n\n      if (grow && el?.offsetParent) {\n        el.style.height = \"\";\n        el.style.height = `${el.scrollHeight}px`;\n\n        if (el.scrollHeight !== currentScrollHeight.current && onResize) {\n          onResize(el);\n          currentScrollHeight.current = el.scrollHeight;\n        }\n      }\n    }, [grow, value, sizeY, elementRef, onResize]);\n\n    return (\n      <FormField\n        vkuiClass={classNames(\n          getClassName(\"Textarea\", platform),\n          `Textarea--sizeY-${sizeY}`\n        )}\n        className={className}\n        style={style}\n        getRootRef={getRootRef}\n        disabled={restProps.disabled}\n      >\n        <textarea\n          {...restProps}\n          rows={rows}\n          vkuiClass=\"Textarea__el\"\n          value={value}\n          onChange={onChange}\n          ref={elementRef}\n        />\n      </FormField>\n    );\n  }\n);\n\n// eslint-disable-next-line import/no-default-export\nexport default withAdaptivity(Textarea, { sizeY: true });\n"]},"metadata":{},"sourceType":"module"}