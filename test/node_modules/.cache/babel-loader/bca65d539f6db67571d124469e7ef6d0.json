{"ast":null,"code":"/**\r\n *  When interacting with Ethereum, it is necessary to use a private\r\n *  key authenticate actions by signing a payload.\r\n *\r\n *  Wallets are the simplest way to expose the concept of an\r\n *  //Externally Owner Account// (EOA) as it wraps a private key\r\n *  and supports high-level methods to sign common types of interaction\r\n *  and send transactions.\r\n *\r\n *  The class most developers will want to use is [[Wallet]], which\r\n *  can load a private key directly or from any common wallet format.\r\n *\r\n *  The [[HDNodeWallet]] can be used when it is necessary to access\r\n *  low-level details of how an HD wallets are derived, exported\r\n *  or imported.\r\n *\r\n *  @_section: api/wallet:Wallets  [wallets]\r\n */\nexport { BaseWallet } from \"./base-wallet.js\";\nexport { defaultPath, getAccountPath, HDNodeWallet, HDNodeVoidWallet } from \"./hdwallet.js\";\nexport { isCrowdsaleJson, decryptCrowdsaleJson } from \"./json-crowdsale.js\";\nexport { isKeystoreJson, decryptKeystoreJsonSync, decryptKeystoreJson, encryptKeystoreJson, encryptKeystoreJsonSync } from \"./json-keystore.js\";\nexport { Mnemonic } from \"./mnemonic.js\";\nexport { Wallet } from \"./wallet.js\";","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,SACIC,WADJ,EAGIC,cAHJ,EAKIC,YALJ,EAMIC,gBANJ,QAOO,eAPP;AASA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,qBAAtD;AAEA,SACIC,cADJ,EAEIC,uBAFJ,EAE6BC,mBAF7B,EAGIC,mBAHJ,EAGyBC,uBAHzB,QAIO,oBAJP;AAMA,SAASC,QAAT,QAAyB,eAAzB;AAEA,SAASC,MAAT,QAAuB,aAAvB","names":["BaseWallet","defaultPath","getAccountPath","HDNodeWallet","HDNodeVoidWallet","isCrowdsaleJson","decryptCrowdsaleJson","isKeystoreJson","decryptKeystoreJsonSync","decryptKeystoreJson","encryptKeystoreJson","encryptKeystoreJsonSync","Mnemonic","Wallet"],"sourceRoot":"","sources":["../../src.ts/wallet/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}