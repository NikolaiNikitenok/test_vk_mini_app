{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"toggleRef\", \"closing\", \"popupDirection\", \"onClose\", \"className\", \"style\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { useDOM } from \"../../lib/dom\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useEffectDev } from \"../../hooks/useEffectDev\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { isRefObject } from \"../../lib/isRefObject\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { useEventListener } from \"../../hooks/useEventListener\";\nimport { FocusTrap } from \"../FocusTrap/FocusTrap\";\nimport { Popper } from \"../Popper/Popper\";\nvar warn = warnOnce(\"ActionSheet\");\n\nfunction getEl(ref) {\n  return ref && \"current\" in ref ? ref.current : ref;\n}\n\nexport var ActionSheetDropdownDesktop = function ActionSheetDropdownDesktop(_ref) {\n  var children = _ref.children,\n      toggleRef = _ref.toggleRef,\n      closing = _ref.closing,\n      popupDirection = _ref.popupDirection,\n      onClose = _ref.onClose,\n      className = _ref.className,\n      style = _ref.style,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var platform = usePlatform();\n\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  var elementRef = React.useRef(null);\n  useEffectDev(function () {\n    var toggleEl = getEl(toggleRef);\n\n    if (!toggleEl) {\n      warn(\"toggleRef not passed\");\n    }\n  }, [toggleRef]);\n  var isPopupDirectionTop = React.useMemo(function () {\n    return popupDirection === \"top\" || typeof popupDirection === \"function\" && popupDirection(elementRef) === \"top\";\n  }, [popupDirection, elementRef]);\n  var bodyClickListener = useEventListener(\"click\", function (e) {\n    var dropdownElement = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n\n    if (dropdownElement && !dropdownElement.contains(e.target)) {\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  });\n  React.useEffect(function () {\n    setTimeout(function () {\n      bodyClickListener.add(document.body);\n    });\n  }, [bodyClickListener, document]);\n  var onClick = React.useCallback(function (e) {\n    return e.stopPropagation();\n  }, []);\n  var targetRef = React.useMemo(function () {\n    if (isRefObject(toggleRef)) {\n      return toggleRef;\n    }\n\n    var refObject = {\n      current: toggleRef\n    };\n    return refObject;\n  }, [toggleRef]);\n  return createScopedElement(Popper, {\n    targetRef: targetRef,\n    offsetDistance: 0,\n    placement: isPopupDirectionTop ? \"top-end\" : \"bottom-end\",\n    vkuiClass: classNames(getClassName(\"ActionSheet\", platform), \"ActionSheet--desktop\", \"ActionSheet--sizeY-\".concat(sizeY)),\n    className: className,\n    style: style,\n    getRef: elementRef,\n    forcePortal: false\n  }, createScopedElement(FocusTrap, _extends({\n    onClose: onClose\n  }, restProps, {\n    onClick: onClick\n  }), children));\n};","map":{"version":3,"mappings":"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","names":["React","getClassName","classNames","useDOM","usePlatform","useEffectDev","useAdaptivity","isRefObject","warnOnce","useEventListener","FocusTrap","Popper","warn","getEl","ref","current","ActionSheetDropdownDesktop","children","toggleRef","closing","popupDirection","onClose","className","style","restProps","document","platform","sizeY","elementRef","useRef","toggleEl","isPopupDirectionTop","useMemo","bodyClickListener","e","dropdownElement","contains","target","useEffect","setTimeout","add","body","onClick","useCallback","stopPropagation","targetRef","refObject","createScopedElement","offsetDistance","placement","vkuiClass","getRef","forcePortal"],"sources":["../../../src/components/ActionSheet/ActionSheetDropdownDesktop.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { useDOM } from \"../../lib/dom\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useEffectDev } from \"../../hooks/useEffectDev\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { isRefObject } from \"../../lib/isRefObject\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { useEventListener } from \"../../hooks/useEventListener\";\nimport { SharedDropdownProps } from \"./types\";\nimport { FocusTrap } from \"../FocusTrap/FocusTrap\";\nimport { Popper } from \"../Popper/Popper\";\nimport \"./ActionSheet.css\";\n\nconst warn = warnOnce(\"ActionSheet\");\nfunction getEl(\n  ref: SharedDropdownProps[\"toggleRef\"]\n): Element | null | undefined {\n  return ref && \"current\" in ref ? ref.current : ref;\n}\n\nexport const ActionSheetDropdownDesktop: React.FC<SharedDropdownProps> = ({\n  children,\n  toggleRef,\n  closing,\n  popupDirection,\n  onClose,\n  className,\n  style,\n  ...restProps\n}) => {\n  const { document } = useDOM();\n  const platform = usePlatform();\n  const { sizeY } = useAdaptivity();\n  const elementRef = React.useRef<HTMLDivElement | null>(null);\n\n  useEffectDev(() => {\n    const toggleEl = getEl(toggleRef);\n    if (!toggleEl) {\n      warn(\"toggleRef not passed\");\n    }\n  }, [toggleRef]);\n\n  const isPopupDirectionTop = React.useMemo(\n    () =>\n      popupDirection === \"top\" ||\n      (typeof popupDirection === \"function\" &&\n        popupDirection(elementRef) === \"top\"),\n    [popupDirection, elementRef]\n  );\n\n  const bodyClickListener = useEventListener(\"click\", (e: MouseEvent) => {\n    const dropdownElement = elementRef?.current;\n    if (dropdownElement && !dropdownElement.contains(e.target as Node)) {\n      onClose?.();\n    }\n  });\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      bodyClickListener.add(document!.body);\n    });\n  }, [bodyClickListener, document]);\n\n  const onClick = React.useCallback((e) => e.stopPropagation(), []);\n\n  const targetRef = React.useMemo(() => {\n    if (isRefObject<SharedDropdownProps[\"toggleRef\"], HTMLElement>(toggleRef)) {\n      return toggleRef;\n    }\n    const refObject = { current: toggleRef as HTMLElement };\n\n    return refObject;\n  }, [toggleRef]);\n\n  return (\n    <Popper\n      targetRef={targetRef}\n      offsetDistance={0}\n      placement={isPopupDirectionTop ? \"top-end\" : \"bottom-end\"}\n      vkuiClass={classNames(\n        getClassName(\"ActionSheet\", platform),\n        \"ActionSheet--desktop\",\n        `ActionSheet--sizeY-${sizeY}`\n      )}\n      className={className}\n      style={style}\n      getRef={elementRef}\n      forcePortal={false}\n    >\n      <FocusTrap onClose={onClose} {...restProps} onClick={onClick}>\n        {children}\n      </FocusTrap>\n    </Popper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}