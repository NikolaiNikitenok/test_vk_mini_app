{"ast":null,"code":"/**\n *  Explain all the nitty-gritty about the **FallbackProvider**.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport { getBigInt, getNumber, assert, assertArgument } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stringify(value) {\n  return JSON.stringify(value, (key, value) => {\n    if (typeof value === \"bigint\") {\n      return {\n        type: \"bigint\",\n        value: value.toString()\n      };\n    }\n\n    return value;\n  });\n}\n\n;\nconst defaultConfig = {\n  stallTimeout: 400,\n  priority: 1,\n  weight: 1\n};\nconst defaultState = {\n  blockNumber: -2,\n  requests: 0,\n  lateResponses: 0,\n  errorResponses: 0,\n  outOfSync: -1,\n  unsupportedEvents: 0,\n  rollingDuration: 0,\n  score: 0,\n  _network: null,\n  _updateNumber: null,\n  _totalTime: 0\n};\n\nasync function waitForSync(config, blockNumber) {\n  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n    if (!config._updateNumber) {\n      config._updateNumber = (async () => {\n        const blockNumber = await config.provider.getBlockNumber();\n\n        if (blockNumber > config.blockNumber) {\n          config.blockNumber = blockNumber;\n        }\n\n        config._updateNumber = null;\n      })();\n    }\n\n    await config._updateNumber;\n    config.outOfSync++;\n  }\n}\n\nfunction _normalize(value) {\n  if (value == null) {\n    return \"null\";\n  }\n\n  if (Array.isArray(value)) {\n    return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n  }\n\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return _normalize(value.toJSON());\n  }\n\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n\n    case \"bigint\":\n    case \"number\":\n      return BigInt(value).toString();\n\n    case \"string\":\n      return JSON.stringify(value);\n\n    case \"object\":\n      {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(k => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\n      }\n  }\n\n  console.log(\"Could not serialize\", value);\n  throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(value) {\n  if (\"error\" in value) {\n    const error = value.error;\n    return {\n      tag: _normalize(error),\n      value: error\n    };\n  }\n\n  const result = value.result;\n  return {\n    tag: _normalize(result),\n    value: result\n  };\n} // This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\n\n\nfunction checkQuorum(quorum, results) {\n  const tally = new Map();\n\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    const t = tally.get(tag) || {\n      value,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(tag, t);\n  }\n\n  let best = null;\n\n  for (const r of tally.values()) {\n    if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n      best = r;\n    }\n  }\n\n  if (best) {\n    return best.value;\n  }\n\n  return undefined;\n}\n\nfunction getMedian(quorum, results) {\n  let resultWeight = 0;\n  const errorMap = new Map();\n  let bestError = null;\n  const values = [];\n\n  for (const {\n    value,\n    tag,\n    weight\n  } of results) {\n    if (value instanceof Error) {\n      const e = errorMap.get(tag) || {\n        value,\n        weight: 0\n      };\n      e.weight += weight;\n      errorMap.set(tag, e);\n\n      if (bestError == null || e.weight > bestError.weight) {\n        bestError = e;\n      }\n    } else {\n      values.push(BigInt(value));\n      resultWeight += weight;\n    }\n  }\n\n  if (resultWeight < quorum) {\n    // We have quorum for an error\n    if (bestError && bestError.weight >= quorum) {\n      return bestError.value;\n    } // We do not have quorum for a result\n\n\n    return undefined;\n  } // Get the sorted values\n\n\n  values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);\n  const mid = values.length / 2; // Odd-length; take the middle value\n\n  if (values.length % 2) {\n    return values[mid];\n  } // Even length; take the ceiling of the mean of the center two values\n\n\n  return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum, results) {\n  // If any value or error meets quorum, that is our preferred result\n  const result = checkQuorum(quorum, results);\n\n  if (result !== undefined) {\n    return result;\n  } // Otherwise, do we have any result?\n\n\n  for (const r of results) {\n    if (r.value) {\n      return r.value;\n    }\n  } // Nope!\n\n\n  return undefined;\n}\n\nfunction getFuzzyMode(quorum, results) {\n  if (quorum === 1) {\n    return getNumber(getMedian(quorum, results), \"%internal\");\n  }\n\n  const tally = new Map();\n\n  const add = (result, weight) => {\n    const t = tally.get(result) || {\n      result,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(result, t);\n  };\n\n  for (const {\n    weight,\n    value\n  } of results) {\n    const r = getNumber(value);\n    add(r - 1, weight);\n    add(r, weight);\n    add(r + 1, weight);\n  }\n\n  let bestWeight = 0;\n  let bestResult = undefined;\n\n  for (const {\n    weight,\n    result\n  } of tally.values()) {\n    // Use this result, if this result meets quorum and has either:\n    // - a better weight\n    // - or equal weight, but the result is larger\n    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {\n      bestWeight = weight;\n      bestResult = result;\n    }\n  }\n\n  return bestResult;\n}\n/**\n *  A Fallback Provider.\n *\n */\n\n\nexport class FallbackProvider extends AbstractProvider {\n  quorum;\n  eventQuorum;\n  eventWorkers;\n  #configs;\n  #height;\n  #initialSyncPromise;\n\n  constructor(providers, network) {\n    super(network);\n    this.#configs = providers.map(p => {\n      if (p instanceof AbstractProvider) {\n        return Object.assign({\n          provider: p\n        }, defaultConfig, defaultState);\n      } else {\n        return Object.assign({}, defaultConfig, p, defaultState);\n      }\n    });\n    this.#height = -2;\n    this.#initialSyncPromise = null;\n    this.quorum = 2; //Math.ceil(providers.length /  2);\n\n    this.eventQuorum = 1;\n    this.eventWorkers = 1;\n    assertArgument(this.quorum <= this.#configs.reduce((a, c) => a + c.weight, 0), \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n  }\n\n  get providerConfigs() {\n    return this.#configs.map(c => {\n      const result = Object.assign({}, c);\n\n      for (const key in result) {\n        if (key[0] === \"_\") {\n          delete result[key];\n        }\n      }\n\n      return result;\n    });\n  }\n\n  async _detectNetwork() {\n    return Network.from(getBigInt(await this._perform({\n      method: \"chainId\"\n    })));\n  } // @TODO: Add support to select providers to be the event subscriber\n  //_getSubscriber(sub: Subscription): Subscriber {\n  //    throw new Error(\"@TODO\");\n  //}\n\n\n  async _translatePerform(provider, req) {\n    switch (req.method) {\n      case \"broadcastTransaction\":\n        return await provider.broadcastTransaction(req.signedTransaction);\n\n      case \"call\":\n        return await provider.call(Object.assign({}, req.transaction, {\n          blockTag: req.blockTag\n        }));\n\n      case \"chainId\":\n        return (await provider.getNetwork()).chainId;\n\n      case \"estimateGas\":\n        return await provider.estimateGas(req.transaction);\n\n      case \"getBalance\":\n        return await provider.getBalance(req.address, req.blockTag);\n\n      case \"getBlock\":\n        {\n          const block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n          return await provider.getBlock(block, req.includeTransactions);\n        }\n\n      case \"getBlockNumber\":\n        return await provider.getBlockNumber();\n\n      case \"getCode\":\n        return await provider.getCode(req.address, req.blockTag);\n\n      case \"getGasPrice\":\n        return (await provider.getFeeData()).gasPrice;\n\n      case \"getLogs\":\n        return await provider.getLogs(req.filter);\n\n      case \"getStorage\":\n        return await provider.getStorage(req.address, req.position, req.blockTag);\n\n      case \"getTransaction\":\n        return await provider.getTransaction(req.hash);\n\n      case \"getTransactionCount\":\n        return await provider.getTransactionCount(req.address, req.blockTag);\n\n      case \"getTransactionReceipt\":\n        return await provider.getTransactionReceipt(req.hash);\n\n      case \"getTransactionResult\":\n        return await provider.getTransactionResult(req.hash);\n    }\n  } // Grab the next (random) config that is not already part of\n  // the running set\n\n\n  #getNextConfig(running) {\n    // @TODO: Maybe do a check here to favour (heavily) providers that\n    //        do not require waitForSync and disfavour providers that\n    //        seem down-ish or are behaving slowly\n    const configs = Array.from(running).map(r => r.config); // Shuffle the states, sorted by priority\n\n    const allConfigs = this.#configs.slice();\n    shuffle(allConfigs);\n    allConfigs.sort((a, b) => b.priority - a.priority);\n\n    for (const config of allConfigs) {\n      if (configs.indexOf(config) === -1) {\n        return config;\n      }\n    }\n\n    return null;\n  } // Adds a new runner (if available) to running.\n\n\n  #addRunner(running, req) {\n    const config = this.#getNextConfig(running); // No runners available\n\n    if (config == null) {\n      return null;\n    } // Create a new runner\n\n\n    const runner = {\n      config,\n      result: null,\n      didBump: false,\n      perform: null,\n      staller: null\n    };\n    const now = getTime(); // Start performing this operation\n\n    runner.perform = (async () => {\n      try {\n        config.requests++;\n        const result = await this._translatePerform(config.provider, req);\n        runner.result = {\n          result\n        };\n      } catch (error) {\n        config.errorResponses++;\n        runner.result = {\n          error\n        };\n      }\n\n      const dt = getTime() - now;\n      config._totalTime += dt;\n      config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n      runner.perform = null;\n    })(); // Start a staller; when this times out, it's time to force\n    // kicking off another runner because we are taking too long\n\n\n    runner.staller = (async () => {\n      await stall(config.stallTimeout);\n      runner.staller = null;\n    })();\n\n    running.add(runner);\n    return runner;\n  } // Initializes the blockNumber and network for each runner and\n  // blocks until initialized\n\n\n  async #initialSync() {\n    let initialSync = this.#initialSyncPromise;\n\n    if (!initialSync) {\n      const promises = [];\n      this.#configs.forEach(config => {\n        promises.push(waitForSync(config, 0));\n        promises.push((async () => {\n          config._network = await config.provider.getNetwork();\n        })());\n      });\n\n      this.#initialSyncPromise = initialSync = (async () => {\n        // Wait for all providers to have a block number and network\n        await Promise.all(promises); // Check all the networks match\n\n        let chainId = null;\n\n        for (const config of this.#configs) {\n          const network = config._network;\n\n          if (chainId == null) {\n            chainId = network.chainId;\n          } else if (network.chainId !== chainId) {\n            assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n              operation: \"new FallbackProvider\"\n            });\n          }\n        }\n      })();\n    }\n\n    await initialSync;\n  }\n\n  async #checkQuorum(running, req) {\n    // Get all the result objects\n    const results = [];\n\n    for (const runner of running) {\n      if (runner.result != null) {\n        const {\n          tag,\n          value\n        } = normalizeResult(runner.result);\n        results.push({\n          tag,\n          value,\n          weight: runner.config.weight\n        });\n      }\n    } // Are there enough results to event meet quorum?\n\n\n    if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {\n      return undefined;\n    }\n\n    switch (req.method) {\n      case \"getBlockNumber\":\n        {\n          // We need to get the bootstrap block height\n          if (this.#height === -2) {\n            this.#height = Math.ceil(getNumber(getMedian(this.quorum, this.#configs.map(c => ({\n              value: c.blockNumber,\n              tag: getNumber(c.blockNumber).toString(),\n              weight: c.weight\n            })))));\n          } // Find the mode across all the providers, allowing for\n          // a little drift between block heights\n\n\n          const mode = getFuzzyMode(this.quorum, results);\n\n          if (mode === undefined) {\n            return undefined;\n          }\n\n          if (mode > this.#height) {\n            this.#height = mode;\n          }\n\n          return this.#height;\n        }\n\n      case \"getGasPrice\":\n      case \"estimateGas\":\n        return getMedian(this.quorum, results);\n\n      case \"getBlock\":\n        // Pending blocks are in the mempool and already\n        // quite untrustworthy; just grab anything\n        if (\"blockTag\" in req && req.blockTag === \"pending\") {\n          return getAnyResult(this.quorum, results);\n        }\n\n        return checkQuorum(this.quorum, results);\n\n      case \"call\":\n      case \"chainId\":\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n      case \"getStorage\":\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n      case \"getLogs\":\n        return checkQuorum(this.quorum, results);\n\n      case \"broadcastTransaction\":\n        return getAnyResult(this.quorum, results);\n    }\n\n    assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n      operation: `_perform(${stringify(req.method)})`\n    });\n  }\n\n  async #waitForQuorum(running, req) {\n    if (running.size === 0) {\n      throw new Error(\"no runners?!\");\n    } // Any promises that are interesting to watch for; an expired stall\n    // or a successful perform\n\n\n    const interesting = [];\n    let newRunners = 0;\n\n    for (const runner of running) {\n      // No responses, yet; keep an eye on it\n      if (runner.perform) {\n        interesting.push(runner.perform);\n      } // Still stalling...\n\n\n      if (runner.staller) {\n        interesting.push(runner.staller);\n        continue;\n      } // This runner has already triggered another runner\n\n\n      if (runner.didBump) {\n        continue;\n      } // Got a response (result or error) or stalled; kick off another runner\n\n\n      runner.didBump = true;\n      newRunners++;\n    } // Check if we have reached quorum on a result (or error)\n\n\n    const value = await this.#checkQuorum(running, req);\n\n    if (value !== undefined) {\n      if (value instanceof Error) {\n        throw value;\n      }\n\n      return value;\n    } // Add any new runners, because a staller timed out or a result\n    // or error response came in.\n\n\n    for (let i = 0; i < newRunners; i++) {\n      this.#addRunner(running, req);\n    } // All providers have returned, and we have no result\n\n\n    assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n      request: \"%sub-requests\",\n      info: {\n        request: req,\n        results: Array.from(running).map(r => stringify(r.result))\n      }\n    }); // Wait for someone to either complete its perform or stall out\n\n    await Promise.race(interesting); // This is recursive, but at worst case the depth is 2x the\n    // number of providers (each has a perform and a staller)\n\n    return await this.#waitForQuorum(running, req);\n  }\n\n  async _perform(req) {\n    // Broadcasting a transaction is rare (ish) and already incurs\n    // a cost on the user, so spamming is safe-ish. Just send it to\n    // every backend.\n    if (req.method === \"broadcastTransaction\") {\n      const results = await Promise.all(this.#configs.map(async _ref => {\n        let {\n          provider,\n          weight\n        } = _ref;\n\n        try {\n          const result = await provider._perform(req);\n          return Object.assign(normalizeResult({\n            result\n          }), {\n            weight\n          });\n        } catch (error) {\n          return Object.assign(normalizeResult({\n            error\n          }), {\n            weight\n          });\n        }\n      }));\n      const result = getAnyResult(this.quorum, results);\n      assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n        request: \"%sub-requests\",\n        info: {\n          request: req,\n          results: results.map(stringify)\n        }\n      });\n\n      if (result instanceof Error) {\n        throw result;\n      }\n\n      return result;\n    }\n\n    await this.#initialSync(); // Bootstrap enough runners to meet quorum\n\n    const running = new Set();\n\n    for (let i = 0; i < this.quorum; i++) {\n      this.#addRunner(running, req);\n    }\n\n    const result = await this.#waitForQuorum(running, req); // Track requests sent to a provider that are still\n    // outstanding after quorum has been otherwise found\n\n    for (const runner of running) {\n      if (runner.perform && runner.result == null) {\n        runner.config.lateResponses++;\n      }\n    }\n\n    return result;\n  }\n\n  async destroy() {\n    for (const {\n      provider\n    } of this.#configs) {\n      provider.destroy();\n    }\n\n    super.destroy();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getBigInt","getNumber","assert","assertArgument","AbstractProvider","Network","BN_1","BigInt","BN_2","shuffle","array","i","length","j","Math","floor","random","tmp","stall","duration","Promise","resolve","setTimeout","getTime","Date","stringify","value","JSON","key","type","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_network","_updateNumber","_totalTime","waitForSync","config","provider","getBlockNumber","_normalize","Array","isArray","map","join","toJSON","keys","Object","sort","k","console","log","Error","normalizeResult","error","tag","result","checkQuorum","quorum","results","tally","Map","t","get","set","best","r","values","undefined","getMedian","resultWeight","errorMap","bestError","e","push","a","b","mid","getAnyResult","getFuzzyMode","add","bestWeight","bestResult","FallbackProvider","eventQuorum","eventWorkers","constructor","providers","network","p","assign","reduce","c","providerConfigs","_detectNetwork","from","_perform","method","_translatePerform","req","broadcastTransaction","signedTransaction","call","transaction","blockTag","getNetwork","chainId","estimateGas","getBalance","address","block","blockHash","getBlock","includeTransactions","getCode","getFeeData","gasPrice","getLogs","filter","getStorage","position","getTransaction","hash","getTransactionCount","getTransactionReceipt","getTransactionResult","running","configs","allConfigs","slice","indexOf","runner","didBump","perform","staller","now","dt","initialSync","promises","forEach","all","operation","ceil","mode","size","interesting","newRunners","request","info","race","Set","destroy"],"sourceRoot":"","sources":["../../src.ts/providers/provider-fallback.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}