{"ast":null,"code":"import { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\"; // Constants\n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\n\nfunction toUint256(value) {\n  return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n */\n\n\nexport class Signature {\n  #r;\n  #s;\n  #v;\n  #networkV;\n  /**\n   *  The ``r`` value for a signautre.\n   *\n   *  This represents the ``x`` coordinate of a \"reference\" or\n   *  challenge point, from which the ``y`` can be computed.\n   */\n\n  get r() {\n    return this.#r;\n  }\n\n  set r(value) {\n    assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n    this.#r = hexlify(value);\n  }\n  /**\n   *  The ``s`` value for a signature.\n   */\n\n\n  get s() {\n    return this.#s;\n  }\n\n  set s(_value) {\n    assertArgument(dataLength(_value) === 32, \"invalid r\", \"value\", _value);\n    const value = hexlify(_value);\n    assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n    this.#s = value;\n  }\n  /**\n   *  The ``v`` value for a signature.\n   *\n   *  Since a given ``x`` value for ``r`` has two possible values for\n   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n   *  values to use.\n   *\n   *  It is normalized to the values ``27`` or ``28`` for legacy\n   *  purposes.\n   */\n\n\n  get v() {\n    return this.#v;\n  }\n\n  set v(value) {\n    const v = getNumber(value, \"value\");\n    assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n    this.#v = v;\n  }\n  /**\n   *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n\n\n  get networkV() {\n    return this.#networkV;\n  }\n  /**\n   *  The chain ID for EIP-155 legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n\n\n  get legacyChainId() {\n    const v = this.networkV;\n\n    if (v == null) {\n      return null;\n    }\n\n    return Signature.getChainId(v);\n  }\n  /**\n   *  The ``yParity`` for the signature.\n   *\n   *  See ``v`` for more details on how this value is used.\n   */\n\n\n  get yParity() {\n    return this.v === 27 ? 0 : 1;\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation of the ``yParity``\n   *  and ``s`` compacted into a single ``bytes32``.\n   */\n\n\n  get yParityAndS() {\n    // The EIP-2098 compact representation\n    const yParityAndS = getBytes(this.s);\n\n    if (this.yParity) {\n      yParityAndS[0] |= 0x80;\n    }\n\n    return hexlify(yParityAndS);\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation.\n   */\n\n\n  get compactSerialized() {\n    return concat([this.r, this.yParityAndS]);\n  }\n  /**\n   *  The serialized representation.\n   */\n\n\n  get serialized() {\n    return concat([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n  }\n  /**\n   *  @private\n   */\n\n\n  constructor(guard, r, s, v) {\n    assertPrivate(guard, _guard, \"Signature\");\n    this.#r = r;\n    this.#s = s;\n    this.#v = v;\n    this.#networkV = null;\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n  }\n  /**\n   *  Returns a new identical [[Signature]].\n   */\n\n\n  clone() {\n    const clone = new Signature(_guard, this.r, this.s, this.v);\n\n    if (this.networkV) {\n      clone.#networkV = this.networkV;\n    }\n\n    return clone;\n  }\n  /**\n   *  Returns a representation that is compatible with ``JSON.stringify``.\n   */\n\n\n  toJSON() {\n    const networkV = this.networkV;\n    return {\n      _type: \"signature\",\n      networkV: networkV != null ? networkV.toString() : null,\n      r: this.r,\n      s: this.s,\n      v: this.v\n    };\n  }\n  /**\n   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n   *\n   *  @example:\n   *    Signature.getChainId(45)\n   *    //_result:\n   *\n   *    Signature.getChainId(46)\n   *    //_result:\n   */\n\n\n  static getChainId(v) {\n    const bv = getBigInt(v, \"v\"); // The v is not an EIP-155 v, so it is the unspecified chain ID\n\n    if (bv == BN_27 || bv == BN_28) {\n      return BN_0;\n    } // Bad value for an EIP-155 v\n\n\n    assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n    return (bv - BN_35) / BN_2;\n  }\n  /**\n   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n   *\n   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n   *  property to include the chain ID.\n   *\n   *  @example:\n   *    Signature.getChainIdV(5, 27)\n   *    //_result:\n   *\n   *    Signature.getChainIdV(5, 28)\n   *    //_result:\n   *\n   */\n\n\n  static getChainIdV(chainId, v) {\n    return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);\n  }\n  /**\n   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n   *\n   *  @example:\n   *    // The values 0 and 1 imply v is actually yParity\n   *    Signature.getNormalizedV(0)\n   *    //_result:\n   *\n   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n   *    Signature.getNormalizedV(27)\n   *    //_result:\n   *\n   *    // Legacy EIP-155 transaction (i.e. >= 35)\n   *    Signature.getNormalizedV(46)\n   *    //_result:\n   *\n   *    // Invalid values throw\n   *    Signature.getNormalizedV(5)\n   *    //_error:\n   */\n\n\n  static getNormalizedV(v) {\n    const bv = getBigInt(v);\n\n    if (bv === BN_0 || bv === BN_27) {\n      return 27;\n    }\n\n    if (bv === BN_1 || bv === BN_28) {\n      return 28;\n    }\n\n    assertArgument(bv >= BN_35, \"invalid v\", \"v\", v); // Otherwise, EIP-155 v means odd is 27 and even is 28\n\n    return bv & BN_1 ? 27 : 28;\n  }\n  /**\n   *  Creates a new [[Signature]].\n   *\n   *  If no %%sig%% is provided, a new [[Signature]] is created\n   *  with default values.\n   *\n   *  If %%sig%% is a string, it is parsed.\n   */\n\n\n  static from(sig) {\n    function assertError(check, message) {\n      assertArgument(check, message, \"signature\", sig);\n    }\n\n    ;\n\n    if (sig == null) {\n      return new Signature(_guard, ZeroHash, ZeroHash, 27);\n    }\n\n    if (typeof sig === \"string\") {\n      const bytes = getBytes(sig, \"signature\");\n\n      if (bytes.length === 64) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        const v = s[0] & 0x80 ? 28 : 27;\n        s[0] &= 0x7f;\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n\n      if (bytes.length === 65) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n        const v = Signature.getNormalizedV(bytes[64]);\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n\n      assertError(false, \"invlaid raw signature length\");\n    }\n\n    if (sig instanceof Signature) {\n      return sig.clone();\n    } // Get r\n\n\n    const _r = sig.r;\n    assertError(_r != null, \"missing r\");\n    const r = toUint256(_r); // Get s; by any means necessary (we check consistency below)\n\n    const s = function (s, yParityAndS) {\n      if (s != null) {\n        return toUint256(s);\n      }\n\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        const bytes = getBytes(yParityAndS);\n        bytes[0] &= 0x7f;\n        return hexlify(bytes);\n      }\n\n      assertError(false, \"missing s\");\n    }(sig.s, sig.yParityAndS);\n\n    assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\"); // Get v; by any means necessary (we check consistency below)\n\n    const {\n      networkV,\n      v\n    } = function (_v, yParityAndS, yParity) {\n      if (_v != null) {\n        const v = getBigInt(_v);\n        return {\n          networkV: v >= BN_35 ? v : undefined,\n          v: Signature.getNormalizedV(v)\n        };\n      }\n\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        return {\n          v: getBytes(yParityAndS)[0] & 0x80 ? 28 : 27\n        };\n      }\n\n      if (yParity != null) {\n        switch (yParity) {\n          case 0:\n            return {\n              v: 27\n            };\n\n          case 1:\n            return {\n              v: 28\n            };\n        }\n\n        assertError(false, \"invalid yParity\");\n      }\n\n      assertError(false, \"missing v\");\n    }(sig.v, sig.yParityAndS, sig.yParity);\n\n    const result = new Signature(_guard, r, s, v);\n\n    if (networkV) {\n      result.#networkV = networkV;\n    } // If multiple of v, yParity, yParityAndS we given, check they match\n\n\n    assertError(!(\"yParity\" in sig && sig.yParity !== result.yParity), \"yParity mismatch\");\n    assertError(!(\"yParityAndS\" in sig && sig.yParityAndS !== result.yParityAndS), \"yParityAndS mismatch\");\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ZeroHash","concat","dataLength","getBigInt","getBytes","getNumber","hexlify","toBeArray","isHexString","zeroPadValue","assertArgument","assertPrivate","BN_0","BigInt","BN_1","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","value","Signature","r","s","_value","parseInt","substring","v","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","constructor","guard","Symbol","for","clone","toJSON","_type","toString","bv","getChainIdV","chainId","getNormalizedV","from","sig","assertError","check","message","bytes","length","slice","_r","_v","undefined","result"],"sourceRoot":"","sources":["../../src.ts/crypto/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}