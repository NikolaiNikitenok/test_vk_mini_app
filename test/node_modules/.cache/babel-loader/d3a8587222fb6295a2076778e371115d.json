{"ast":null,"code":"/**\r\n *  @_ignore\r\n */\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nexport function looseArrayify(hexString) {\n  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n    hexString = '0x' + hexString;\n  }\n\n  return getBytesCopy(hexString);\n}\nexport function zpad(value, length) {\n  value = String(value);\n\n  while (value.length < length) {\n    value = '0' + value;\n  }\n\n  return value;\n}\nexport function getPassword(password) {\n  if (typeof password === 'string') {\n    return toUtf8Bytes(password, \"NFKC\");\n  }\n\n  return getBytesCopy(password);\n}\nexport function spelunk(object, _path) {\n  const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n\n  assertArgument(match != null, \"invalid path\", \"path\", _path);\n  const path = match[1];\n  const type = match[3];\n  const reqd = match[4] === \"!\";\n  let cur = object;\n\n  for (const comp of path.toLowerCase().split('.')) {\n    // Search for a child object with a case-insensitive matching key\n    if (Array.isArray(cur)) {\n      if (!comp.match(/^[0-9]+$/)) {\n        break;\n      }\n\n      cur = cur[parseInt(comp)];\n    } else if (typeof cur === \"object\") {\n      let found = null;\n\n      for (const key in cur) {\n        if (key.toLowerCase() === comp) {\n          found = cur[key];\n          break;\n        }\n      }\n\n      cur = found;\n    } else {\n      cur = null;\n    }\n\n    if (cur == null) {\n      break;\n    }\n  }\n\n  assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n\n  if (type && cur != null) {\n    if (type === \"int\") {\n      if (typeof cur === \"string\" && cur.match(/^-?[0-9]+$/)) {\n        return parseInt(cur);\n      } else if (Number.isSafeInteger(cur)) {\n        return cur;\n      }\n    }\n\n    if (type === \"number\") {\n      if (typeof cur === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n        return parseFloat(cur);\n      }\n    }\n\n    if (type === \"data\") {\n      if (typeof cur === \"string\") {\n        return looseArrayify(cur);\n      }\n    }\n\n    if (type === \"array\" && Array.isArray(cur)) {\n      return cur;\n    }\n\n    if (type === typeof cur) {\n      return cur;\n    }\n\n    assertArgument(false, `wrong type found for ${type} `, \"path\", path);\n  }\n\n  return cur;\n}\n/*\r\nexport function follow(object: any, path: string): null | string {\r\n    let currentChild = object;\r\n\r\n    for (const comp of path.toLowerCase().split('/')) {\r\n\r\n        // Search for a child object with a case-insensitive matching key\r\n        let matchingChild = null;\r\n        for (const key in currentChild) {\r\n             if (key.toLowerCase() === comp) {\r\n                 matchingChild = currentChild[key];\r\n                 break;\r\n             }\r\n        }\r\n\r\n        if (matchingChild === null) { return null; }\r\n\r\n        currentChild = matchingChild;\r\n    }\r\n\r\n    return currentChild;\r\n}\r\n\r\n// \"path/to/something:type!\"\r\nexport function followRequired(data: any, path: string): string {\r\n    const value = follow(data, path);\r\n    if (value != null) { return value; }\r\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\r\n    JSON.stringify(data));\r\n}\r\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n\n/*\r\nexport function uuidV4(randomBytes: BytesLike): string {\r\n    const bytes = getBytes(randomBytes, \"randomBytes\");\r\n\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const value = hexlify(bytes);\r\n\r\n    return [\r\n       value.substring(2, 10),\r\n       value.substring(10, 14),\r\n       value.substring(14, 18),\r\n       value.substring(18, 22),\r\n       value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n*/","map":{"version":3,"mappings":"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","names":["getBytesCopy","assertArgument","toUtf8Bytes","looseArrayify","hexString","substring","zpad","value","length","String","getPassword","password","spelunk","object","_path","match","path","type","reqd","cur","comp","toLowerCase","split","Array","isArray","parseInt","found","key","Number","isSafeInteger","parseFloat"],"sourceRoot":"","sources":["../../src.ts/wallet/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}