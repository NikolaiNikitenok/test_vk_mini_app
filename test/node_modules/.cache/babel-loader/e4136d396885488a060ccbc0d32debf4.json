{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n\n  return getAddress(value);\n}\n\nfunction handleAccessList(value, param) {\n  try {\n    return accessListify(value);\n  } catch (error) {\n    assertArgument(false, error.message, param, value);\n  }\n}\n\nfunction handleNumber(_value, param) {\n  if (_value === \"0x\") {\n    return 0;\n  }\n\n  return getNumber(_value, param);\n}\n\nfunction handleUint(_value, param) {\n  if (_value === \"0x\") {\n    return BN_0;\n  }\n\n  const value = getBigInt(_value, param);\n  assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n  return value;\n}\n\nfunction formatNumber(_value, name) {\n  const value = getBigInt(_value, \"value\");\n  const result = toBeArray(value);\n  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n  return result;\n}\n\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\n\nfunction _parseLegacy(data) {\n  const fields = decodeRlp(data);\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n  const tx = {\n    type: 0,\n    nonce: handleNumber(fields[0], \"nonce\"),\n    gasPrice: handleUint(fields[1], \"gasPrice\"),\n    gasLimit: handleUint(fields[2], \"gasLimit\"),\n    to: handleAddress(fields[3]),\n    value: handleUint(fields[4], \"value\"),\n    data: hexlify(fields[5]),\n    chainId: BN_0\n  }; // Legacy unsigned transaction\n\n  if (fields.length === 6) {\n    return tx;\n  }\n\n  const v = handleUint(fields[6], \"v\");\n  const r = handleUint(fields[7], \"r\");\n  const s = handleUint(fields[8], \"s\");\n\n  if (r === BN_0 && s === BN_0) {\n    // EIP-155 unsigned transaction\n    tx.chainId = v;\n  } else {\n    // Compute the EIP-155 chain ID (or 0 for legacy)\n    let chainId = (v - BN_35) / BN_2;\n\n    if (chainId < BN_0) {\n      chainId = BN_0;\n    }\n\n    tx.chainId = chainId; // Signed Legacy Transaction\n\n    assertArgument(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n    tx.signature = Signature.from({\n      r: zeroPadValue(fields[7], 32),\n      s: zeroPadValue(fields[8], 32),\n      v\n    });\n    tx.hash = keccak256(data);\n  }\n\n  return tx;\n}\n\nfunction _serializeLegacy(tx, sig) {\n  const fields = [formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\"];\n  let chainId = BN_0;\n\n  if (tx.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = getBigInt(tx.chainId, \"tx.chainId\"); // We have a chainId in the tx and an EIP-155 v in the signature,\n    // make sure they agree with each other\n\n    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  } else if (sig) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    const legacy = sig.legacyChainId;\n\n    if (legacy != null) {\n      chainId = legacy;\n    }\n  } // Requesting an unsigned transaction\n\n\n  if (!sig) {\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== BN_0) {\n      fields.push(toBeArray(chainId));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n\n    return encodeRlp(fields);\n  } // We pushed a chainId and null r, s on for hashing only; remove those\n\n\n  let v = BigInt(27 + sig.yParity);\n\n  if (chainId !== BN_0) {\n    v = Signature.getChainIdV(chainId, sig.v);\n  } else if (BigInt(sig.v) !== v) {\n    assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  }\n\n  fields.push(toBeArray(v));\n  fields.push(toBeArray(sig.r));\n  fields.push(toBeArray(sig.s));\n  return encodeRlp(fields);\n}\n\nfunction _parseEipSignature(tx, fields, serialize) {\n  let yParity;\n\n  try {\n    yParity = handleNumber(fields[0], \"yParity\");\n\n    if (yParity !== 0 && yParity !== 1) {\n      throw new Error(\"bad yParity\");\n    }\n  } catch (error) {\n    assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n  }\n\n  const r = zeroPadValue(fields[1], 32);\n  const s = zeroPadValue(fields[2], 32);\n  const signature = Signature.from({\n    r,\n    s,\n    yParity\n  });\n  tx.signature = signature;\n}\n\nfunction _parseEip1559(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n  const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n  const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n  const tx = {\n    type: 2,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: hexlify(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\")\n  }; // Unsigned EIP-1559 Transaction\n\n  if (fields.length === 9) {\n    return tx;\n  }\n\n  tx.hash = keccak256(data);\n\n  _parseEipSignature(tx, fields.slice(9), _serializeEip1559);\n\n  return tx;\n}\n\nfunction _serializeEip1559(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n\n  return concat([\"0x02\", encodeRlp(fields)]);\n}\n\nfunction _parseEip2930(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n  const tx = {\n    type: 1,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    gasPrice: handleUint(fields[2], \"gasPrice\"),\n    gasLimit: handleUint(fields[3], \"gasLimit\"),\n    to: handleAddress(fields[4]),\n    value: handleUint(fields[5], \"value\"),\n    data: hexlify(fields[6]),\n    accessList: handleAccessList(fields[7], \"accessList\")\n  }; // Unsigned EIP-2930 Transaction\n\n  if (fields.length === 8) {\n    return tx;\n  }\n\n  tx.hash = keccak256(data);\n\n  _parseEipSignature(tx, fields.slice(8), _serializeEip2930);\n\n  return tx;\n}\n\nfunction _serializeEip2930(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? getAddress(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n\n  return concat([\"0x01\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\n\n\nexport class Transaction {\n  #type;\n  #to;\n  #data;\n  #nonce;\n  #gasLimit;\n  #gasPrice;\n  #maxPriorityFeePerGas;\n  #maxFeePerGas;\n  #value;\n  #chainId;\n  #sig;\n  #accessList;\n  /**\n   *  The transaction type.\n   *\n   *  If null, the type will be automatically inferred based on\n   *  explicit properties.\n   */\n\n  get type() {\n    return this.#type;\n  }\n\n  set type(value) {\n    switch (value) {\n      case null:\n        this.#type = null;\n        break;\n\n      case 0:\n      case \"legacy\":\n        this.#type = 0;\n        break;\n\n      case 1:\n      case \"berlin\":\n      case \"eip-2930\":\n        this.#type = 1;\n        break;\n\n      case 2:\n      case \"london\":\n      case \"eip-1559\":\n        this.#type = 2;\n        break;\n\n      default:\n        assertArgument(false, \"unsupported transaction type\", \"type\", value);\n    }\n  }\n  /**\n   *  The name of the transaction type.\n   */\n\n\n  get typeName() {\n    switch (this.type) {\n      case 0:\n        return \"legacy\";\n\n      case 1:\n        return \"eip-2930\";\n\n      case 2:\n        return \"eip-1559\";\n    }\n\n    return null;\n  }\n  /**\n   *  The ``to`` address for the transaction or ``null`` if the\n   *  transaction is an ``init`` transaction.\n   */\n\n\n  get to() {\n    return this.#to;\n  }\n\n  set to(value) {\n    this.#to = value == null ? null : getAddress(value);\n  }\n  /**\n   *  The transaction nonce.\n   */\n\n\n  get nonce() {\n    return this.#nonce;\n  }\n\n  set nonce(value) {\n    this.#nonce = getNumber(value, \"value\");\n  }\n  /**\n   *  The gas limit.\n   */\n\n\n  get gasLimit() {\n    return this.#gasLimit;\n  }\n\n  set gasLimit(value) {\n    this.#gasLimit = getBigInt(value);\n  }\n  /**\n   *  The gas price.\n   *\n   *  On legacy networks this defines the fee that will be paid. On\n   *  EIP-1559 networks, this should be ``null``.\n   */\n\n\n  get gasPrice() {\n    const value = this.#gasPrice;\n\n    if (value == null && (this.type === 0 || this.type === 1)) {\n      return BN_0;\n    }\n\n    return value;\n  }\n\n  set gasPrice(value) {\n    this.#gasPrice = value == null ? null : getBigInt(value, \"gasPrice\");\n  }\n  /**\n   *  The maximum priority fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n\n\n  get maxPriorityFeePerGas() {\n    const value = this.#maxPriorityFeePerGas;\n\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n\n      return null;\n    }\n\n    return value;\n  }\n\n  set maxPriorityFeePerGas(value) {\n    this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n  }\n  /**\n   *  The maximum total fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n\n\n  get maxFeePerGas() {\n    const value = this.#maxFeePerGas;\n\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n\n      return null;\n    }\n\n    return value;\n  }\n\n  set maxFeePerGas(value) {\n    this.#maxFeePerGas = value == null ? null : getBigInt(value, \"maxFeePerGas\");\n  }\n  /**\n   *  The transaction data. For ``init`` transactions this is the\n   *  deployment code.\n   */\n\n\n  get data() {\n    return this.#data;\n  }\n\n  set data(value) {\n    this.#data = hexlify(value);\n  }\n  /**\n   *  The amount of ether to send in this transactions.\n   */\n\n\n  get value() {\n    return this.#value;\n  }\n\n  set value(value) {\n    this.#value = getBigInt(value, \"value\");\n  }\n  /**\n   *  The chain ID this transaction is valid on.\n   */\n\n\n  get chainId() {\n    return this.#chainId;\n  }\n\n  set chainId(value) {\n    this.#chainId = getBigInt(value);\n  }\n  /**\n   *  If signed, the signature for this transaction.\n   */\n\n\n  get signature() {\n    return this.#sig || null;\n  }\n\n  set signature(value) {\n    this.#sig = value == null ? null : Signature.from(value);\n  }\n  /**\n   *  The access list.\n   *\n   *  An access list permits discounted (but pre-paid) access to\n   *  bytecode and state variable access within contract execution.\n   */\n\n\n  get accessList() {\n    const value = this.#accessList || null;\n\n    if (value == null) {\n      if (this.type === 1 || this.type === 2) {\n        return [];\n      }\n\n      return null;\n    }\n\n    return value;\n  }\n\n  set accessList(value) {\n    this.#accessList = value == null ? null : accessListify(value);\n  }\n  /**\n   *  Creates a new Transaction with default values.\n   */\n\n\n  constructor() {\n    this.#type = null;\n    this.#to = null;\n    this.#nonce = 0;\n    this.#gasLimit = BigInt(0);\n    this.#gasPrice = null;\n    this.#maxPriorityFeePerGas = null;\n    this.#maxFeePerGas = null;\n    this.#data = \"0x\";\n    this.#value = BigInt(0);\n    this.#chainId = BigInt(0);\n    this.#sig = null;\n    this.#accessList = null;\n  }\n  /**\n   *  The transaction hash, if signed. Otherwise, ``null``.\n   */\n\n\n  get hash() {\n    if (this.signature == null) {\n      return null;\n    }\n\n    return keccak256(this.serialized);\n  }\n  /**\n   *  The pre-image hash of this transaction.\n   *\n   *  This is the digest that a [[Signer]] must sign to authorize\n   *  this transaction.\n   */\n\n\n  get unsignedHash() {\n    return keccak256(this.unsignedSerialized);\n  }\n  /**\n   *  The sending address, if signed. Otherwise, ``null``.\n   */\n\n\n  get from() {\n    if (this.signature == null) {\n      return null;\n    }\n\n    return recoverAddress(this.unsignedHash, this.signature);\n  }\n  /**\n   *  The public key of the sender, if signed. Otherwise, ``null``.\n   */\n\n\n  get fromPublicKey() {\n    if (this.signature == null) {\n      return null;\n    }\n\n    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n  }\n  /**\n   *  Returns true if signed.\n   *\n   *  This provides a Type Guard that properties requiring a signed\n   *  transaction are non-null.\n   */\n\n\n  isSigned() {\n    //isSigned(): this is SignedTransaction {\n    return this.signature != null;\n  }\n  /**\n   *  The serialized transaction.\n   *\n   *  This throws if the transaction is unsigned. For the pre-image,\n   *  use [[unsignedSerialized]].\n   */\n\n\n  get serialized() {\n    assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this, this.signature);\n\n      case 1:\n        return _serializeEip2930(this, this.signature);\n\n      case 2:\n        return _serializeEip1559(this, this.signature);\n    }\n\n    assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n  }\n  /**\n   *  The transaction pre-image.\n   *\n   *  The hash of this is the digest which needs to be signed to\n   *  authorize this transaction.\n   */\n\n\n  get unsignedSerialized() {\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this);\n\n      case 1:\n        return _serializeEip2930(this);\n\n      case 2:\n        return _serializeEip1559(this);\n    }\n\n    assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".unsignedSerialized\"\n    });\n  }\n  /**\n   *  Return the most \"likely\" type; currently the highest\n   *  supported transaction type.\n   */\n\n\n  inferType() {\n    return this.inferTypes().pop();\n  }\n  /**\n   *  Validates the explicit properties and returns a list of compatible\n   *  transaction types.\n   */\n\n\n  inferTypes() {\n    // Checks that there are no conflicting properties set\n    const hasGasPrice = this.gasPrice != null;\n    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n    const hasAccessList = this.accessList != null; //if (hasGasPrice && hasFee) {\n    //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n    //}\n\n    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n        value: this\n      });\n    } //if (this.type === 2 && hasGasPrice) {\n    //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n    //}\n\n\n    assert(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n      value: this\n    });\n    assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n      value: this\n    });\n    const types = []; // Explicit type\n\n    if (this.type != null) {\n      types.push(this.type);\n    } else {\n      if (hasFee) {\n        types.push(2);\n      } else if (hasGasPrice) {\n        types.push(1);\n\n        if (!hasAccessList) {\n          types.push(0);\n        }\n      } else if (hasAccessList) {\n        types.push(1);\n        types.push(2);\n      } else {\n        types.push(0);\n        types.push(1);\n        types.push(2);\n      }\n    }\n\n    types.sort();\n    return types;\n  }\n  /**\n   *  Returns true if this transaction is a legacy transaction (i.e.\n   *  ``type === 0``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n\n\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if this transaction is berlin hardform transaction (i.e.\n   *  ``type === 1``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n\n\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if this transaction is london hardform transaction (i.e.\n   *  ``type === 2``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n\n\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Create a copy of this transaciton.\n   */\n\n\n  clone() {\n    return Transaction.from(this);\n  }\n  /**\n   *  Return a JSON-friendly object.\n   */\n\n\n  toJSON() {\n    const s = v => {\n      if (v == null) {\n        return null;\n      }\n\n      return v.toString();\n    };\n\n    return {\n      type: this.type,\n      to: this.to,\n      //            from: this.from,\n      data: this.data,\n      nonce: this.nonce,\n      gasLimit: s(this.gasLimit),\n      gasPrice: s(this.gasPrice),\n      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n      maxFeePerGas: s(this.maxFeePerGas),\n      value: s(this.value),\n      chainId: s(this.chainId),\n      sig: this.signature ? this.signature.toJSON() : null,\n      accessList: this.accessList\n    };\n  }\n  /**\n   *  Create a **Transaction** from a serialized transaction or a\n   *  Transaction-like object.\n   */\n\n\n  static from(tx) {\n    if (tx == null) {\n      return new Transaction();\n    }\n\n    if (typeof tx === \"string\") {\n      const payload = getBytes(tx);\n\n      if (payload[0] >= 0x7f) {\n        // @TODO: > vs >= ??\n        return Transaction.from(_parseLegacy(payload));\n      }\n\n      switch (payload[0]) {\n        case 1:\n          return Transaction.from(_parseEip2930(payload));\n\n        case 2:\n          return Transaction.from(_parseEip1559(payload));\n      }\n\n      assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"from\"\n      });\n    }\n\n    const result = new Transaction();\n\n    if (tx.type != null) {\n      result.type = tx.type;\n    }\n\n    if (tx.to != null) {\n      result.to = tx.to;\n    }\n\n    if (tx.nonce != null) {\n      result.nonce = tx.nonce;\n    }\n\n    if (tx.gasLimit != null) {\n      result.gasLimit = tx.gasLimit;\n    }\n\n    if (tx.gasPrice != null) {\n      result.gasPrice = tx.gasPrice;\n    }\n\n    if (tx.maxPriorityFeePerGas != null) {\n      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n    }\n\n    if (tx.maxFeePerGas != null) {\n      result.maxFeePerGas = tx.maxFeePerGas;\n    }\n\n    if (tx.data != null) {\n      result.data = tx.data;\n    }\n\n    if (tx.value != null) {\n      result.value = tx.value;\n    }\n\n    if (tx.chainId != null) {\n      result.chainId = tx.chainId;\n    }\n\n    if (tx.signature != null) {\n      result.signature = Signature.from(tx.signature);\n    }\n\n    if (tx.accessList != null) {\n      result.accessList = tx.accessList;\n    }\n\n    if (tx.hash != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n      assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n    }\n\n    if (tx.from != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n      assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","keccak256","Signature","SigningKey","concat","decodeRlp","encodeRlp","getBytes","getBigInt","getNumber","hexlify","assert","assertArgument","toBeArray","zeroPadValue","accessListify","recoverAddress","BN_0","BigInt","BN_2","BN_27","BN_28","BN_35","BN_MAX_UINT","handleAddress","value","handleAccessList","param","error","message","handleNumber","_value","handleUint","formatNumber","name","result","length","formatAccessList","map","set","address","storageKeys","_parseLegacy","data","fields","Array","isArray","tx","type","nonce","gasPrice","gasLimit","to","chainId","v","r","s","signature","from","hash","_serializeLegacy","sig","networkV","legacyChainId","legacy","push","yParity","getChainIdV","_parseEipSignature","serialize","Error","_parseEip1559","slice","maxPriorityFeePerGas","maxFeePerGas","accessList","_serializeEip1559","_parseEip2930","_serializeEip2930","Transaction","typeName","constructor","serialized","unsignedHash","unsignedSerialized","fromPublicKey","recoverPublicKey","isSigned","operation","inferType","inferTypes","pop","hasGasPrice","hasFee","hasAccessList","types","sort","isLegacy","isBerlin","isLondon","clone","toJSON","toString","payload","toLowerCase"],"sourceRoot":"","sources":["../../src.ts/transaction/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}