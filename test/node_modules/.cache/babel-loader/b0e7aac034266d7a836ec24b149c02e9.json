{"ast":null,"code":"import { assert, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n/**\r\n *  Returns true if %%value%% is an object which implements the\r\n *  [[Addressable]] interface.\r\n *\r\n *  @example:\r\n *    // Wallets and AbstractSigner sub-classes\r\n *    isAddressable(Wallet.createRandom())\r\n *    //_result:\r\n *\r\n *    // Contracts\r\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\r\n *    isAddressable(contract)\r\n *    //_result:\r\n */\n\nexport function isAddressable(value) {\n  return value && typeof value.getAddress === \"function\";\n}\n/**\r\n *  Returns true if %%value%% is a valid address.\r\n *\r\n *  @example:\r\n *    // Valid address\r\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Valid ICAP address\r\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\r\n *    //_result:\r\n *\r\n *    // Invalid checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\r\n *    //_result:\r\n *\r\n *    // Invalid ICAP checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Not an address (an ENS name requires a provided and an\r\n *    // asynchronous API to access)\r\n *    isAddress(\"ricmoo.eth\")\r\n *    //_result:\r\n */\n\nexport function isAddress(value) {\n  try {\n    getAddress(value);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\n\nasync function checkAddress(target, promise) {\n  const result = await promise;\n\n  if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n    assert(typeof target !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", {\n      value: target\n    });\n    assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n  }\n\n  return getAddress(result);\n}\n/**\r\n *  Resolves to an address for the %%target%%, which may be any\r\n *  supported address type, an [[Addressable]] or a Promise which\r\n *  resolves to an address.\r\n *\r\n *  If an ENS name is provided, but that name has not been correctly\r\n *  configured a [[UnconfiguredNameError]] is thrown.\r\n *\r\n *  @example:\r\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\r\n *\r\n *    // Addresses are return synchronously\r\n *    resolveAddress(addr, provider)\r\n *    //_result:\r\n *\r\n *    // Address promises are resolved asynchronously\r\n *    resolveAddress(Promise.resolve(addr))\r\n *    //_result:\r\n *\r\n *    // ENS names are resolved asynchronously\r\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\r\n *    //_result:\r\n *\r\n *    // Addressable objects are resolved asynchronously\r\n *    contract = new Contract(addr, [ ])\r\n *    resolveAddress(contract, provider)\r\n *    //_result:\r\n *\r\n *    // Unconfigured ENS names reject\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\r\n *    //_error:\r\n *\r\n *    // ENS names require a NameResolver object passed in\r\n *    // (notice the provider was omitted)\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\r\n *    //_error:\r\n */\n\n\nexport function resolveAddress(target, resolver) {\n  if (typeof target === \"string\") {\n    if (target.match(/^0x[0-9a-f]{40}$/i)) {\n      return getAddress(target);\n    }\n\n    assert(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"resolveName\"\n    });\n    return checkAddress(target, resolver.resolveName(target));\n  } else if (isAddressable(target)) {\n    return checkAddress(target, target.getAddress());\n  } else if (target && typeof target.then === \"function\") {\n    return checkAddress(target, target);\n  }\n\n  assertArgument(false, \"unsupported addressable value\", \"target\", target);\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,cAAjB,QAAuC,mBAAvC;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAKA;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAkC;AACpC,SAAQA,KAAK,IAAI,OAAOA,KAAK,CAACF,UAAb,KAA6B,UAA9C;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUG,SAAV,CAAoBD,KAApB,EAA8B;AAChC,MAAI;AACAF,cAAU,CAACE,KAAD,CAAV;AACA,WAAO,IAAP;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc,CAAG;;AACnB,SAAO,KAAP;AACH;;AAED,eAAeC,YAAf,CAA4BC,MAA5B,EAAyCC,OAAzC,EAAwE;AACpE,QAAMC,MAAM,GAAG,MAAMD,OAArB;;AACA,MAAIC,MAAM,IAAI,IAAV,IAAkBA,MAAM,KAAK,4CAAjC,EAA+E;AAC3EV,UAAM,CAAC,OAAOQ,MAAP,KAAmB,QAApB,EAA8B,mBAA9B,EAAmD,mBAAnD,EAAwE;AAAEJ,WAAK,EAAEI;AAAT,KAAxE,CAAN;AACAP,kBAAc,CAAC,KAAD,EAAQ,+DAAR,EAAyE,QAAzE,EAAmFO,MAAnF,CAAd;AACH;;AACD,SAAON,UAAU,CAACQ,MAAD,CAAjB;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAM,SAAUC,cAAV,CAAyBH,MAAzB,EAA8CI,QAA9C,EAA4E;AAE9E,MAAI,OAAOJ,MAAP,KAAmB,QAAvB,EAAiC;AAC7B,QAAIA,MAAM,CAACK,KAAP,CAAa,mBAAb,CAAJ,EAAuC;AAAE,aAAOX,UAAU,CAACM,MAAD,CAAjB;AAA4B;;AAErER,UAAM,CAACY,QAAQ,IAAI,IAAb,EAAmB,oCAAnB,EACF,uBADE,EACuB;AAAEE,eAAS,EAAE;AAAb,KADvB,CAAN;AAGA,WAAOP,YAAY,CAACC,MAAD,EAASI,QAAQ,CAACG,WAAT,CAAqBP,MAArB,CAAT,CAAnB;AAEH,GARD,MAQO,IAAIL,aAAa,CAACK,MAAD,CAAjB,EAA2B;AAC9B,WAAOD,YAAY,CAACC,MAAD,EAASA,MAAM,CAACN,UAAP,EAAT,CAAnB;AAEH,GAHM,MAGA,IAAIM,MAAM,IAAI,OAAOA,MAAM,CAACQ,IAAd,KAAwB,UAAtC,EAAkD;AACrD,WAAOT,YAAY,CAACC,MAAD,EAASA,MAAT,CAAnB;AACH;;AAEDP,gBAAc,CAAC,KAAD,EAAQ,+BAAR,EAAyC,QAAzC,EAAmDO,MAAnD,CAAd;AACH","names":["assert","assertArgument","getAddress","isAddressable","value","isAddress","error","checkAddress","target","promise","result","resolveAddress","resolver","match","operation","resolveName","then"],"sourceRoot":"","sources":["../../src.ts/address/checks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}