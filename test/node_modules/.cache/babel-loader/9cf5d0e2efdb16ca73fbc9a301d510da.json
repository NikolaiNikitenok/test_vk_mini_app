{"ast":null,"code":"/**\n *  Explain events...\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\n\nexport class EventPayload {\n  /**\n   *  The event filter.\n   */\n  filter;\n  /**\n   *  The **EventEmitterable**.\n   */\n\n  emitter;\n  #listener;\n  /**\n   *  Create a new **EventPayload** for %%emitter%% with\n   *  the %%listener%% and for %%filter%%.\n   */\n\n  constructor(emitter, listener, filter) {\n    this.#listener = listener;\n    defineProperties(this, {\n      emitter,\n      filter\n    });\n  }\n  /**\n   *  Unregister the triggered listener for future events.\n   */\n\n\n  async removeListener() {\n    if (this.#listener == null) {\n      return;\n    }\n\n    await this.emitter.off(this.filter, this.#listener);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;AAKA,SAASA,gBAAT,QAAiC,iBAAjC;AA+DA;;;;;;AAKA,OAAM,MAAOC,YAAP,CAAmB;AACrB;;;AAGSC,QAAM;AAEf;;;;AAGSC,SAAO;AAEP;AAET;;;;;AAIAC,cAAYD,OAAZ,EAA0CE,QAA1C,EAAqEH,MAArE,EAA8E;AAC1E,SAAK,SAAL,GAAiBG,QAAjB;AACAL,oBAAgB,CAAoB,IAApB,EAA0B;AAAEG,aAAF;AAAWD;AAAX,KAA1B,CAAhB;AACH;AAED;;;;;AAGoB,QAAdI,cAAc;AAChB,QAAI,KAAK,SAAL,IAAkB,IAAtB,EAA4B;AAAE;AAAS;;AACvC,UAAM,KAAKH,OAAL,CAAaI,GAAb,CAAiB,KAAKL,MAAtB,EAA8B,KAAK,SAAnC,CAAN;AACH;;AA5BoB","names":["defineProperties","EventPayload","filter","emitter","constructor","listener","removeListener","off"],"sourceRoot":"","sources":["../../src.ts/utils/events.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}