{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\r\n *  Returns the address for the %%key%%.\r\n *\r\n *  The key may be any standard form of public key or a private key.\r\n */\n\nexport function computeAddress(key) {\n  let pubkey;\n\n  if (typeof key === \"string\") {\n    pubkey = SigningKey.computePublicKey(key, false);\n  } else {\n    pubkey = key.publicKey;\n  }\n\n  return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\r\n *  Returns the recovered address for the private key that was\r\n *  used to sign %%digest%% that resulted in %%signature%%.\r\n */\n\nexport function recoverAddress(digest, signature) {\n  return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,qBAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,oBAAtC;AAKA;;;;;;AAKA,OAAM,SAAUC,cAAV,CAAyBC,GAAzB,EAAiD;AACnD,MAAIC,MAAJ;;AACA,MAAI,OAAOD,GAAP,KAAgB,QAApB,EAA8B;AAC1BC,UAAM,GAAGH,UAAU,CAACI,gBAAX,CAA4BF,GAA5B,EAAiC,KAAjC,CAAT;AACH,GAFD,MAEO;AACHC,UAAM,GAAGD,GAAG,CAACG,SAAb;AACH;;AACD,SAAOP,UAAU,CAACC,SAAS,CAAC,OAAOI,MAAM,CAACG,SAAP,CAAiB,CAAjB,CAAR,CAAT,CAAsCA,SAAtC,CAAgD,EAAhD,CAAD,CAAjB;AACH;AAED;;;;;AAIA,OAAM,SAAUC,cAAV,CAAyBC,MAAzB,EAA4CC,SAA5C,EAAoE;AACtE,SAAOR,cAAc,CAACD,UAAU,CAACU,gBAAX,CAA4BF,MAA5B,EAAoCC,SAApC,CAAD,CAArB;AACH","names":["getAddress","keccak256","SigningKey","computeAddress","key","pubkey","computePublicKey","publicKey","substring","recoverAddress","digest","signature","recoverPublicKey"],"sourceRoot":"","sources":["../../src.ts/transaction/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}