{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\n\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: storageKeys.map((storageKey, index) => {\n      assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n      return storageKey.toLowerCase();\n    })\n  };\n}\n/**\r\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\r\n */\n\n\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n        return accessSetify(set[0], set[1]);\n      }\n\n      assertArgument(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n\n  assertArgument(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,mBAA5C;;AAKA,SAASC,YAAT,CAAsBC,IAAtB,EAAoCC,WAApC,EAA8D;AAC1D,SAAO;AACHC,WAAO,EAAEN,UAAU,CAACI,IAAD,CADhB;AAEHC,eAAW,EAAEA,WAAW,CAACE,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,KAAsB;AAC/CR,oBAAc,CAACC,WAAW,CAACM,UAAD,EAAa,EAAb,CAAZ,EAA8B,cAA9B,EAA8C,eAAgBC,KAAM,GAApE,EAAyED,UAAzE,CAAd;AACA,aAAOA,UAAU,CAACE,WAAX,EAAP;AACH,KAHY;AAFV,GAAP;AAOH;AAED;;;;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAA4C;AAC9C,MAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB,WAA0FA,KAAM,CAACL,GAAP,CAAW,CAACQ,GAAD,EAAMN,KAAN,KAAe;AAChH,UAAII,KAAK,CAACC,OAAN,CAAcC,GAAd,CAAJ,EAAwB;AACpBd,sBAAc,CAACc,GAAG,CAACC,MAAJ,KAAe,CAAhB,EAAmB,kBAAnB,EAAuC,SAAUP,KAAM,GAAvD,EAA4DM,GAA5D,CAAd;AACA,eAAOZ,YAAY,CAACY,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAnB;AACH;;AACDd,oBAAc,CAACc,GAAG,IAAI,IAAP,IAAe,OAAOA,GAAP,KAAgB,QAAhC,EAA0C,0BAA1C,EAAsE,OAAtE,EAA+EH,KAA/E,CAAd;AACA,aAAOT,YAAY,CAACY,GAAG,CAACT,OAAL,EAAcS,GAAG,CAACV,WAAlB,CAAnB;AACH,KAPyF,CAA1F;AAQH;;AAEDJ,gBAAc,CAACW,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAkB,QAApC,EAA8C,qBAA9C,EAAqE,OAArE,EAA8EA,KAA9E,CAAd;AAEA,QAAMK,MAAM,GAA2DC,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBL,GAAnB,CAAwBH,IAAD,IAAS;AACnG,UAAMC,WAAW,GAAyBO,KAAK,CAACR,IAAD,CAAL,CAAYgB,MAAZ,CAAmB,CAACC,KAAD,EAAQb,UAAR,KAAsB;AAC/Ea,WAAK,CAACb,UAAD,CAAL,GAAoB,IAApB;AACA,aAAOa,KAAP;AACH,KAHyC,EAGjB,EAHiB,CAA1C;AAIA,WAAOlB,YAAY,CAACC,IAAD,EAAOc,MAAM,CAACC,IAAP,CAAYd,WAAZ,EAAyBiB,IAAzB,EAAP,CAAnB;AACH,GANsE,CAAvE;AAOAL,QAAM,CAACK,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACjB,OAAF,CAAUmB,aAAV,CAAwBD,CAAC,CAAClB,OAA1B,CAAvB;AACA,SAAOW,MAAP;AACH","names":["getAddress","assertArgument","isHexString","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","value","Array","isArray","set","length","result","Object","keys","reduce","accum","sort","a","b","localeCompare"],"sourceRoot":"","sources":["../../src.ts/transaction/accesslist.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}