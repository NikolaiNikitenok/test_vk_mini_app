{"ast":null,"code":"/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``maticmum``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethers.quiknode.pro\";\n\n    case \"goerli\":\n      return \"ethers.ethereum-goerli.quiknode.pro\";\n    //case \"sepolia\":\n    //    return \"sepolia.infura.io\";\n\n    case \"arbitrum\":\n      return \"ethers.arbitrum-mainnet.quiknode.pro\";\n\n    case \"arbitrum-goerli\":\n      return \"ethers.arbitrum-goerli.quiknode.pro\";\n\n    case \"matic\":\n      return \"ethers.matic.quiknode.pro\";\n\n    case \"maticmum\":\n      return \"ethers.matic-testnet.quiknode.pro\";\n\n    case \"optimism\":\n      return \"ethers.optimism.quiknode.pro\";\n\n    case \"optimism-goerli\":\n      return \"ethers.optimism-goerli.quiknode.pro\";\n  }\n\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\n\n\nexport class QuickNodeProvider extends JsonRpcProvider {\n  /**\n   *  The API token.\n   */\n  token;\n  /**\n   *  Creates a new **QuickNodeProvider**.\n   */\n\n  constructor(_network, token) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n\n    const network = Network.from(_network);\n\n    if (token == null) {\n      token = defaultToken;\n    }\n\n    const request = QuickNodeProvider.getRequest(network, token);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      token\n    });\n  }\n\n  _getProvider(chainId) {\n    try {\n      return new QuickNodeProvider(chainId, this.token);\n    } catch (error) {}\n\n    return super._getProvider(chainId);\n  }\n\n  isCommunityResource() {\n    return this.token === defaultToken;\n  }\n  /**\n   *  Returns a new request prepared for %%network%% and the\n   *  %%token%%.\n   */\n\n\n  static getRequest(network, token) {\n    if (token == null) {\n      token = defaultToken;\n    }\n\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\n    request.allowGzip = true; //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n    if (token === defaultToken) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"QuickNodeProvider\");\n        return true;\n      };\n    }\n\n    return request;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SACIA,gBADJ,EACsBC,YADtB,EACoCC,cADpC,QAEO,mBAFP;AAIA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAOA,MAAMC,YAAY,GAAG,0CAArB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAA6B;AACzB,UAAOA,IAAP;AACI,SAAK,SAAL;AACI,aAAO,qBAAP;;AACJ,SAAK,QAAL;AACI,aAAO,qCAAP;AACJ;AACA;;AAEA,SAAK,UAAL;AACI,aAAO,sCAAP;;AACJ,SAAK,iBAAL;AACI,aAAO,qCAAP;;AACJ,SAAK,OAAL;AACI,aAAO,2BAAP;;AACJ,SAAK,UAAL;AACI,aAAO,mCAAP;;AACJ,SAAK,UAAL;AACI,aAAO,8BAAP;;AACJ,SAAK,iBAAL;AACI,aAAO,qCAAP;AAnBR;;AAsBAN,gBAAc,CAAC,KAAD,EAAQ,qBAAR,EAA+B,SAA/B,EAA0CM,IAA1C,CAAd;AACH;AAGD;;;;;;;;;;;AASA,OAAM,MAAOC,iBAAP,SAAiCJ,eAAjC,CAAgD;AAClD;;;AAGSK,OAAK;AAEd;;;;AAGAC,cAAYC,QAAZ,EAAmCF,KAAnC,EAAwD;AACpD,QAAIE,QAAQ,IAAI,IAAhB,EAAsB;AAAEA,cAAQ,GAAG,SAAX;AAAuB;;AAC/C,UAAMC,OAAO,GAAGT,OAAO,CAACU,IAAR,CAAaF,QAAb,CAAhB;;AACA,QAAIF,KAAK,IAAI,IAAb,EAAmB;AAAEA,WAAK,GAAGJ,YAAR;AAAuB;;AAE5C,UAAMS,OAAO,GAAGN,iBAAiB,CAACO,UAAlB,CAA6BH,OAA7B,EAAsCH,KAAtC,CAAhB;AACA,UAAMK,OAAN,EAAeF,OAAf,EAAwB;AAAEI,mBAAa,EAAEJ;AAAjB,KAAxB;AAEAb,oBAAgB,CAAoB,IAApB,EAA0B;AAAEU;AAAF,KAA1B,CAAhB;AACH;;AAEDQ,cAAY,CAACC,OAAD,EAAgB;AACxB,QAAI;AACA,aAAO,IAAIV,iBAAJ,CAAsBU,OAAtB,EAA+B,KAAKT,KAApC,CAAP;AACH,KAFD,CAEE,OAAOU,KAAP,EAAc,CAAG;;AACnB,WAAO,MAAMF,YAAN,CAAmBC,OAAnB,CAAP;AACH;;AAEDE,qBAAmB;AACf,WAAQ,KAAKX,KAAL,KAAeJ,YAAvB;AACH;AAED;;;;;;AAIiB,SAAVU,UAAU,CAACH,OAAD,EAAmBH,KAAnB,EAAwC;AACrD,QAAIA,KAAK,IAAI,IAAb,EAAmB;AAAEA,WAAK,GAAGJ,YAAR;AAAuB;;AAE5C,UAAMS,OAAO,GAAG,IAAId,YAAJ,CAAiB,YAAaM,OAAO,CAACM,OAAO,CAACL,IAAT,CAAe,IAAKE,KAAM,EAA/D,CAAhB;AACAK,WAAO,CAACO,SAAR,GAAoB,IAApB,CAJqD,CAKrD;;AAEA,QAAIZ,KAAK,KAAKJ,YAAd,EAA4B;AACxBS,aAAO,CAACQ,SAAR,GAAoB,OAAOR,OAAP,EAAgBS,QAAhB,EAA0BC,OAA1B,KAAqC;AACrDtB,2BAAmB,CAAC,mBAAD,CAAnB;AACA,eAAO,IAAP;AACH,OAHD;AAIH;;AAED,WAAOY,OAAP;AACH;;AAlDiD","names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultToken","getHost","name","QuickNodeProvider","token","constructor","_network","network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","isCommunityResource","allowGzip","retryFunc","response","attempt"],"sourceRoot":"","sources":["../../src.ts/providers/provider-quicknode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}