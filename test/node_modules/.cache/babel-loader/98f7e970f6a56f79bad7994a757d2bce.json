{"ast":null,"code":"// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\nexport class EventLog extends Log {\n  interface;\n  fragment;\n  args;\n\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    defineProperties(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n\n  get eventName() {\n    return this.fragment.name;\n  }\n\n  get eventSignature() {\n    return this.fragment.format();\n  }\n\n}\nexport class ContractTransactionReceipt extends TransactionReceipt {\n  #interface;\n\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#interface = iface;\n  }\n\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? this.#interface.getEvent(log.topics[0]) : null;\n\n      if (fragment) {\n        return new EventLog(log, this.#interface, fragment);\n      } else {\n        return log;\n      }\n    });\n  }\n\n}\nexport class ContractTransactionResponse extends TransactionResponse {\n  #interface;\n\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#interface = iface;\n  }\n\n  async wait(confirms) {\n    const receipt = await super.wait();\n\n    if (receipt == null) {\n      return null;\n    }\n\n    return new ContractTransactionReceipt(this.#interface, this.provider, receipt);\n  }\n\n}\nexport class ContractUnknownEventPayload extends EventPayload {\n  log;\n\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    defineProperties(this, {\n      log\n    });\n  }\n\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n\n}\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    defineProperties(this, {\n      args,\n      fragment\n    });\n  }\n\n  get eventName() {\n    return this.fragment.name;\n  }\n\n  get eventSignature() {\n    return this.fragment.format();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Log","TransactionReceipt","TransactionResponse","defineProperties","EventPayload","EventLog","interface","fragment","args","constructor","log","iface","provider","decodeEventLog","data","topics","eventName","name","eventSignature","format","ContractTransactionReceipt","tx","logs","map","length","getEvent","ContractTransactionResponse","wait","confirms","receipt","ContractUnknownEventPayload","contract","listener","filter","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log"],"sourceRoot":"","sources":["../../src.ts/contract/wrappers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}