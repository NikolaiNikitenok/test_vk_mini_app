{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"children\", \"onRefresh\", \"isFetching\", \"platform\", \"window\", \"document\", \"scroll\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { Touch } from \"../Touch/Touch\";\nimport TouchRootContext from \"../Touch/TouchContext\";\nimport FixedLayout from \"../FixedLayout/FixedLayout\";\nimport { classNames } from \"../../lib/classNames\";\nimport { IOS, ANDROID, VKCOM } from \"../../lib/platform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport PullToRefreshSpinner from \"./PullToRefreshSpinner\";\nimport { withPlatform } from \"../../hoc/withPlatform\";\nimport { canUseDOM, withDOM } from \"../../lib/dom\";\nimport { runTapticImpactOccurred } from \"../../lib/taptic\";\nimport { withContext } from \"../../hoc/withContext\";\nimport { ScrollContext } from \"../AppRoot/ScrollContext\";\n\nfunction cancelEvent(event) {\n  if (!event) {\n    return false;\n  }\n\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n\n  return false;\n}\n\nvar PullToRefresh = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PullToRefresh, _React$PureComponent);\n\n  var _super = _createSuper(PullToRefresh);\n\n  function PullToRefresh(props) {\n    var _this;\n\n    _classCallCheck(this, PullToRefresh);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"params\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"waitFetchingTimeout\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      if (_this.state.refreshing) {\n        cancelEvent(e);\n      }\n\n      _this.setState({\n        touchDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onWindowTouchMove\", function (event) {\n      if (_this.state.refreshing) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchMove\", function (e) {\n      var _this$props$scroll;\n\n      var isY = e.isY,\n          shiftY = e.shiftY;\n      var _this$params = _this.params,\n          start = _this$params.start,\n          max = _this$params.max;\n      var pageYOffset = (_this$props$scroll = _this.props.scroll) === null || _this$props$scroll === void 0 ? void 0 : _this$props$scroll.getScroll().y;\n      var _this$state = _this.state,\n          refreshing = _this$state.refreshing,\n          watching = _this$state.watching,\n          touchDown = _this$state.touchDown;\n\n      if (watching && touchDown) {\n        cancelEvent(e);\n        var positionMultiplier = _this.params.positionMultiplier;\n        var shift = Math.max(0, shiftY - _this.state.touchY);\n        var currentY = Math.max(start, Math.min(_this.params.maxY, start + shift * positionMultiplier));\n        var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n        _this.setState({\n          spinnerY: currentY,\n          spinnerProgress: Math.min(80, Math.max(0, progress)),\n          canRefresh: progress > 80,\n          contentShift: (currentY + 10) * 2.3\n        });\n\n        if (progress > 85 && !refreshing && _this.props.platform === IOS) {\n          _this.runRefreshing();\n        }\n      } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n        cancelEvent(e);\n\n        _this.setState({\n          watching: true,\n          touchY: shiftY,\n          spinnerY: start,\n          spinnerProgress: 0\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function () {\n      _this.setState({\n        watching: false,\n        touchDown: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefreshingFinish\", function () {\n      if (!_this.state.touchDown) {\n        _this.resetRefreshingState();\n      }\n    });\n\n    _this.params = {\n      start: props.platform === ANDROID || props.platform === VKCOM ? -45 : -10,\n      max: props.platform === ANDROID || props.platform === VKCOM ? 80 : 50,\n      maxY: props.platform === ANDROID || props.platform === VKCOM ? 80 : 400,\n      refreshing: props.platform === ANDROID || props.platform === VKCOM ? 50 : 36,\n      positionMultiplier: props.platform === ANDROID || props.platform === VKCOM ? 1 : 0.21\n    };\n    _this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n      touchDown: false,\n      touchY: 0,\n      spinnerY: _this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    };\n    _this.contentRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(PullToRefresh, [{\n    key: \"document\",\n    get: function get() {\n      return this.props.document;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        this.document.addEventListener(\"touchmove\", this.onWindowTouchMove, {\n          // @ts-ignore\n          cancelable: true,\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Здесь нужен последний аргумент с такими же параметрами, потому что\n      // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.\n      // https://github.com/VKCOM/VKUI/issues/444\n      if (canUseDOM) {\n        this.document.removeEventListener(\"touchmove\", this.onWindowTouchMove, {\n          // @ts-ignore\n          cancelable: true,\n          passive: false\n        });\n      }\n\n      if (this.waitFetchingTimeout) {\n        clearTimeout(this.waitFetchingTimeout);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isFetching && !this.props.isFetching) {\n        this.onRefreshingFinish();\n      }\n\n      if (!prevProps.isFetching && this.props.isFetching && this.waitFetchingTimeout) {\n        clearTimeout(this.waitFetchingTimeout);\n      }\n\n      if (prevState.touchDown && !this.state.touchDown) {\n        var _this$state2 = this.state,\n            refreshing = _this$state2.refreshing,\n            canRefresh = _this$state2.canRefresh;\n\n        if (!refreshing && canRefresh) {\n          this.runRefreshing();\n        } else if (refreshing && !this.props.isFetching) {\n          // only iOS can start refresh before gesture end\n          this.resetRefreshingState();\n        } else {\n          // refreshing && isFetching: refresh in progress\n          // OR !refreshing && !canRefresh: pull was not strong enough\n          this.setState({\n            spinnerY: refreshing ? this.params.refreshing : this.params.start,\n            spinnerProgress: 0,\n            contentShift: 0\n          });\n        }\n      }\n    }\n  }, {\n    key: \"runRefreshing\",\n    value: function runRefreshing() {\n      if (!this.state.refreshing && this.props.onRefresh) {\n        // cleanup if the consumer does not start fetching in 1s\n        this.waitFetchingTimeout = setTimeout(this.onRefreshingFinish, 1000);\n        this.setState({\n          refreshing: true,\n          spinnerY: this.props.platform === ANDROID || this.props.platform === VKCOM ? this.params.refreshing : this.state.spinnerY\n        });\n        this.props.onRefresh();\n        runTapticImpactOccurred(\"light\");\n      }\n    }\n  }, {\n    key: \"resetRefreshingState\",\n    value: function resetRefreshingState() {\n      this.setState({\n        watching: false,\n        canRefresh: false,\n        refreshing: false,\n        spinnerY: this.params.start,\n        spinnerProgress: 0,\n        contentShift: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          onRefresh = _this$props.onRefresh,\n          isFetching = _this$props.isFetching,\n          platform = _this$props.platform,\n          window = _this$props.window,\n          document = _this$props.document,\n          scroll = _this$props.scroll,\n          restProps = _objectWithoutProperties(_this$props, _excluded);\n\n      var _this$state3 = this.state,\n          watching = _this$state3.watching,\n          refreshing = _this$state3.refreshing,\n          spinnerY = _this$state3.spinnerY,\n          spinnerProgress = _this$state3.spinnerProgress,\n          canRefresh = _this$state3.canRefresh,\n          touchDown = _this$state3.touchDown,\n          contentShift = _this$state3.contentShift;\n      var spinnerTransform = \"translate3d(0, \".concat(spinnerY, \"px, 0)\");\n      var contentTransform = \"\";\n\n      if (platform === IOS && refreshing && !touchDown) {\n        contentTransform = \"translate3d(0, 100px, 0)\";\n      } else if (platform === IOS && (contentShift || refreshing)) {\n        contentTransform = \"translate3d(0, \".concat(contentShift, \"px, 0)\");\n      }\n\n      return createScopedElement(TouchRootContext.Provider, {\n        value: true\n      }, createScopedElement(Touch, _extends({}, restProps, {\n        onStart: this.onTouchStart,\n        onMove: this.onTouchMove,\n        onEnd: this.onTouchEnd,\n        vkuiClass: classNames(getClassName(\"PullToRefresh\", platform), {\n          \"PullToRefresh--watching\": watching,\n          \"PullToRefresh--refreshing\": refreshing\n        })\n      }), createScopedElement(FixedLayout, {\n        vkuiClass: \"PullToRefresh__controls\"\n      }, createScopedElement(PullToRefreshSpinner, {\n        style: {\n          transform: spinnerTransform,\n          WebkitTransform: spinnerTransform,\n          opacity: watching || refreshing || canRefresh ? 1 : 0\n        },\n        on: refreshing,\n        progress: refreshing ? undefined : spinnerProgress\n      })), createScopedElement(\"div\", {\n        vkuiClass: \"PullToRefresh__content\",\n        ref: this.contentRef,\n        style: {\n          transform: contentTransform,\n          WebkitTransform: contentTransform\n        }\n      }, children)));\n    }\n  }]);\n\n  return PullToRefresh;\n}(React.PureComponent); // eslint-disable-next-line import/no-default-export\n\n\nexport default withContext(withPlatform(withDOM(PullToRefresh)), ScrollContext, \"scroll\");","map":{"version":3,"mappings":"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","names":["React","Touch","TouchRootContext","FixedLayout","classNames","IOS","ANDROID","VKCOM","getClassName","PullToRefreshSpinner","withPlatform","canUseDOM","withDOM","runTapticImpactOccurred","withContext","ScrollContext","cancelEvent","event","originalEvent","preventDefault","cancelable","stopPropagation","PullToRefresh","props","_classCallCheck","_this","_defineProperty","undefined","e","state","refreshing","setState","touchDown","isY","shiftY","params","start","max","pageYOffset","scroll","_this$props$scroll","getScroll","y","watching","positionMultiplier","shift","Math","touchY","currentY","min","maxY","progress","abs","spinnerY","spinnerProgress","canRefresh","contentShift","platform","runRefreshing","resetRefreshingState","contentRef","createRef","document","addEventListener","onWindowTouchMove","passive","removeEventListener","waitFetchingTimeout","clearTimeout","prevProps","prevState","isFetching","onRefreshingFinish","onRefresh","setTimeout","children","window","restProps","spinnerTransform","contentTransform","createScopedElement","Provider","value","onStart","onTouchStart","onMove","onTouchMove","onEnd","onTouchEnd","vkuiClass","style","transform","WebkitTransform","opacity","on","ref","PureComponent"],"sources":["../../../src/components/PullToRefresh/PullToRefresh.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Touch, TouchProps, TouchEvent } from \"../Touch/Touch\";\nimport TouchRootContext from \"../Touch/TouchContext\";\nimport FixedLayout from \"../FixedLayout/FixedLayout\";\nimport { classNames } from \"../../lib/classNames\";\nimport { IOS, ANDROID, VKCOM } from \"../../lib/platform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport PullToRefreshSpinner from \"./PullToRefreshSpinner\";\nimport { withPlatform } from \"../../hoc/withPlatform\";\nimport { AnyFunction, HasPlatform } from \"../../types\";\nimport { canUseDOM, DOMProps, withDOM } from \"../../lib/dom\";\nimport { runTapticImpactOccurred } from \"../../lib/taptic\";\nimport { withContext } from \"../../hoc/withContext\";\nimport {\n  ScrollContext,\n  ScrollContextInterface,\n} from \"../AppRoot/ScrollContext\";\nimport \"./PullToRefresh.css\";\n\nexport interface PullToRefreshProps extends TouchProps, HasPlatform {\n  /**\n   * Будет вызвана для обновления контента\n   */\n  onRefresh: AnyFunction;\n  /**\n   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n   */\n  isFetching?: boolean;\n  /** @ignore */\n  scroll?: ScrollContextInterface;\n}\n\nexport interface PullToRefreshState {\n  watching: boolean;\n  refreshing: boolean;\n  canRefresh: boolean;\n\n  touchDown: boolean;\n\n  touchY: number;\n  spinnerY: PullToRefreshParams[\"start\"];\n  spinnerProgress: number;\n  contentShift: number;\n}\n\nexport interface PullToRefreshParams {\n  start: number;\n  max: number;\n  maxY: number;\n  refreshing: number;\n  positionMultiplier: number;\n}\n\nexport type TouchEventHandler = (event: TouchEvent) => void;\n\nfunction cancelEvent(event: any) {\n  if (!event) {\n    return false;\n  }\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n  return false;\n}\n\nclass PullToRefresh extends React.PureComponent<\n  PullToRefreshProps & DOMProps,\n  PullToRefreshState\n> {\n  constructor(props: PullToRefreshProps) {\n    super(props);\n\n    this.params = {\n      start: props.platform === ANDROID || props.platform === VKCOM ? -45 : -10,\n      max: props.platform === ANDROID || props.platform === VKCOM ? 80 : 50,\n      maxY: props.platform === ANDROID || props.platform === VKCOM ? 80 : 400,\n      refreshing:\n        props.platform === ANDROID || props.platform === VKCOM ? 50 : 36,\n\n      positionMultiplier:\n        props.platform === ANDROID || props.platform === VKCOM ? 1 : 0.21,\n    };\n\n    this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n\n      touchDown: false,\n\n      touchY: 0,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0,\n    };\n\n    this.contentRef = React.createRef();\n  }\n\n  params: PullToRefreshParams;\n  contentRef: React.RefObject<HTMLDivElement>;\n  waitFetchingTimeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n  get document() {\n    return this.props.document;\n  }\n\n  componentDidMount() {\n    if (canUseDOM) {\n      this.document!.addEventListener(\"touchmove\", this.onWindowTouchMove, {\n        // @ts-ignore\n        cancelable: true,\n        passive: false,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // Здесь нужен последний аргумент с такими же параметрами, потому что\n    // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.\n    // https://github.com/VKCOM/VKUI/issues/444\n    if (canUseDOM) {\n      this.document!.removeEventListener(\"touchmove\", this.onWindowTouchMove, {\n        // @ts-ignore\n        cancelable: true,\n        passive: false,\n      });\n    }\n    if (this.waitFetchingTimeout) {\n      clearTimeout(this.waitFetchingTimeout);\n    }\n  }\n\n  componentDidUpdate(\n    prevProps: PullToRefreshProps,\n    prevState: PullToRefreshState\n  ) {\n    if (prevProps.isFetching && !this.props.isFetching) {\n      this.onRefreshingFinish();\n    }\n    if (\n      !prevProps.isFetching &&\n      this.props.isFetching &&\n      this.waitFetchingTimeout\n    ) {\n      clearTimeout(this.waitFetchingTimeout);\n    }\n\n    if (prevState.touchDown && !this.state.touchDown) {\n      const { refreshing, canRefresh } = this.state;\n      if (!refreshing && canRefresh) {\n        this.runRefreshing();\n      } else if (refreshing && !this.props.isFetching) {\n        // only iOS can start refresh before gesture end\n        this.resetRefreshingState();\n      } else {\n        // refreshing && isFetching: refresh in progress\n        // OR !refreshing && !canRefresh: pull was not strong enough\n        this.setState({\n          spinnerY: refreshing ? this.params.refreshing : this.params.start,\n          spinnerProgress: 0,\n          contentShift: 0,\n        });\n      }\n    }\n  }\n\n  onTouchStart: TouchEventHandler = (e: TouchEvent) => {\n    if (this.state.refreshing) {\n      cancelEvent(e);\n    }\n    this.setState({ touchDown: true });\n  };\n\n  onWindowTouchMove: EventListener = (event: Event) => {\n    if (this.state.refreshing) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  onTouchMove: TouchEventHandler = (e: TouchEvent) => {\n    const { isY, shiftY } = e;\n    const { start, max } = this.params;\n    const pageYOffset = this.props.scroll?.getScroll().y;\n\n    const { refreshing, watching, touchDown } = this.state;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n\n      const { positionMultiplier } = this.params;\n\n      const shift = Math.max(0, shiftY - this.state.touchY);\n\n      const currentY = Math.max(\n        start,\n        Math.min(this.params.maxY, start + shift * positionMultiplier)\n      );\n      const progress =\n        currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n      this.setState({\n        spinnerY: currentY,\n        spinnerProgress: Math.min(80, Math.max(0, progress)),\n        canRefresh: progress > 80,\n        contentShift: (currentY + 10) * 2.3,\n      });\n\n      if (progress > 85 && !refreshing && this.props.platform === IOS) {\n        this.runRefreshing();\n      }\n    } else if (\n      isY &&\n      pageYOffset === 0 &&\n      shiftY > 0 &&\n      !refreshing &&\n      touchDown\n    ) {\n      cancelEvent(e);\n\n      this.setState({\n        watching: true,\n        touchY: shiftY,\n        spinnerY: start,\n        spinnerProgress: 0,\n      });\n    }\n  };\n\n  onTouchEnd = () => {\n    this.setState({\n      watching: false,\n      touchDown: false,\n    });\n  };\n\n  runRefreshing() {\n    if (!this.state.refreshing && this.props.onRefresh) {\n      // cleanup if the consumer does not start fetching in 1s\n      this.waitFetchingTimeout = setTimeout(this.onRefreshingFinish, 1000);\n      this.setState({\n        refreshing: true,\n        spinnerY:\n          this.props.platform === ANDROID || this.props.platform === VKCOM\n            ? this.params.refreshing\n            : this.state.spinnerY,\n      });\n\n      this.props.onRefresh();\n      runTapticImpactOccurred(\"light\");\n    }\n  }\n\n  onRefreshingFinish: VoidFunction = () => {\n    if (!this.state.touchDown) {\n      this.resetRefreshingState();\n    }\n  };\n\n  resetRefreshingState() {\n    this.setState({\n      watching: false,\n      canRefresh: false,\n      refreshing: false,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0,\n    });\n  }\n\n  render() {\n    const {\n      children,\n      onRefresh,\n      isFetching,\n      platform,\n      window,\n      document,\n      scroll,\n      ...restProps\n    } = this.props;\n    const {\n      watching,\n      refreshing,\n      spinnerY,\n      spinnerProgress,\n      canRefresh,\n      touchDown,\n      contentShift,\n    } = this.state;\n\n    const spinnerTransform = `translate3d(0, ${spinnerY}px, 0)`;\n    let contentTransform = \"\";\n\n    if (platform === IOS && refreshing && !touchDown) {\n      contentTransform = \"translate3d(0, 100px, 0)\";\n    } else if (platform === IOS && (contentShift || refreshing)) {\n      contentTransform = `translate3d(0, ${contentShift}px, 0)`;\n    }\n\n    return (\n      <TouchRootContext.Provider value={true}>\n        <Touch\n          {...restProps}\n          onStart={this.onTouchStart}\n          onMove={this.onTouchMove}\n          onEnd={this.onTouchEnd}\n          vkuiClass={classNames(getClassName(\"PullToRefresh\", platform), {\n            \"PullToRefresh--watching\": watching,\n            \"PullToRefresh--refreshing\": refreshing,\n          })}\n        >\n          <FixedLayout vkuiClass=\"PullToRefresh__controls\">\n            <PullToRefreshSpinner\n              style={{\n                transform: spinnerTransform,\n                WebkitTransform: spinnerTransform,\n                opacity: watching || refreshing || canRefresh ? 1 : 0,\n              }}\n              on={refreshing}\n              progress={refreshing ? undefined : spinnerProgress}\n            />\n          </FixedLayout>\n\n          <div\n            vkuiClass=\"PullToRefresh__content\"\n            ref={this.contentRef}\n            style={{\n              transform: contentTransform,\n              WebkitTransform: contentTransform,\n            }}\n          >\n            {children}\n          </div>\n        </Touch>\n      </TouchRootContext.Provider>\n    );\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default withContext(\n  withPlatform(withDOM<PullToRefreshProps>(PullToRefresh)),\n  ScrollContext,\n  \"scroll\"\n);\n"]},"metadata":{},"sourceType":"module"}