{"ast":null,"code":"/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CBC, pkcs7Strip } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\n\nexport function isCrowdsaleJson(json) {\n  try {\n    const data = JSON.parse(json);\n\n    if (data.encseed) {\n      return true;\n    }\n  } catch (error) {}\n\n  return false;\n} // See: https://github.com/ethereum/pyethsaletool\n\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\n\nexport function decryptCrowdsaleJson(json, _password) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password); // Ethereum Address\n\n  const address = getAddress(spelunk(data, \"ethaddr:string!\")); // Encrypted Seed\n\n  const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n  assertArgument(encseed && encseed.length % 16 === 0, \"invalid encseed\", \"json\", json);\n  const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16); // Decrypt the seed\n\n  const aesCbc = new CBC(key, iv);\n  const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed))); // This wallet format is weird... Convert the binary encoded hex to a string.\n\n  let seedHex = \"\";\n\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n\n  return {\n    address,\n    privateKey: id(seedHex)\n  };\n}","map":{"version":3,"mappings":"AAAA;;;AAIA,SAASA,GAAT,EAAcC,UAAd,QAAgC,QAAhC;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,mBAAzC;AAEA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,OAArC,QAAoD,YAApD;AAYA;;;;AAGA,OAAM,SAAUC,eAAV,CAA0BC,IAA1B,EAAsC;AACxC,MAAI;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;;AACA,QAAIC,IAAI,CAACG,OAAT,EAAkB;AAAE,aAAO,IAAP;AAAc;AACrC,GAHD,CAGE,OAAOC,KAAP,EAAc,CAAG;;AACnB,SAAO,KAAP;AACH,C,CAED;;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,oBAAV,CAA+BN,IAA/B,EAA6CO,SAA7C,EAA2E;AAC7E,QAAMN,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;AACA,QAAMQ,QAAQ,GAAGZ,WAAW,CAACW,SAAD,CAA5B,CAF6E,CAI7E;;AACA,QAAME,OAAO,GAAGlB,UAAU,CAACO,OAAO,CAACG,IAAD,EAAO,iBAAP,CAAR,CAA1B,CAL6E,CAO7E;;AACA,QAAMG,OAAO,GAAGP,aAAa,CAACC,OAAO,CAACG,IAAD,EAAO,iBAAP,CAAR,CAA7B;AACAN,gBAAc,CAACS,OAAO,IAAKA,OAAO,CAACM,MAAR,GAAiB,EAAlB,KAA0B,CAAtC,EAAyC,iBAAzC,EAA4D,MAA5D,EAAoEV,IAApE,CAAd;AAEA,QAAMW,GAAG,GAAGjB,QAAQ,CAACF,MAAM,CAACgB,QAAD,EAAWA,QAAX,EAAqB,IAArB,EAA2B,EAA3B,EAA+B,QAA/B,CAAP,CAAR,CAAyDI,KAAzD,CAA+D,CAA/D,EAAkE,EAAlE,CAAZ;AAEA,QAAMC,EAAE,GAAGT,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAX;AACA,QAAME,aAAa,GAAGV,OAAO,CAACQ,KAAR,CAAc,EAAd,CAAtB,CAd6E,CAgB7E;;AACA,QAAMG,MAAM,GAAG,IAAI1B,GAAJ,CAAQsB,GAAR,EAAaE,EAAb,CAAf;AACA,QAAMG,IAAI,GAAG1B,UAAU,CAACI,QAAQ,CAACqB,MAAM,CAACE,OAAP,CAAeH,aAAf,CAAD,CAAT,CAAvB,CAlB6E,CAoB7E;;AACA,MAAII,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACN,MAAzB,EAAiCS,CAAC,EAAlC,EAAsC;AAClCD,WAAO,IAAIE,MAAM,CAACC,YAAP,CAAoBL,IAAI,CAACG,CAAD,CAAxB,CAAX;AACH;;AAED,SAAO;AAAEV,WAAF;AAAWa,cAAU,EAAE7B,EAAE,CAACyB,OAAD;AAAzB,GAAP;AACH","names":["CBC","pkcs7Strip","getAddress","pbkdf2","id","getBytes","assertArgument","getPassword","looseArrayify","spelunk","isCrowdsaleJson","json","data","JSON","parse","encseed","error","decryptCrowdsaleJson","_password","password","address","length","key","slice","iv","encryptedSeed","aesCbc","seed","decrypt","seedHex","i","String","fromCharCode","privateKey"],"sourceRoot":"","sources":["../../src.ts/wallet/json-crowdsale.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}