{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n  #request;\n\n  constructor(ethereum, network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n\n    this.#request = async (method, params) => {\n      const payload = {\n        method,\n        params\n      };\n      this.emit(\"debug\", {\n        action: \"sendEip1193Request\",\n        payload\n      });\n\n      try {\n        const result = await ethereum.request(payload);\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Result\",\n          result\n        });\n        return result;\n      } catch (e) {\n        const error = new Error(e.message);\n        error.code = e.code;\n        error.data = e.data;\n        error.payload = payload;\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Error\",\n          error\n        });\n        throw error;\n      }\n    };\n  }\n\n  async send(method, params) {\n    await this._start();\n    return await super.send(method, params);\n  }\n\n  async _send(payload) {\n    assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n\n    try {\n      const result = await this.#request(payload.method, payload.params || []);\n      return [{\n        id: payload.id,\n        result\n      }];\n    } catch (e) {\n      return [{\n        id: payload.id,\n        error: {\n          code: e.code,\n          data: e.data,\n          message: e.message\n        }\n      }];\n    }\n  }\n\n  getRpcError(payload, error) {\n    error = JSON.parse(JSON.stringify(error)); // EIP-1193 gives us some machine-readable error codes, so rewrite\n    // them into \n\n    switch (error.error.code || -1) {\n      case 4001:\n        error.error.message = `ethers-user-denied: ${error.error.message}`;\n        break;\n\n      case 4200:\n        error.error.message = `ethers-unsupported: ${error.error.message}`;\n        break;\n    }\n\n    return super.getRpcError(payload, error);\n  }\n\n  async hasSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n\n    const accounts = await this.send(\"eth_accounts\", []);\n\n    if (typeof address === \"number\") {\n      return accounts.length > address;\n    }\n\n    address = address.toLowerCase();\n    return accounts.filter(a => a.toLowerCase() === address).length !== 0;\n  }\n\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n\n    if (!(await this.hasSigner(address))) {\n      try {\n        //const resp = \n        await this.#request(\"eth_requestAccounts\", []); //console.log(\"RESP\", resp);\n      } catch (error) {\n        const payload = error.payload;\n        throw this.getRpcError(payload, {\n          id: payload.id,\n          error\n        });\n      }\n    }\n\n    return await super.getSigner(address);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assertArgument","JsonRpcApiPollingProvider","BrowserProvider","constructor","ethereum","network","batchMaxCount","method","params","payload","emit","action","result","request","e","error","Error","message","code","data","send","_start","_send","Array","isArray","id","getRpcError","JSON","parse","stringify","hasSigner","address","accounts","length","toLowerCase","filter","a","getSigner"],"sourceRoot":"","sources":["../../src.ts/providers/provider-browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}