{"ast":null,"code":"/**\n *  About Abstract Signer and subclassing\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\n\nfunction checkProvider(signer, operation) {\n  if (signer.provider) {\n    return signer.provider;\n  }\n\n  assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n}\n\nasync function populate(signer, tx) {\n  let pop = copyRequest(tx);\n\n  if (pop.to != null) {\n    pop.to = resolveAddress(pop.to, signer);\n  }\n\n  if (pop.from != null) {\n    const from = pop.from;\n    pop.from = Promise.all([signer.getAddress(), resolveAddress(from, signer)]).then(_ref => {\n      let [address, from] = _ref;\n      assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n      return address;\n    });\n  } else {\n    pop.from = signer.getAddress();\n  }\n\n  return await resolveProperties(pop);\n}\n\nexport class AbstractSigner {\n  provider;\n\n  constructor(provider) {\n    defineProperties(this, {\n      provider: provider || null\n    });\n  }\n\n  async getNonce(blockTag) {\n    return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n  }\n\n  async populateCall(tx) {\n    const pop = await populate(this, tx);\n    return pop;\n  }\n\n  async populateTransaction(tx) {\n    const provider = checkProvider(this, \"populateTransaction\");\n    const pop = await populate(this, tx);\n\n    if (pop.nonce == null) {\n      pop.nonce = await this.getNonce(\"pending\");\n    }\n\n    if (pop.gasLimit == null) {\n      pop.gasLimit = await this.estimateGas(pop);\n    } // Populate the chain ID\n\n\n    const network = await this.provider.getNetwork();\n\n    if (pop.chainId != null) {\n      const chainId = getBigInt(pop.chainId);\n      assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n    } else {\n      pop.chainId = network.chainId;\n    } // Do not allow mixing pre-eip-1559 and eip-1559 properties\n\n\n    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n\n    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n      assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n      assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n    }\n\n    if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) {\n      // Fully-formed EIP-1559 transaction (skip getFeeData)\n      pop.type = 2;\n    } else if (pop.type === 0 || pop.type === 1) {\n      // Explicit Legacy or EIP-2930 transaction\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n      assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getGasPrice\"\n      }); // Populate missing gasPrice\n\n      if (pop.gasPrice == null) {\n        pop.gasPrice = feeData.gasPrice;\n      }\n    } else {\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n\n      if (pop.type == null) {\n        // We need to auto-detect the intended type of this transaction...\n        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n          // The network supports EIP-1559!\n          // Upgrade transaction from null to eip-1559\n          pop.type = 2;\n\n          if (pop.gasPrice != null) {\n            // Using legacy gasPrice property on an eip-1559 network,\n            // so use gasPrice as both fee properties\n            const gasPrice = pop.gasPrice;\n            delete pop.gasPrice;\n            pop.maxFeePerGas = gasPrice;\n            pop.maxPriorityFeePerGas = gasPrice;\n          } else {\n            // Populate missing fee data\n            if (pop.maxFeePerGas == null) {\n              pop.maxFeePerGas = feeData.maxFeePerGas;\n            }\n\n            if (pop.maxPriorityFeePerGas == null) {\n              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n            }\n          }\n        } else if (feeData.gasPrice != null) {\n          // Network doesn't support EIP-1559...\n          // ...but they are trying to use EIP-1559 properties\n          assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"populateTransaction\"\n          }); // Populate missing fee data\n\n          if (pop.gasPrice == null) {\n            pop.gasPrice = feeData.gasPrice;\n          } // Explicitly set untyped transaction to legacy\n          // @TODO: Maybe this shold allow type 1?\n\n\n          pop.type = 0;\n        } else {\n          // getFeeData has failed us.\n          assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.getFeeData\"\n          });\n        }\n      } else if (pop.type === 2) {\n        // Explicitly using EIP-1559\n        // Populate missing fee data\n        if (pop.maxFeePerGas == null) {\n          pop.maxFeePerGas = feeData.maxFeePerGas;\n        }\n\n        if (pop.maxPriorityFeePerGas == null) {\n          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n        }\n      }\n    } //@TOOD: Don't await all over the place; save them up for\n    // the end for better batching\n\n\n    return await resolveProperties(pop);\n  }\n\n  async estimateGas(tx) {\n    return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n  }\n\n  async call(tx) {\n    return checkProvider(this, \"call\").call(await this.populateCall(tx));\n  }\n\n  async resolveName(name) {\n    const provider = checkProvider(this, \"resolveName\");\n    return await provider.resolveName(name);\n  }\n\n  async sendTransaction(tx) {\n    const provider = checkProvider(this, \"sendTransaction\");\n    const pop = await this.populateTransaction(tx);\n    delete pop.from;\n    const txObj = Transaction.from(pop);\n    return await provider.broadcastTransaction(await this.signTransaction(txObj));\n  }\n\n}\nexport class VoidSigner extends AbstractSigner {\n  address;\n\n  constructor(address, provider) {\n    super(provider);\n    defineProperties(this, {\n      address\n    });\n  }\n\n  async getAddress() {\n    return this.address;\n  }\n\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n\n  #throwUnsupported(suffix, operation) {\n    assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", {\n      operation\n    });\n  }\n\n  async signTransaction(tx) {\n    this.#throwUnsupported(\"transactions\", \"signTransaction\");\n  }\n\n  async signMessage(message) {\n    this.#throwUnsupported(\"messages\", \"signMessage\");\n  }\n\n  async signTypedData(domain, types, value) {\n    this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["resolveAddress","Transaction","defineProperties","getBigInt","resolveProperties","assert","assertArgument","copyRequest","checkProvider","signer","operation","provider","populate","tx","pop","to","from","Promise","all","getAddress","then","address","toLowerCase","AbstractSigner","constructor","getNonce","blockTag","getTransactionCount","populateCall","populateTransaction","nonce","gasLimit","estimateGas","network","getNetwork","chainId","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","getFeeData","call","resolveName","name","sendTransaction","txObj","broadcastTransaction","signTransaction","VoidSigner","connect","suffix","signMessage","message","signTypedData","domain","types","value"],"sourceRoot":"","sources":["../../src.ts/providers/abstract-signer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}