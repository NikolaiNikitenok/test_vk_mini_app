{"ast":null,"code":"/**\r\n *  An **HMAC** enables verification that a given key was used\r\n *  to authenticate a payload.\r\n *\r\n *  See: [[link-wiki-hmac]]\r\n *\r\n *  @_subsection: api/crypto:HMAC  [about-hmac]\r\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\n\nconst _computeHmac = function (algorithm, key, data) {\n  return createHmac(algorithm, key).update(data).digest();\n};\n\nlet __computeHmac = _computeHmac;\n/**\r\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\r\n *  %%algo%% used for compression.\r\n *\r\n *  @example:\r\n *    key = id(\"some-secret\")\r\n *\r\n *    // Compute the HMAC\r\n *    computeHmac(\"sha256\", key, \"0x1337\")\r\n *    //_result:\r\n *\r\n *    // To compute the HMAC of UTF-8 data, the data must be\r\n *    // converted to UTF-8 bytes\r\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\r\n *    //_result:\r\n *\r\n */\n\nexport function computeHmac(algorithm, _key, _data) {\n  const key = getBytes(_key, \"key\");\n  const data = getBytes(_data, \"data\");\n  return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\n\ncomputeHmac.lock = function () {\n  locked = true;\n};\n\ncomputeHmac.register = function (func) {\n  if (locked) {\n    throw new Error(\"computeHmac is locked\");\n  }\n\n  __computeHmac = func;\n};\n\nObject.freeze(computeHmac);","map":{"version":3,"mappings":"AAAA;;;;;;;;AAQA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;AAKA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,YAAY,GAAG,UAASC,SAAT,EAAyCC,GAAzC,EAA0DC,IAA1D,EAA0E;AAC3F,SAAOP,UAAU,CAACK,SAAD,EAAYC,GAAZ,CAAV,CAA2BE,MAA3B,CAAkCD,IAAlC,EAAwCE,MAAxC,EAAP;AACH,CAFD;;AAIA,IAAIC,aAAa,GAAGN,YAApB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUO,WAAV,CAAsBN,SAAtB,EAAsDO,IAAtD,EAAuEC,KAAvE,EAAuF;AACzF,QAAMP,GAAG,GAAGL,QAAQ,CAACW,IAAD,EAAO,KAAP,CAApB;AACA,QAAML,IAAI,GAAGN,QAAQ,CAACY,KAAD,EAAQ,MAAR,CAArB;AACA,SAAOX,OAAO,CAACQ,aAAa,CAACL,SAAD,EAAYC,GAAZ,EAAiBC,IAAjB,CAAd,CAAd;AACH;AACDI,WAAW,CAACG,CAAZ,GAAgBV,YAAhB;;AACAO,WAAW,CAACI,IAAZ,GAAoB;AAAaZ,QAAM,GAAG,IAAT;AAAgB,CAAjD;;AACAQ,WAAW,CAACK,QAAZ,GAAuB,UAASC,IAAT,EAA+F;AAClH,MAAId,MAAJ,EAAY;AAAE,UAAM,IAAIe,KAAJ,CAAU,uBAAV,CAAN;AAA2C;;AACzDR,eAAa,GAAGO,IAAhB;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcT,WAAd","names":["createHmac","getBytes","hexlify","locked","_computeHmac","algorithm","key","data","update","digest","__computeHmac","computeHmac","_key","_data","_","lock","register","func","Error","Object","freeze"],"sourceRoot":"","sources":["../../src.ts/crypto/hmac.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}