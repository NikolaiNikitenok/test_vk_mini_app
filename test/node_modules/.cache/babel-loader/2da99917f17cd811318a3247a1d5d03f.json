{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\n\nfunction getChecksumAddress(address) {\n  //    if (!isHexString(address, 20)) {\n  //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n  //    }\n  address = address.toLowerCase();\n  const chars = address.substring(2).split(\"\");\n  const expanded = new Uint8Array(40);\n\n  for (let i = 0; i < 40; i++) {\n    expanded[i] = chars[i].charCodeAt(0);\n  }\n\n  const hashed = getBytes(keccak256(expanded));\n\n  for (let i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return \"0x\" + chars.join(\"\");\n} // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\n\n\nconst ibanLookup = {};\n\nfor (let i = 0; i < 10; i++) {\n  ibanLookup[String(i)] = String(i);\n}\n\nfor (let i = 0; i < 26; i++) {\n  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n} // How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\n\n\nconst safeDigits = 15;\n\nfunction ibanChecksum(address) {\n  address = address.toUpperCase();\n  address = address.substring(4) + address.substring(0, 2) + \"00\";\n  let expanded = address.split(\"\").map(c => {\n    return ibanLookup[c];\n  }).join(\"\"); // Javascript can handle integers safely up to 15 (decimal) digits\n\n  while (expanded.length >= safeDigits) {\n    let block = expanded.substring(0, safeDigits);\n    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n  }\n\n  let checksum = String(98 - parseInt(expanded, 10) % 97);\n\n  while (checksum.length < 2) {\n    checksum = \"0\" + checksum;\n  }\n\n  return checksum;\n}\n\n;\n\nconst Base36 = function () {\n  ;\n  const result = {};\n\n  for (let i = 0; i < 36; i++) {\n    const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n    result[key] = BigInt(i);\n  }\n\n  return result;\n}();\n\nfunction fromBase36(value) {\n  value = value.toLowerCase();\n  let result = BN_0;\n\n  for (let i = 0; i < value.length; i++) {\n    result = result * BN_36 + Base36[value[i]];\n  }\n\n  return result;\n}\n/**\r\n *  Returns a normalized and checksumed address for %%address%%.\r\n *  This accepts non-checksum addresses, checksum addresses and\r\n *  [[getIcapAddress]] formats.\r\n *\r\n *  The checksum in Ethereum uses the capitalization (upper-case\r\n *  vs lower-case) of the characters within an address to encode\r\n *  its checksum, which offers, on average, a checksum of 15-bits.\r\n *\r\n *  If %%address%% contains both upper-case and lower-case, it is\r\n *  assumed to already be a checksum address and its checksum is\r\n *  validated, and if the address fails its expected checksum an\r\n *  error is thrown.\r\n *\r\n *  If you wish the checksum of %%address%% to be ignore, it should\r\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\r\n *  being passed in. This should be a very rare situation though,\r\n *  that you wish to bypass the safegaurds in place to protect\r\n *  against an address that has been incorrectly copied from another\r\n *  source.\r\n *\r\n *  @example:\r\n *    // Adds the checksum (via upper-casing specific letters)\r\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\r\n *    //_result:\r\n *\r\n *    // Converts ICAP address and adds checksum\r\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if an address contains mixed case,\r\n *    // but the checksum fails\r\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_error:\r\n */\n\n\nexport function getAddress(address) {\n  assertArgument(typeof address === \"string\", \"invalid address\", \"address\", address);\n\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    // Missing the 0x prefix\n    if (address.substring(0, 2) !== \"0x\") {\n      address = \"0x\" + address;\n    }\n\n    const result = getChecksumAddress(address); // It is a checksummed address with a bad checksum\n\n    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n    return result;\n  } // Maybe ICAP? (we only support direct mode)\n\n\n  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    // It is an ICAP address with a bad checksum\n    assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n    let result = fromBase36(address.substring(4)).toString(16);\n\n    while (result.length < 40) {\n      result = \"0\" + result;\n    }\n\n    return getChecksumAddress(\"0x\" + result);\n  }\n\n  assertArgument(false, \"invalid address\", \"address\", address);\n}\n/**\r\n *  The [ICAP Address format](link-icap) format is an early checksum\r\n *  format which attempts to be compatible with the banking\r\n *  industry [IBAN format](link-wiki-iban] for bank accounts.\r\n *\r\n *  It is no longer common or a recommended format.\r\n *\r\n *  @example:\r\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\r\n *    //_result:\r\n *\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if the ICAP checksum is wrong\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\r\n *    //_error:\r\n */\n\nexport function getIcapAddress(address) {\n  //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n  let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n\n  while (base36.length < 30) {\n    base36 = \"0\" + base36;\n  }\n\n  return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}","map":{"version":3,"mappings":"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","names":["keccak256","getBytes","assertArgument","BN_0","BigInt","BN_36","getChecksumAddress","address","toLowerCase","chars","substring","split","expanded","Uint8Array","i","charCodeAt","hashed","toUpperCase","join","ibanLookup","String","fromCharCode","safeDigits","ibanChecksum","map","c","length","block","parseInt","checksum","Base36","result","key","fromBase36","value","getAddress","match","toString","getIcapAddress","base36"],"sourceRoot":"","sources":["../../src.ts/address/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}