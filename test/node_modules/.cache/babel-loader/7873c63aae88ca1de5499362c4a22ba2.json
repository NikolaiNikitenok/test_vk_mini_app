{"ast":null,"code":"/**\r\n *  Most interactions with Ethereum requires integer values, which use\r\n *  the smallest magnitude unit.\r\n *\r\n *  For example, imagine dealing with dollars and cents. Since dollars\r\n *  are divisible, non-integer values are possible, such as ``$10.77``.\r\n *  By using the smallest indivisible unit (i.e. cents), the value can\r\n *  be kept as the integer ``1077``.\r\n *\r\n *  When receiving decimal input from the user (as a decimal string),\r\n *  the value should be converted to an integer and when showing a user\r\n *  a value, the integer value should be converted to a decimal string.\r\n *\r\n *  This creates a clear distinction, between values to be used by code\r\n *  (integers) and values used for display logic to users (decimals).\r\n *\r\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\r\n *  where each individual unit is called a //wei//.\r\n *\r\n *  @_subsection api/utils:Unit Conversion  [about-units]\r\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"];\n/**\r\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\r\n *  places. The %%unit%% may be the number of decimal places or the name of\r\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\r\n *\r\n */\n\nexport function formatUnits(value, unit) {\n  let decimals = 18;\n\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = getNumber(unit, \"unit\");\n  }\n\n  return FixedNumber.fromValue(value, decimals, {\n    decimals\n  }).toString();\n}\n/**\r\n *  Converts the //decimal string// %%value%% to a [[BigInt]], assuming\r\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\r\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\r\n */\n\nexport function parseUnits(value, unit) {\n  assertArgument(typeof value === \"string\", \"value must be a string\", \"value\", value);\n  let decimals = 18;\n\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = getNumber(unit, \"unit\");\n  }\n\n  return FixedNumber.fromString(value, {\n    decimals\n  }).value;\n}\n/**\r\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\r\n */\n\nexport function formatEther(wei) {\n  return formatUnits(wei, 18);\n}\n/**\r\n *  Converts the //decimal string// %%ether%% to a [[BigInt]], using 18\r\n *  decimal places.\r\n */\n\nexport function parseEther(ether) {\n  return parseUnits(ether, 18);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAKA,MAAMC,KAAK,GAAG,CACV,KADU,EAEV,MAFU,EAGV,MAHU,EAIV,MAJU,EAKV,OALU,EAMV,QANU,EAOV,OAPU,CAAd;AAUA;;;;;;;AAMA,OAAM,SAAUC,WAAV,CAAsBC,KAAtB,EAA2CC,IAA3C,EAAkE;AACpE,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAI,OAAOD,IAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAME,KAAK,GAAGL,KAAK,CAACM,OAAN,CAAcH,IAAd,CAAd;AACAN,kBAAc,CAACQ,KAAK,IAAI,CAAV,EAAa,cAAb,EAA6B,MAA7B,EAAqCF,IAArC,CAAd;AACAC,YAAQ,GAAG,IAAIC,KAAf;AACH,GAJD,MAIO,IAAIF,IAAI,IAAI,IAAZ,EAAkB;AACrBC,YAAQ,GAAGL,SAAS,CAACI,IAAD,EAAO,MAAP,CAApB;AACH;;AAED,SAAOL,WAAW,CAACS,SAAZ,CAAsBL,KAAtB,EAA6BE,QAA7B,EAAuC;AAAEA;AAAF,GAAvC,EAAqDI,QAArD,EAAP;AACH;AAED;;;;;;AAKA,OAAM,SAAUC,UAAV,CAAqBP,KAArB,EAAoCC,IAApC,EAA2D;AAC7DN,gBAAc,CAAC,OAAOK,KAAP,KAAkB,QAAnB,EAA6B,wBAA7B,EAAuD,OAAvD,EAAgEA,KAAhE,CAAd;AAEA,MAAIE,QAAQ,GAAG,EAAf;;AACA,MAAI,OAAOD,IAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAME,KAAK,GAAGL,KAAK,CAACM,OAAN,CAAcH,IAAd,CAAd;AACAN,kBAAc,CAACQ,KAAK,IAAI,CAAV,EAAa,cAAb,EAA6B,MAA7B,EAAqCF,IAArC,CAAd;AACAC,YAAQ,GAAG,IAAIC,KAAf;AACH,GAJD,MAIO,IAAIF,IAAI,IAAI,IAAZ,EAAkB;AACrBC,YAAQ,GAAGL,SAAS,CAACI,IAAD,EAAO,MAAP,CAApB;AACH;;AAED,SAAOL,WAAW,CAACY,UAAZ,CAAuBR,KAAvB,EAA8B;AAAEE;AAAF,GAA9B,EAA4CF,KAAnD;AACH;AAED;;;;AAGA,OAAM,SAAUS,WAAV,CAAsBC,GAAtB,EAAuC;AACzC,SAAOX,WAAW,CAACW,GAAD,EAAM,EAAN,CAAlB;AACH;AAED;;;;;AAIA,OAAM,SAAUC,UAAV,CAAqBC,KAArB,EAAkC;AACpC,SAAOL,UAAU,CAACK,KAAD,EAAQ,EAAR,CAAjB;AACH","names":["assertArgument","FixedNumber","getNumber","names","formatUnits","value","unit","decimals","index","indexOf","fromValue","toString","parseUnits","fromString","formatEther","wei","parseEther","ether"],"sourceRoot":"","sources":["../../src.ts/utils/units.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}