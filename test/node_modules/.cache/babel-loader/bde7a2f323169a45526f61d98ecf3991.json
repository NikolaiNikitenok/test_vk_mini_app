{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Polyfill for Safari 14\n\n\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n\n  const _32n = BigInt(32);\n\n  const _u32_max = BigInt(0xffffffff);\n\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n} // Base SHA2 class (RFC 6234)\n\n\nclass SHA2 extends utils_js_1.Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = (0, utils_js_1.createView)(this.buffer);\n  }\n\n  update(data) {\n    _assert_js_1.default.exists(this);\n\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos); // Fast path: we have at least one block in input, cast it to view and process\n\n      if (take === blockLen) {\n        const dataView = (0, utils_js_1.createView)(data);\n\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n\n        continue;\n      }\n\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n\n    _assert_js_1.default.output(out, this);\n\n    this.finished = true; // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this; // append the bit '1' to the message\n\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0); // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    } // Pad until full block byte with zeros\n\n\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0; // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n\n\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = (0, utils_js_1.createView)(out);\n    this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n  }\n\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n\n}\n\nexports.SHA2 = SHA2;","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/node_modules/ethers/node_modules/@noble/hashes/_sha2.js"],"names":["Object","defineProperty","exports","value","SHA2","_assert_js_1","require","utils_js_1","setBigUint64","view","byteOffset","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","Hash","constructor","blockLen","outputLen","padOffset","finished","length","pos","destroyed","buffer","Uint8Array","createView","update","data","default","exists","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"]},"metadata":{},"sourceType":"script"}