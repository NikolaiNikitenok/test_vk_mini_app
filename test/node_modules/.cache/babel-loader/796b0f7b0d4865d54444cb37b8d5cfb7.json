{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"children\", \"isShown\", \"offsetX\", \"offsetY\", \"alignX\", \"alignY\", \"onClose\", \"cornerOffset\", \"cornerAbsoluteOffset\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport { useNavTransition } from \"../NavTransitionContext/NavTransitionContext\";\nimport { usePopper } from \"react-popper\";\nimport { tooltipContainerAttr } from \"./TooltipContainer\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useDOM } from \"../../lib/dom\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { useGlobalEventListener } from \"../../hooks/useGlobalEventListener\";\n\nvar isDOMTypeElement = function isDOMTypeElement(element) {\n  return /*#__PURE__*/React.isValidElement(element) && typeof element.type === \"string\";\n};\n\nvar baseClassName = getClassName(\"Tooltip\");\nvar warn = warnOnce(\"Tooltip\");\nvar IS_DEV = process.env.NODE_ENV === \"development\";\nvar SimpleTooltip = /*#__PURE__*/React.forwardRef(function SimpleTooltip(_ref, ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? \"accent\" : _ref$mode,\n      header = _ref.header,\n      text = _ref.text,\n      arrowRef = _ref.arrowRef,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      attributes = _ref.attributes;\n  return createScopedElement(\"div\", {\n    vkuiClass: classNames(baseClassName, \"Tooltip--\".concat(mode))\n  }, createScopedElement(\"div\", _extends({\n    vkuiClass: \"Tooltip__container\",\n    ref: ref,\n    style: style.container\n  }, attributes === null || attributes === void 0 ? void 0 : attributes.container), createScopedElement(\"div\", _extends({\n    vkuiClass: \"Tooltip__corner\",\n    style: style.arrow\n  }, attributes === null || attributes === void 0 ? void 0 : attributes.arrow, {\n    ref: arrowRef\n  })), createScopedElement(\"div\", {\n    vkuiClass: \"Tooltip__content\"\n  }, header && createScopedElement(Subhead, {\n    weight: \"1\",\n    vkuiClass: \"Tooltip__title\"\n  }, header), text && createScopedElement(Subhead, {\n    vkuiClass: \"Tooltip__text\"\n  }, text))));\n});\n\nfunction mapAlignX(x) {\n  switch (x) {\n    case \"left\":\n      return \"start\";\n\n    case \"right\":\n      return \"end\";\n\n    default:\n      return \"\";\n  }\n}\n\nfunction getPlacement(alignX, alignY) {\n  return [alignY || \"bottom\", mapAlignX(alignX || \"left\")].filter(function (p) {\n    return !!p;\n  }).join(\"-\");\n}\n\nfunction isVerticalPlacement(placement) {\n  return placement.startsWith(\"top\") || placement.startsWith(\"bottom\");\n}\n\nvar Tooltip = function Tooltip(_ref2) {\n  var _attributes$arrow, _attributes$popper;\n\n  var children = _ref2.children,\n      _isShown = _ref2.isShown,\n      _ref2$offsetX = _ref2.offsetX,\n      offsetX = _ref2$offsetX === void 0 ? 0 : _ref2$offsetX,\n      _ref2$offsetY = _ref2.offsetY,\n      offsetY = _ref2$offsetY === void 0 ? 15 : _ref2$offsetY,\n      alignX = _ref2.alignX,\n      alignY = _ref2.alignY,\n      onClose = _ref2.onClose,\n      _ref2$cornerOffset = _ref2.cornerOffset,\n      cornerOffset = _ref2$cornerOffset === void 0 ? 0 : _ref2$cornerOffset,\n      cornerAbsoluteOffset = _ref2.cornerAbsoluteOffset,\n      restProps = _objectWithoutProperties(_ref2, _excluded);\n\n  var _useNavTransition = useNavTransition(),\n      entering = _useNavTransition.entering;\n\n  var isShown = _isShown && !entering;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltipRef = _React$useState2[0],\n      setTooltipRef = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      tooltipArrowRef = _React$useState4[0],\n      setTooltipArrowRef = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      target = _React$useState6[0],\n      setTarget = _React$useState6[1];\n\n  if (IS_DEV) {\n    var multiChildren = React.Children.count(children) > 1; // Empty children is a noop\n\n    var primitiveChild = hasReactNode(children) && _typeof(children) !== \"object\";\n    (multiChildren || primitiveChild) && warn([\"children must be a single React element, got\", multiChildren && \"multiple\", primitiveChild && JSON.stringify(children)].filter(Boolean).join(\" \"));\n  }\n  /* eslint-disable no-restricted-properties */\n\n  /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion*/\n\n\n  var tooltipContainer = React.useMemo(function () {\n    return target === null || target === void 0 ? void 0 : target.closest(\"[\".concat(tooltipContainerAttr, \"]\"));\n  }, [target]);\n  var strategy = React.useMemo(function () {\n    return (target === null || target === void 0 ? void 0 : target.style.position) === \"fixed\" ? \"fixed\" : \"absolute\";\n  }, [target]);\n  /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion*/\n\n  /* eslint-enable no-restricted-properties */\n\n  if (IS_DEV && target && !tooltipContainer) {\n    throw new Error(\"Use TooltipContainer for Tooltip outside Panel (see docs)\");\n  }\n\n  var arrowOffsetModiifer = React.useMemo(function () {\n    return {\n      name: \"arrowOffset\",\n      enabled: true,\n      phase: \"main\",\n      fn: function fn(_ref3) {\n        var state = _ref3.state;\n\n        if (!state.modifiersData.arrow) {\n          return;\n        }\n\n        if (isVerticalPlacement(state.placement)) {\n          if (cornerAbsoluteOffset !== undefined) {\n            state.modifiersData.arrow.x = cornerAbsoluteOffset;\n          } else {\n            var _state$modifiersData$;\n\n            if (((_state$modifiersData$ = state.modifiersData.arrow) === null || _state$modifiersData$ === void 0 ? void 0 : _state$modifiersData$.x) !== undefined) {\n              state.modifiersData.arrow.x += cornerOffset;\n            }\n          }\n        } else {\n          if (cornerAbsoluteOffset !== undefined) {\n            state.modifiersData.arrow.y = cornerAbsoluteOffset;\n          } else {\n            var _state$modifiersData$2;\n\n            if (((_state$modifiersData$2 = state.modifiersData.arrow) === null || _state$modifiersData$2 === void 0 ? void 0 : _state$modifiersData$2.y) !== undefined) {\n              state.modifiersData.arrow.y += cornerOffset;\n            }\n          }\n        }\n      }\n    };\n  }, [cornerOffset, cornerAbsoluteOffset]);\n  var placement = getPlacement(alignX, alignY);\n\n  var _usePopper = usePopper(target, tooltipRef, {\n    strategy: strategy,\n    placement: placement,\n    modifiers: [{\n      name: \"offset\",\n      options: {\n        offset: [offsetX, offsetY]\n      }\n    }, {\n      name: \"arrow\",\n      options: {\n        element: tooltipArrowRef,\n        padding: 14\n      }\n    }, {\n      name: \"preventOverflow\"\n    }, {\n      name: \"flip\"\n    }, arrowOffsetModiifer]\n  }),\n      styles = _usePopper.styles,\n      attributes = _usePopper.attributes;\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  useGlobalEventListener(document, \"click\", isShown && onClose, {\n    passive: true\n  }); // NOTE: setting isShown to true used to trigger usePopper().forceUpdate()\n\n  var childRef = /*#__PURE__*/React.isValidElement(children) && (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n  var patchedRef = useExternRef(setTarget, childRef);\n  var child = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, _defineProperty({}, isDOMTypeElement(children) ? \"ref\" : \"getRootRef\", patchedRef)) : children;\n  return createScopedElement(React.Fragment, null, child, isShown && target != null && /*#__PURE__*/ReactDOM.createPortal(createScopedElement(SimpleTooltip, _extends({}, restProps, {\n    ref: function ref(el) {\n      return setTooltipRef(el);\n    },\n    arrowRef: function arrowRef(el) {\n      return setTooltipArrowRef(el);\n    },\n    style: {\n      arrow: styles.arrow,\n      container: styles.popper\n    },\n    attributes: {\n      arrow: (_attributes$arrow = attributes.arrow) !== null && _attributes$arrow !== void 0 ? _attributes$arrow : null,\n      container: (_attributes$popper = attributes.popper) !== null && _attributes$popper !== void 0 ? _attributes$popper : null\n    }\n  })), tooltipContainer));\n};\n\nTooltip.defaultProps = {\n  offsetX: 0,\n  offsetY: 15,\n  cornerOffset: 0,\n  isShown: true,\n  mode: \"accent\"\n}; // eslint-disable-next-line import/no-default-export\n\nexport default Tooltip;","map":{"version":3,"mappings":"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","names":["React","ReactDOM","classNames","getClassName","Subhead","useNavTransition","usePopper","tooltipContainerAttr","useExternRef","useDOM","warnOnce","hasReactNode","useGlobalEventListener","isDOMTypeElement","element","isValidElement","type","baseClassName","warn","IS_DEV","process","env","NODE_ENV","SimpleTooltip","forwardRef","ref","mode","header","text","arrowRef","style","attributes","createScopedElement","vkuiClass","container","arrow","weight","mapAlignX","x","getPlacement","alignX","alignY","filter","p","join","isVerticalPlacement","placement","startsWith","Tooltip","children","_isShown","isShown","offsetX","offsetY","onClose","cornerOffset","cornerAbsoluteOffset","restProps","entering","useState","tooltipRef","setTooltipRef","tooltipArrowRef","setTooltipArrowRef","target","setTarget","multiChildren","Children","count","primitiveChild","_typeof","JSON","stringify","Boolean","tooltipContainer","useMemo","closest","strategy","position","Error","arrowOffsetModiifer","name","enabled","phase","fn","state","modifiersData","undefined","y","modifiers","options","offset","padding","styles","document","passive","childRef","props","getRootRef","patchedRef","child","cloneElement","Fragment","createPortal","el","popper","defaultProps"],"sources":["../../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport { useNavTransition } from \"../NavTransitionContext/NavTransitionContext\";\nimport { Modifier, usePopper } from \"react-popper\";\nimport { Placement } from \"@popperjs/core\";\nimport { tooltipContainerAttr } from \"./TooltipContainer\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { useDOM } from \"../../lib/dom\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { useGlobalEventListener } from \"../../hooks/useGlobalEventListener\";\nimport \"./Tooltip.css\";\n\ninterface SimpleTooltipProps extends Partial<TooltipProps> {\n  target?: HTMLDivElement;\n  arrowRef?: React.Ref<HTMLDivElement>;\n  style?: {\n    arrow: React.CSSProperties;\n    container: React.CSSProperties;\n  };\n  attributes?: {\n    arrow: React.HTMLAttributes<HTMLDivElement> | null;\n    container: React.HTMLAttributes<HTMLDivElement> | null;\n  };\n}\n\nconst isDOMTypeElement = (\n  element: React.ReactElement\n): element is React.DOMElement<any, any> => {\n  return React.isValidElement(element) && typeof element.type === \"string\";\n};\n\nconst baseClassName = getClassName(\"Tooltip\");\nconst warn = warnOnce(\"Tooltip\");\nconst IS_DEV = process.env.NODE_ENV === \"development\";\n\nconst SimpleTooltip = React.forwardRef<HTMLDivElement, SimpleTooltipProps>(\n  function SimpleTooltip(\n    { mode = \"accent\", header, text, arrowRef, style = {}, attributes },\n    ref\n  ) {\n    return (\n      <div vkuiClass={classNames(baseClassName, `Tooltip--${mode}`)}>\n        <div\n          vkuiClass=\"Tooltip__container\"\n          ref={ref}\n          style={style.container}\n          {...attributes?.container}\n        >\n          <div\n            vkuiClass=\"Tooltip__corner\"\n            style={style.arrow}\n            {...attributes?.arrow}\n            ref={arrowRef}\n          />\n          <div vkuiClass=\"Tooltip__content\">\n            {header && (\n              <Subhead weight=\"1\" vkuiClass=\"Tooltip__title\">\n                {header}\n              </Subhead>\n            )}\n            {text && <Subhead vkuiClass=\"Tooltip__text\">{text}</Subhead>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport interface TooltipProps {\n  /**\n   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n   */\n  children: React.ReactElement;\n  mode?: \"accent\" | \"light\";\n  /**\n   * Если передан `false`, то рисуется просто `children`.\n   */\n  isShown?: boolean;\n  /**\n   * Текст тултипа.\n   */\n  text?: React.ReactNode;\n  /**\n   * Заголовок тултипа.\n   */\n  header?: React.ReactNode;\n  /**\n   * Положение по горизонтали (прижатие к левому или правому краю `children`).\n   * Если не задано, позиция по горизонтали определятся автоматически\n   */\n  alignX?: \"center\" | \"left\" | \"right\";\n  /**\n   * Положение по вертикали (расположение над или под `children`).\n   * Если не задано, позиция по вертикали определятся автоматически\n   */\n  alignY?: \"top\" | \"bottom\";\n  /**\n   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n   */\n  offsetX?: number;\n  /**\n   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n   */\n  offsetY?: number;\n  /**\n   * Сдвиг стрелочки относительно центра дочернего элемента.\n   */\n  cornerOffset?: number;\n  /**\n   * Сдвиг стрелочки относительно ширины тултипа\n   */\n  cornerAbsoluteOffset?: number;\n  /**\n   * Callback, который вызывается при клике по любому месту в пределах экрана.\n   */\n  onClose?: () => void;\n}\n\ndeclare type ArrowOffsetModifierOptions = {\n  offset: number;\n};\ndeclare type ArrowOffsetModifier = Modifier<\n  \"arrowOffset\",\n  ArrowOffsetModifierOptions\n>;\n\nfunction mapAlignX(x: TooltipProps[\"alignX\"]) {\n  switch (x) {\n    case \"left\":\n      return \"start\";\n    case \"right\":\n      return \"end\";\n    default:\n      return \"\";\n  }\n}\nfunction getPlacement(\n  alignX: TooltipProps[\"alignX\"],\n  alignY: TooltipProps[\"alignY\"]\n): Placement {\n  return [alignY || \"bottom\", mapAlignX(alignX || \"left\")]\n    .filter((p) => !!p)\n    .join(\"-\") as Placement;\n}\nfunction isVerticalPlacement(placement: Placement) {\n  return placement.startsWith(\"top\") || placement.startsWith(\"bottom\");\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({\n  children,\n  isShown: _isShown,\n  offsetX = 0,\n  offsetY = 15,\n  alignX,\n  alignY,\n  onClose,\n  cornerOffset = 0,\n  cornerAbsoluteOffset,\n  ...restProps\n}) => {\n  const { entering } = useNavTransition();\n  const isShown = _isShown && !entering;\n  const [tooltipRef, setTooltipRef] = React.useState<HTMLElement | null>(null);\n  const [tooltipArrowRef, setTooltipArrowRef] =\n    React.useState<HTMLElement | null>(null);\n  const [target, setTarget] = React.useState<HTMLElement>();\n\n  if (IS_DEV) {\n    const multiChildren = React.Children.count(children) > 1;\n    // Empty children is a noop\n    const primitiveChild =\n      hasReactNode(children) && typeof children !== \"object\";\n    (multiChildren || primitiveChild) &&\n      warn(\n        [\n          \"children must be a single React element, got\",\n          multiChildren && \"multiple\",\n          primitiveChild && JSON.stringify(children),\n        ]\n          .filter(Boolean)\n          .join(\" \")\n      );\n  }\n\n  /* eslint-disable no-restricted-properties */\n  /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion*/\n  const tooltipContainer = React.useMemo(\n    () => target?.closest(`[${tooltipContainerAttr}]`) as HTMLDivElement,\n    [target]\n  );\n  const strategy = React.useMemo(\n    () => (target?.style.position === \"fixed\" ? \"fixed\" : \"absolute\"),\n    [target]\n  );\n  /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion*/\n  /* eslint-enable no-restricted-properties */\n\n  if (IS_DEV && target && !tooltipContainer) {\n    throw new Error(\n      \"Use TooltipContainer for Tooltip outside Panel (see docs)\"\n    );\n  }\n\n  const arrowOffsetModiifer = React.useMemo<ArrowOffsetModifier>(() => {\n    return {\n      name: \"arrowOffset\",\n      enabled: true,\n      phase: \"main\",\n      fn({ state }) {\n        if (!state.modifiersData.arrow) {\n          return;\n        }\n        if (isVerticalPlacement(state.placement)) {\n          if (cornerAbsoluteOffset !== undefined) {\n            state.modifiersData.arrow.x = cornerAbsoluteOffset;\n          } else {\n            if (state.modifiersData.arrow?.x !== undefined) {\n              state.modifiersData.arrow.x += cornerOffset;\n            }\n          }\n        } else {\n          if (cornerAbsoluteOffset !== undefined) {\n            state.modifiersData.arrow.y = cornerAbsoluteOffset;\n          } else {\n            if (state.modifiersData.arrow?.y !== undefined) {\n              state.modifiersData.arrow.y += cornerOffset;\n            }\n          }\n        }\n      },\n    };\n  }, [cornerOffset, cornerAbsoluteOffset]);\n\n  const placement = getPlacement(alignX, alignY);\n  const { styles, attributes } = usePopper(target, tooltipRef, {\n    strategy,\n    placement,\n    modifiers: [\n      {\n        name: \"offset\",\n        options: {\n          offset: [offsetX, offsetY],\n        },\n      },\n      {\n        name: \"arrow\",\n        options: {\n          element: tooltipArrowRef,\n          padding: 14,\n        },\n      },\n      {\n        name: \"preventOverflow\",\n      },\n      {\n        name: \"flip\",\n      },\n      arrowOffsetModiifer,\n    ],\n  });\n\n  const { document } = useDOM();\n  useGlobalEventListener(document, \"click\", isShown && onClose, {\n    passive: true,\n  });\n  // NOTE: setting isShown to true used to trigger usePopper().forceUpdate()\n\n  const childRef =\n    React.isValidElement(children) &&\n    (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n  const patchedRef = useExternRef(setTarget, childRef);\n  const child = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        [isDOMTypeElement(children) ? \"ref\" : \"getRootRef\"]: patchedRef,\n      })\n    : children;\n\n  return (\n    <React.Fragment>\n      {child}\n      {isShown &&\n        target != null &&\n        ReactDOM.createPortal(\n          <SimpleTooltip\n            {...restProps}\n            ref={(el) => setTooltipRef(el)}\n            arrowRef={(el) => setTooltipArrowRef(el)}\n            style={{ arrow: styles.arrow, container: styles.popper }}\n            attributes={{\n              arrow: attributes.arrow ?? null,\n              container: attributes.popper ?? null,\n            }}\n          />,\n          tooltipContainer\n        )}\n    </React.Fragment>\n  );\n};\n\nTooltip.defaultProps = {\n  offsetX: 0,\n  offsetY: 15,\n  cornerOffset: 0,\n  isShown: true,\n  mode: \"accent\",\n};\n// eslint-disable-next-line import/no-default-export\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}