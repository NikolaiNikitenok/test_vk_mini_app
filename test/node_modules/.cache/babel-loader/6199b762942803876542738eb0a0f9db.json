{"ast":null,"code":"import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\n\nexport class BaseWallet extends AbstractSigner {\n  /**\n   *  The wallet address.\n   */\n  address;\n  #signingKey;\n  /**\n   *  Creates a new BaseWallet for %%privateKey%%, optionally\n   *  connected to %%provider%%.\n   *\n   *  If %%provider%% is not specified, only offline methods can\n   *  be used.\n   */\n\n  constructor(privateKey, provider) {\n    super(provider);\n    assertArgument(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n    this.#signingKey = privateKey;\n    const address = computeAddress(this.signingKey.publicKey);\n    defineProperties(this, {\n      address\n    });\n  } // Store private values behind getters to reduce visibility\n  // in console.log\n\n  /**\n   *  The [[SigningKey]] used for signing payloads.\n   */\n\n\n  get signingKey() {\n    return this.#signingKey;\n  }\n  /**\n   *  The private key for this wallet.\n   */\n\n\n  get privateKey() {\n    return this.signingKey.privateKey;\n  }\n\n  async getAddress() {\n    return this.address;\n  }\n\n  connect(provider) {\n    return new BaseWallet(this.#signingKey, provider);\n  }\n\n  async signTransaction(tx) {\n    // Replace any Addressable or ENS name with an address\n    const {\n      to,\n      from\n    } = await resolveProperties({\n      to: tx.to ? resolveAddress(tx.to, this.provider) : undefined,\n      from: tx.from ? resolveAddress(tx.from, this.provider) : undefined\n    });\n\n    if (to != null) {\n      tx.to = to;\n    }\n\n    if (from != null) {\n      tx.from = from;\n    }\n\n    if (tx.from != null) {\n      assertArgument(getAddress(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n      delete tx.from;\n    } // Build the transaction\n\n\n    const btx = Transaction.from(tx);\n    btx.signature = this.signingKey.sign(btx.unsignedHash);\n    return btx.serialized;\n  }\n\n  async signMessage(message) {\n    return this.signMessageSync(message);\n  } // @TODO: Add a secialized signTx and signTyped sync that enforces\n  // all parameters are known?\n\n  /**\n   *  Returns the signature for %%message%% signed with this wallet.\n   */\n\n\n  signMessageSync(message) {\n    return this.signingKey.sign(hashMessage(message)).serialized;\n  }\n\n  async signTypedData(domain, types, value) {\n    // Populate any ENS names\n    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async name => {\n      // @TODO: this should use resolveName; addresses don't\n      //        need a provider\n      assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"resolveName\",\n        info: {\n          name\n        }\n      });\n      const address = await this.provider.resolveName(name);\n      assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n        value: name\n      });\n      return address;\n    });\n    return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getAddress","resolveAddress","hashMessage","TypedDataEncoder","AbstractSigner","computeAddress","Transaction","defineProperties","resolveProperties","assert","assertArgument","BaseWallet","address","constructor","privateKey","provider","sign","signingKey","publicKey","connect","signTransaction","tx","to","from","undefined","btx","signature","unsignedHash","serialized","signMessage","message","signMessageSync","signTypedData","domain","types","value","populated","resolveNames","name","operation","info","resolveName","hash"],"sourceRoot":"","sources":["../../src.ts/wallet/base-wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}