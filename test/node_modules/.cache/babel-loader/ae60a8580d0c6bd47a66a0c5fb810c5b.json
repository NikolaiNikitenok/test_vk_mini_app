{"ast":null,"code":"/**\n * @license\n * [BSD-3-Clause](https://github.com/pryv/unix-timestamp-js/blob/master/LICENSE)\n */\n\n/**\n * Tiny library to create and manipulate Unix timestamps\n * (i.e. defined as the number of seconds since Unix epoch time).\n */\nvar timestamp = module.exports = {}; // constants\n\ntimestamp.Millisecond = 0.001;\ntimestamp.Second = 1;\ntimestamp.Minute = 60;\ntimestamp.Hour = 60 * timestamp.Minute;\ntimestamp.Day = 24 * timestamp.Hour;\ntimestamp.Week = 7 * timestamp.Day;\n/**\n * = mean Gregorian month\n */\n\ntimestamp.Month = 30.436875 * timestamp.Day;\ntimestamp.Year = 12 * timestamp.Month;\nvar OffsetRegExp = new RegExp('^\\\\s*' + '([-+]?)\\\\s*' + ['y', 'M', 'w', 'd', 'h', 'm', 's', 'ms'].map(function (t) {\n  return '(?:(\\\\d+)\\\\s*' + t + ')?';\n}).join('\\\\s*') + '\\\\s*$');\nvar outputFn = dontRound;\n\nfunction dontRound(time) {\n  return time;\n}\n\nfunction round(time) {\n  return Math.round(time);\n}\n/**\n * Set to `true` to round all returned timestamps to the second. Defaults to `false`.\n */\n\n\nObject.defineProperty(timestamp, 'round', {\n  get: function get() {\n    return outputFn === round;\n  },\n  set: function set(value) {\n    outputFn = value ? round : dontRound;\n  }\n});\n/**\n * Gets the current time as Unix timestamp.\n * Optionally applying a given offset specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {String|Number} [offset] The optional time offset to apply\n * @returns {Number} The corresponding timestamp\n */\n\ntimestamp.now = function (offset) {\n  var now = Date.now() / 1000;\n  return outputFn(offset ? timestamp.add(now, offset) : now);\n};\n/**\n * Applies the given offset to the given timestamp.\n * The offset is specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {Number} time The original timestamp\n * @param {String|Number} offset The time offset to apply\n * @returns {Number} The result timestamp\n */\n\n\ntimestamp.add = function (time, offset) {\n  if (!isNumber(time)) {\n    throw new Error('Time must be a number');\n  }\n\n  if (isString(offset)) {\n    var matches = OffsetRegExp.exec(offset);\n\n    if (!matches) {\n      throw new Error('Expected offset string format: [+|-] [{years}y] [{months}M] [{weeks}w] ' + '[{days}d] [{hours}h] [{minutes}m] [{seconds}s] [{milliseconds}ms]');\n    }\n\n    offset = (matches[1] === '-' ? -1 : 1) * ((matches[2] || 0) * timestamp.Year + (matches[3] || 0) * timestamp.Month + (matches[4] || 0) * timestamp.Week + (matches[5] || 0) * timestamp.Day + (matches[6] || 0) * timestamp.Hour + (matches[7] || 0) * timestamp.Minute + (matches[8] || 0) * timestamp.Second + (matches[9] || 0) * timestamp.Millisecond);\n  } else if (!isNumber(offset)) {\n    throw new Error('Offset must be either a string or a number');\n  }\n\n  return outputFn(time + offset);\n};\n/**\n * Gets the offset timestamp for the given offset string.\n * (Alias for .add() using a time of zero.)\n *\n * @param {String|Number} offset The time offset for the duration\n * @returns {Number} The result time offset\n */\n\n\ntimestamp.duration = function (offset) {\n  return timestamp.add(0, offset);\n};\n/**\n * Gets the Unix timestamp for the given date object or string.\n *\n * @param {Date|String} date A date object or an ISO 8601 date string\n * @returns {Number} The corresponding timestamp\n */\n\n\ntimestamp.fromDate = function (date) {\n  if (isString(date)) {\n    date = new Date(date);\n  } else if (!isDate(date)) {\n    throw new Error('Expected either a string or a date');\n  }\n\n  return outputFn(date.getTime() / 1000);\n};\n/**\n * Gets the date for the given Unix timestamp.\n *\n * @param {Number} time A timestamp\n * @returns {Date} The corresponding date\n */\n\n\ntimestamp.toDate = function (time) {\n  if (!isNumber(time)) {\n    throw new Error('Expected a number');\n  }\n\n  return new Date(time * 1000);\n};\n\nfunction isString(value) {\n  return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n\nfunction isDate(value) {\n  return Object.prototype.toString.call(value) === '[object Date]';\n}","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/node_modules/unix-timestamp/lib/timestamp.js"],"names":["timestamp","module","exports","Millisecond","Second","Minute","Hour","Day","Week","Month","Year","OffsetRegExp","RegExp","map","t","join","outputFn","dontRound","time","round","Math","Object","defineProperty","get","set","value","now","offset","Date","add","isNumber","Error","isString","matches","exec","duration","fromDate","date","isDate","getTime","toDate","prototype","toString","call"],"mappings":"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","sourcesContent":["/**\n * @license\n * [BSD-3-Clause](https://github.com/pryv/unix-timestamp-js/blob/master/LICENSE)\n */\n\n/**\n * Tiny library to create and manipulate Unix timestamps\n * (i.e. defined as the number of seconds since Unix epoch time).\n */\n\nconst timestamp = module.exports = {};\n\n// constants\n\ntimestamp.Millisecond = 0.001;\ntimestamp.Second = 1;\ntimestamp.Minute = 60;\ntimestamp.Hour = 60 * timestamp.Minute;\ntimestamp.Day = 24 * timestamp.Hour;\ntimestamp.Week = 7 * timestamp.Day;\n/**\n * = mean Gregorian month\n */\ntimestamp.Month = 30.436875 * timestamp.Day;\ntimestamp.Year = 12 * timestamp.Month;\n\nconst OffsetRegExp = new RegExp('^\\\\s*' +\n    '([-+]?)\\\\s*' +\n    ['y', 'M', 'w', 'd', 'h', 'm', 's', 'ms']\n      .map(function (t) { return '(?:(\\\\d+)\\\\s*' + t + ')?'; })\n      .join('\\\\s*') +\n    '\\\\s*$');\n\nlet outputFn = dontRound;\nfunction dontRound (time) { return time; }\nfunction round (time) { return Math.round(time); }\n/**\n * Set to `true` to round all returned timestamps to the second. Defaults to `false`.\n */\nObject.defineProperty(timestamp, 'round', {\n  get: function () { return outputFn === round; },\n  set: function (value) { outputFn = value ? round : dontRound; }\n});\n\n/**\n * Gets the current time as Unix timestamp.\n * Optionally applying a given offset specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {String|Number} [offset] The optional time offset to apply\n * @returns {Number} The corresponding timestamp\n */\ntimestamp.now = function (offset) {\n  const now = Date.now() / 1000;\n  return outputFn(offset ? timestamp.add(now, offset) : now);\n};\n\n/**\n * Applies the given offset to the given timestamp.\n * The offset is specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {Number} time The original timestamp\n * @param {String|Number} offset The time offset to apply\n * @returns {Number} The result timestamp\n */\ntimestamp.add = function (time, offset) {\n  if (!isNumber(time)) {\n    throw new Error('Time must be a number');\n  }\n  if (isString(offset)) {\n    const matches = OffsetRegExp.exec(offset);\n    if (!matches) {\n      throw new Error('Expected offset string format: [+|-] [{years}y] [{months}M] [{weeks}w] ' +\n          '[{days}d] [{hours}h] [{minutes}m] [{seconds}s] [{milliseconds}ms]');\n    }\n    offset = (matches[1] === '-' ? -1 : 1) * (\n      (matches[2] || 0) * timestamp.Year +\n      (matches[3] || 0) * timestamp.Month +\n      (matches[4] || 0) * timestamp.Week +\n      (matches[5] || 0) * timestamp.Day +\n      (matches[6] || 0) * timestamp.Hour +\n      (matches[7] || 0) * timestamp.Minute +\n      (matches[8] || 0) * timestamp.Second +\n      (matches[9] || 0) * timestamp.Millisecond\n    );\n  } else if (!isNumber(offset)) {\n    throw new Error('Offset must be either a string or a number');\n  }\n  return outputFn(time + offset);\n};\n\n/**\n * Gets the offset timestamp for the given offset string.\n * (Alias for .add() using a time of zero.)\n *\n * @param {String|Number} offset The time offset for the duration\n * @returns {Number} The result time offset\n */\ntimestamp.duration = function (offset) {\n  return timestamp.add(0, offset);\n};\n\n/**\n * Gets the Unix timestamp for the given date object or string.\n *\n * @param {Date|String} date A date object or an ISO 8601 date string\n * @returns {Number} The corresponding timestamp\n */\ntimestamp.fromDate = function (date) {\n  if (isString(date)) {\n    date = new Date(date);\n  } else if (!isDate(date)) {\n    throw new Error('Expected either a string or a date');\n  }\n  return outputFn(date.getTime() / 1000);\n};\n\n/**\n * Gets the date for the given Unix timestamp.\n *\n * @param {Number} time A timestamp\n * @returns {Date} The corresponding date\n */\ntimestamp.toDate = function (time) {\n  if (!isNumber(time)) {\n    throw new Error('Expected a number');\n  }\n  return new Date(time * 1000);\n};\n\nfunction isString (value) {\n  return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';\n}\n\nfunction isNumber (value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n\nfunction isDate (value) {\n  return Object.prototype.toString.call(value) === '[object Date]';\n}\n"]},"metadata":{},"sourceType":"script"}