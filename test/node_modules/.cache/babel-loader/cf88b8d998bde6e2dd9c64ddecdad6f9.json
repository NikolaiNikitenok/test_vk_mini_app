{"ast":null,"code":"/**\n *  About Errors.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\n\nfunction stringify(value) {\n  if (value == null) {\n    return \"null\";\n  }\n\n  if (Array.isArray(value)) {\n    return \"[ \" + value.map(stringify).join(\", \") + \" ]\";\n  }\n\n  if (value instanceof Uint8Array) {\n    const HEX = \"0123456789abcdef\";\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      result += HEX[value[i] >> 4];\n      result += HEX[value[i] & 0xf];\n    }\n\n    return result;\n  }\n\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return stringify(value.toJSON());\n  }\n\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n\n    case \"bigint\":\n      return BigInt(value).toString();\n\n    case \"number\":\n      return value.toString();\n\n    case \"string\":\n      return JSON.stringify(value);\n\n    case \"object\":\n      {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{ \" + keys.map(k => `${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\n      }\n  }\n\n  return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript envornoments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\n\n\nexport function isError(error, code) {\n  return error && error.code === code;\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\n\nexport function isCallException(error) {\n  return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additioanl properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depneding on %%code%%, additional\n *  required properties. The error message will also include the %%meeage%%,\n *  ethers version, %%code%% and all aditional properties, serialized.\n */\n\nexport function makeError(message, code, info) {\n  {\n    const details = [];\n\n    if (info) {\n      if (\"message\" in info || \"code\" in info || \"name\" in info) {\n        throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n      }\n\n      for (const key in info) {\n        const value = info[key]; //                try {\n\n        details.push(key + \"=\" + stringify(value)); //                } catch (error: any) {\n        //                console.log(\"MMM\", error.message);\n        //                    details.push(key + \"=[could not serialize object]\");\n        //                }\n      }\n    }\n\n    details.push(`code=${code}`);\n    details.push(`version=${version}`);\n\n    if (details.length) {\n      message += \" (\" + details.join(\", \") + \")\";\n    }\n  }\n  let error;\n\n  switch (code) {\n    case \"INVALID_ARGUMENT\":\n      error = new TypeError(message);\n      break;\n\n    case \"NUMERIC_FAULT\":\n    case \"BUFFER_OVERRUN\":\n      error = new RangeError(message);\n      break;\n\n    default:\n      error = new Error(message);\n  }\n\n  defineProperties(error, {\n    code\n  });\n\n  if (info) {\n    defineProperties(error, info);\n  }\n\n  return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\n\nexport function assert(check, message, code, info) {\n  if (!check) {\n    throw makeError(message, code, info);\n  }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\n\nexport function assertArgument(check, message, name, value) {\n  assert(check, message, \"INVALID_ARGUMENT\", {\n    argument: name,\n    value: value\n  });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n  if (message == null) {\n    message = \"\";\n  }\n\n  if (message) {\n    message = \": \" + message;\n  }\n\n  assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n    count: count,\n    expectedCount: expectedCount\n  });\n  assert(count <= expectedCount, \"too many arguemnts\" + message, \"UNEXPECTED_ARGUMENT\", {\n    count: count,\n    expectedCount: expectedCount\n  });\n}\n\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n  try {\n    // General test for normalize\n\n    /* c8 ignore start */\n    if (\"test\".normalize(form) !== \"test\") {\n      throw new Error(\"bad\");\n    }\n\n    ;\n    /* c8 ignore stop */\n\n    if (form === \"NFD\") {\n      const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n      const expected = String.fromCharCode(0x65, 0x0301);\n      /* c8 ignore start */\n\n      if (check !== expected) {\n        throw new Error(\"broken\");\n      }\n      /* c8 ignore stop */\n\n    }\n\n    accum.push(form);\n  } catch (error) {}\n\n  return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\n\n\nexport function assertNormalize(form) {\n  assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"String.prototype.normalize\",\n    info: {\n      form\n    }\n  });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\n\nexport function assertPrivate(givenGuard, guard, className) {\n  if (className == null) {\n    className = \"\";\n  }\n\n  if (givenGuard !== guard) {\n    let method = className,\n        operation = \"new\";\n\n    if (className) {\n      method += \".\";\n      operation += \" \" + className;\n    }\n\n    assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n      operation\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["version","defineProperties","stringify","value","Array","isArray","map","join","Uint8Array","HEX","result","i","length","toJSON","toString","BigInt","JSON","keys","Object","sort","k","isError","error","code","isCallException","makeError","message","info","details","Error","key","push","TypeError","RangeError","assert","check","assertArgument","name","argument","assertArgumentCount","count","expectedCount","_normalizeForms","reduce","accum","form","normalize","String","fromCharCode","expected","assertNormalize","indexOf","operation","assertPrivate","givenGuard","guard","className","method"],"sourceRoot":"","sources":["../../src.ts/utils/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}