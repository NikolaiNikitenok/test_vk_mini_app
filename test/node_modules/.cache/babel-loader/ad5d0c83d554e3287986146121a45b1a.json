{"ast":null,"code":"/**\r\n *  [[link-pocket]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\r\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n\n    case \"maticmum\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\r\n *  The **PocketProvider** connects to the [[link-pocket]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-pocket-signup).\r\n */\n\n\nexport class PocketProvider extends JsonRpcProvider {\n  /**\r\n   *  The Application ID for the Pocket connection.\r\n   */\n  applicationId;\n  /**\r\n   *  The Application Secret for making authenticated requests\r\n   *  to the Pocket connection.\r\n   */\n\n  applicationSecret;\n  /**\r\n   *  Create a new **PocketProvider**.\r\n   *\r\n   *  By default connecting to ``mainnet`` with a highly throttled\r\n   *  API key.\r\n   */\n\n  constructor(_network, applicationId, applicationSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n\n    const network = Network.from(_network);\n\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n\n    const options = {\n      staticNetwork: network\n    };\n    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    super(request, network, options);\n    defineProperties(this, {\n      applicationId,\n      applicationSecret\n    });\n  }\n\n  _getProvider(chainId) {\n    try {\n      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n    } catch (error) {}\n\n    return super._getProvider(chainId);\n  }\n  /**\r\n   *  Returns a prepared request for connecting to %%network%% with\r\n   *  %%applicationId%%.\r\n   */\n\n\n  static getRequest(network, applicationId, applicationSecret) {\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n    request.allowGzip = true;\n\n    if (applicationSecret) {\n      request.setCredentials(\"\", applicationSecret);\n    }\n\n    if (applicationId === defaultApplicationId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"PocketProvider\");\n        return true;\n      };\n    }\n\n    return request;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;AAaA,SACIA,gBADJ,EACsBC,YADtB,EACoCC,cADpC,QAEO,mBAFP;AAKA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAKA,MAAMC,oBAAoB,GAAG,0BAA7B;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAA6B;AACzB,UAAQA,IAAR;AACI,SAAK,SAAL;AACI,aAAQ,kCAAR;;AACJ,SAAK,QAAL;AACI,aAAO,iCAAP;;AAEJ,SAAK,OAAL;AACI,aAAO,mCAAP;;AACJ,SAAK,UAAL;AACI,aAAO,yCAAP;AATR;;AAYAN,gBAAc,CAAC,KAAD,EAAQ,qBAAR,EAA+B,SAA/B,EAA0CM,IAA1C,CAAd;AACH;AAGD;;;;;;;;;;;AASA,OAAM,MAAOC,cAAP,SAA8BJ,eAA9B,CAA6C;AAE/C;;;AAGSK,eAAa;AAEtB;;;;;AAISC,mBAAiB;AAE1B;;;;;;;AAMAC,cAAYC,QAAZ,EAAmCH,aAAnC,EAAkEC,iBAAlE,EAAmG;AAC/F,QAAIE,QAAQ,IAAI,IAAhB,EAAsB;AAAEA,cAAQ,GAAG,SAAX;AAAuB;;AAC/C,UAAMC,OAAO,GAAGV,OAAO,CAACW,IAAR,CAAaF,QAAb,CAAhB;;AACA,QAAIH,aAAa,IAAI,IAArB,EAA2B;AAAEA,mBAAa,GAAGJ,oBAAhB;AAAuC;;AACpE,QAAIK,iBAAiB,IAAI,IAAzB,EAA+B;AAAEA,uBAAiB,GAAG,IAApB;AAA2B;;AAE5D,UAAMK,OAAO,GAAG;AAAEC,mBAAa,EAAEH;AAAjB,KAAhB;AAEA,UAAMI,OAAO,GAAGT,cAAc,CAACU,UAAf,CAA0BL,OAA1B,EAAmCJ,aAAnC,EAAkDC,iBAAlD,CAAhB;AACA,UAAMO,OAAN,EAAeJ,OAAf,EAAwBE,OAAxB;AAEAhB,oBAAgB,CAAiB,IAAjB,EAAuB;AAAEU,mBAAF;AAAiBC;AAAjB,KAAvB,CAAhB;AACH;;AAEDS,cAAY,CAACC,OAAD,EAAgB;AACxB,QAAI;AACA,aAAO,IAAIZ,cAAJ,CAAmBY,OAAnB,EAA4B,KAAKX,aAAjC,EAAgD,KAAKC,iBAArD,CAAP;AACH,KAFD,CAEE,OAAOW,KAAP,EAAc,CAAG;;AACnB,WAAO,MAAMF,YAAN,CAAmBC,OAAnB,CAAP;AACH;AAED;;;;;;AAIiB,SAAVF,UAAU,CAACL,OAAD,EAAmBJ,aAAnB,EAAkDC,iBAAlD,EAAmF;AAChG,QAAID,aAAa,IAAI,IAArB,EAA2B;AAAEA,mBAAa,GAAGJ,oBAAhB;AAAuC;;AAEpE,UAAMY,OAAO,GAAG,IAAIjB,YAAJ,CAAiB,YAAaM,OAAO,CAACO,OAAO,CAACN,IAAT,CAAe,UAAWE,aAAc,EAA7E,CAAhB;AACAQ,WAAO,CAACK,SAAR,GAAoB,IAApB;;AAEA,QAAIZ,iBAAJ,EAAuB;AACnBO,aAAO,CAACM,cAAR,CAAuB,EAAvB,EAA2Bb,iBAA3B;AACH;;AAED,QAAID,aAAa,KAAKJ,oBAAtB,EAA4C;AACxCY,aAAO,CAACO,SAAR,GAAoB,OAAOP,OAAP,EAAgBQ,QAAhB,EAA0BC,OAA1B,KAAqC;AACrDxB,2BAAmB,CAAC,gBAAD,CAAnB;AACA,eAAO,IAAP;AACH,OAHD;AAIH;;AAED,WAAOe,OAAP;AACH;;AAEDU,qBAAmB;AACf,WAAQ,KAAKlB,aAAL,KAAuBJ,oBAA/B;AACH;;AAlE8C","names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApplicationId","getHost","name","PocketProvider","applicationId","applicationSecret","constructor","_network","network","from","options","staticNetwork","request","getRequest","_getProvider","chainId","error","allowGzip","setCredentials","retryFunc","response","attempt","isCommunityResource"],"sourceRoot":"","sources":["../../src.ts/providers/provider-pocket.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}