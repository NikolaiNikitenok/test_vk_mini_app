{"ast":null,"code":"var _jsxFileName = \"/home/nikolai/GitHub/test_vk_mini_app/test/src/panels/Persik.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ethers } from 'ethers';\nimport { Button, Panel, PanelHeader, PanelHeaderBack } from '@vkontakte/vkui';\nimport persik from '../img/persik.png';\nimport './Persik.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Inventory = () => {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [userBalance, setUserBalance] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      console.log('MetaMask Here!');\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n        getAccountBalance(result[0]);\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  }; // update account, will cause component re-render\n\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n    getAccountBalance(newAccount.toString());\n  };\n\n  const getAccountBalance = account => {\n    window.ethereum.request({\n      method: 'eth_getBalance',\n      params: [account, 'latest']\n    }).then(balance => {\n      setUserBalance(ethers.utils.formatEther(balance));\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const chainChangedHandler = () => {\n    // reload the page to avoid any errors with chain change mid use of application\n    window.location.reload();\n  }; // listen for account changes\n\n\n  window.ethereum.on('accountsChanged', accountChangedHandler);\n  window.ethereum.on('chainChanged', chainChangedHandler);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"walletCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" \", \"Connection to MetaMask using window.ethereum methods\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: connButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accountDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Address: \", defaultAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balanceDisplay\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Balance: \", userBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), errorMessage]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n}; // Inventory.propTypes = {\n// \tid: PropTypes.string.isRequired,\n// \tgo: PropTypes.func.isRequired,\n// };\n\n\n_s(Inventory, \"958uiNd4ZvD4oxPz84YlssYAopU=\");\n\n_c = Inventory;\nexport default Inventory;\n\nvar _c;\n\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"sources":["/home/nikolai/GitHub/test_vk_mini_app/test/src/panels/Persik.js"],"names":["React","useState","useEffect","PropTypes","ethers","Button","Panel","PanelHeader","PanelHeaderBack","persik","Inventory","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","userBalance","setUserBalance","connButtonText","setConnButtonText","connectWalletHandler","window","ethereum","isMetaMask","console","log","request","method","then","result","accountChangedHandler","getAccountBalance","catch","error","message","newAccount","toString","account","params","balance","utils","formatEther","chainChangedHandler","location","reload","on"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {ethers} from 'ethers'\nimport { Button, Panel, PanelHeader, PanelHeaderBack,  } from '@vkontakte/vkui';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst Inventory = () => {\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconsole.log('MetaMask Here!');\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tgetAccountBalance(result[0]);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tgetAccountBalance(newAccount.toString());\n\t}\n\n\tconst getAccountBalance = (account) => {\n\t\twindow.ethereum.request({method: 'eth_getBalance', params: [account, 'latest']})\n\t\t.then(balance => {\n\t\t\tsetUserBalance(ethers.utils.formatEther(balance));\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\t\n\treturn (\n\t\t<div className='walletCard'>\n\t\t<h4> {\"Connection to MetaMask using window.ethereum methods\"} </h4>\n\t\t\t<button onClick={connectWalletHandler}>{connButtonText}</button>\n\t\t\t<div className='accountDisplay'>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div className='balanceDisplay'>\n\t\t\t\t<h3>Balance: {userBalance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t</div>\n\t);\n}\n// Inventory.propTypes = {\n// \tid: PropTypes.string.isRequired,\n// \tgo: PropTypes.func.isRequired,\n// };\n\nexport default Inventory;\n"]},"metadata":{},"sourceType":"module"}