{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"min\", \"max\", \"step\", \"value\", \"defaultValue\", \"onChange\", \"getRootRef\", \"sizeY\", \"disabled\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { Touch } from \"../Touch/Touch\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { rescale } from \"../../helpers/math\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\n\nvar UniversalSliderDumb = function UniversalSliderDumb(_ref) {\n  var _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      step = _ref.step,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? [0, 0] : _ref$value,\n      defaultValue = _ref.defaultValue,\n      onChange = _ref.onChange,\n      getRootRef = _ref.getRootRef,\n      sizeY = _ref.sizeY,\n      disabled = _ref.disabled,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n\n  var _value = _slicedToArray(value, 2),\n      start = _value[0],\n      end = _value[1];\n\n  var isRange = start != null;\n  var gesture = React.useRef({\n    dragging: false,\n    startX: 0,\n    containerWidth: 0\n  }).current;\n  var container = useExternRef(getRootRef);\n  var thumbStart = React.useRef(null);\n  var thumbEnd = React.useRef(null);\n\n  var offsetToValue = function offsetToValue(absolute) {\n    return rescale(absolute, [0, gesture.containerWidth], [min, max], {\n      step: step\n    });\n  };\n\n  var updateRange = function updateRange(nextValue) {\n    if (start == null) {\n      return [null, nextValue];\n    }\n\n    var dragging = gesture.dragging;\n\n    if (dragging === \"start\") {\n      if (nextValue > end) {\n        // \"перехватиться\", если перетянули за конец\n        gesture.dragging = \"end\";\n        return [end, nextValue];\n      }\n\n      return [nextValue, end];\n    }\n\n    if (dragging === \"end\") {\n      if (nextValue < start) {\n        // \"перехватиться\", если перетянули за начало\n        gesture.dragging = \"start\";\n        return [nextValue, start];\n      }\n\n      return [start, nextValue];\n    }\n\n    return value;\n  };\n\n  var snapDirection = function snapDirection(pos, target) {\n    if (target === thumbStart.current) {\n      return \"start\";\n    }\n\n    if (target === thumbEnd.current) {\n      return \"end\";\n    }\n\n    return Math.abs((start !== null && start !== void 0 ? start : 0) - pos) <= Math.abs(end - pos) ? \"start\" : \"end\";\n  };\n\n  var onStart = function onStart(e) {\n    var _container$current, _boundingRect$width, _boundingRect$left;\n\n    var boundingRect = (_container$current = container.current) === null || _container$current === void 0 ? void 0 : _container$current.getBoundingClientRect();\n    gesture.containerWidth = (_boundingRect$width = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.width) !== null && _boundingRect$width !== void 0 ? _boundingRect$width : 0;\n    var absolutePosition = e.startX - ((_boundingRect$left = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.left) !== null && _boundingRect$left !== void 0 ? _boundingRect$left : 0);\n    var pos = offsetToValue(absolutePosition);\n    gesture.dragging = snapDirection(pos, e.originalEvent.target);\n    gesture.startX = absolutePosition;\n    onChange === null || onChange === void 0 ? void 0 : onChange(updateRange(pos), e);\n    e.originalEvent.stopPropagation();\n  };\n\n  var onMove = function onMove(e) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(updateRange(offsetToValue(gesture.startX + (e.shiftX || 0))), e);\n    e.originalEvent.stopPropagation();\n    e.originalEvent.preventDefault();\n  };\n\n  var onEnd = function onEnd(e) {\n    gesture.dragging = false;\n    e.originalEvent.stopPropagation();\n  };\n\n  var toPercent = function toPercent(v) {\n    return (v - min) / (max - min) * 100;\n  };\n\n  var draggerStyle = isRange ? {\n    width: \"\".concat(toPercent(end) - toPercent(start !== null && start !== void 0 ? start : 0), \"%\"),\n    left: \"\".concat(toPercent(start !== null && start !== void 0 ? start : 0), \"%\")\n  } : {\n    width: \"\".concat(toPercent(end), \"%\")\n  };\n  return createScopedElement(Touch, _extends({\n    \"data-value\": isRange ? value.join(\",\") : value\n  }, restProps, disabled ? {} : {\n    onStart: onStart,\n    onMove: onMove,\n    onEnd: onEnd\n  }, {\n    vkuiClass: classNames(getClassName(\"Slider\", platform), \"Slider--sizeY-\".concat(sizeY), disabled && \"Slider--disabled\")\n  }), createScopedElement(\"div\", {\n    ref: container,\n    vkuiClass: \"Slider__in\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"Slider__dragger\",\n    style: draggerStyle\n  }, isRange && createScopedElement(\"span\", {\n    vkuiClass: classNames(\"Slider__thumb\", \"Slider__thumb--start\"),\n    ref: thumbStart\n  }), createScopedElement(\"span\", {\n    vkuiClass: classNames(\"Slider__thumb\", \"Slider__thumb--end\"),\n    ref: thumbEnd\n  }))));\n};\n\nexport var UniversalSlider = withAdaptivity(UniversalSliderDumb, {\n  sizeY: true\n});","map":{"version":3,"mappings":"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","names":["React","Touch","getClassName","classNames","rescale","withAdaptivity","useExternRef","usePlatform","UniversalSliderDumb","min","max","step","value","defaultValue","onChange","getRootRef","sizeY","disabled","restProps","platform","start","end","isRange","gesture","useRef","dragging","startX","containerWidth","current","container","thumbStart","thumbEnd","offsetToValue","absolute","updateRange","nextValue","snapDirection","pos","target","Math","abs","onStart","e","boundingRect","_container$current","getBoundingClientRect","width","absolutePosition","left","originalEvent","stopPropagation","onMove","shiftX","preventDefault","onEnd","toPercent","v","draggerStyle","createScopedElement","join","vkuiClass","ref","style","UniversalSlider"],"sources":["../../../src/components/RangeSlider/UniversalSlider.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Touch, TouchEvent, TouchEventHandler } from \"../Touch/Touch\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { HasRootRef } from \"../../types\";\nimport { rescale } from \"../../helpers/math\";\nimport { withAdaptivity, AdaptivityProps } from \"../../hoc/withAdaptivity\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport \"../Slider/Slider.css\";\n\nexport type UniversalValue = [number | null, number];\n\nexport interface UniversalSliderProps<Value>\n  extends HasRootRef<HTMLDivElement>,\n    Omit<\n      React.HTMLAttributes<HTMLDivElement>,\n      \"value\" | \"defaultValue\" | \"onChange\"\n    >,\n    AdaptivityProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  value?: Value;\n  defaultValue?: Value;\n  disabled?: boolean;\n  onChange?(value: Value, e: TouchEvent): void;\n}\n\nconst UniversalSliderDumb: React.FC<UniversalSliderProps<UniversalValue>> = ({\n  min = 0,\n  max = 100,\n  step,\n  value = [0, 0],\n  defaultValue,\n  onChange,\n  getRootRef,\n  sizeY,\n  disabled,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const [start, end] = value;\n  const isRange = start != null;\n  const gesture = React.useRef({\n    dragging: false as false | \"start\" | \"end\",\n    startX: 0,\n    containerWidth: 0,\n  }).current;\n  const container = useExternRef(getRootRef);\n  const thumbStart = React.useRef<HTMLDivElement>(null);\n  const thumbEnd = React.useRef<HTMLDivElement>(null);\n\n  const offsetToValue = (absolute: number) => {\n    return rescale(absolute, [0, gesture.containerWidth], [min, max], { step });\n  };\n\n  const updateRange = (nextValue: number): UniversalValue => {\n    if (start == null) {\n      return [null, nextValue];\n    }\n\n    const { dragging } = gesture;\n    if (dragging === \"start\") {\n      if (nextValue > end) {\n        // \"перехватиться\", если перетянули за конец\n        gesture.dragging = \"end\";\n        return [end, nextValue];\n      }\n      return [nextValue, end];\n    }\n    if (dragging === \"end\") {\n      if (nextValue < start) {\n        // \"перехватиться\", если перетянули за начало\n        gesture.dragging = \"start\";\n        return [nextValue, start];\n      }\n      return [start, nextValue];\n    }\n\n    return value;\n  };\n\n  const snapDirection = (pos: number, target: EventTarget | null) => {\n    if (target === thumbStart.current) {\n      return \"start\";\n    }\n    if (target === thumbEnd.current) {\n      return \"end\";\n    }\n    return Math.abs((start ?? 0) - pos) <= Math.abs(end - pos)\n      ? \"start\"\n      : \"end\";\n  };\n\n  const onStart: TouchEventHandler = (e: TouchEvent) => {\n    const boundingRect = container.current?.getBoundingClientRect();\n    gesture.containerWidth = boundingRect?.width ?? 0;\n\n    const absolutePosition = e.startX - (boundingRect?.left ?? 0);\n    const pos = offsetToValue(absolutePosition);\n    gesture.dragging = snapDirection(pos, e.originalEvent.target);\n    gesture.startX = absolutePosition;\n\n    onChange?.(updateRange(pos), e);\n    e.originalEvent.stopPropagation();\n  };\n\n  const onMove: TouchEventHandler = (e: TouchEvent) => {\n    onChange?.(updateRange(offsetToValue(gesture.startX + (e.shiftX || 0))), e);\n\n    e.originalEvent.stopPropagation();\n    e.originalEvent.preventDefault();\n  };\n\n  const onEnd: TouchEventHandler = (e) => {\n    gesture.dragging = false;\n    e.originalEvent.stopPropagation();\n  };\n\n  const toPercent = (v: number) => ((v - min) / (max - min)) * 100;\n  const draggerStyle = isRange\n    ? {\n        width: `${toPercent(end) - toPercent(start ?? 0)}%`,\n        left: `${toPercent(start ?? 0)}%`,\n      }\n    : {\n        width: `${toPercent(end)}%`,\n      };\n\n  return (\n    <Touch\n      data-value={isRange ? value.join(\",\") : value}\n      {...restProps}\n      {...(disabled ? {} : { onStart, onMove, onEnd })}\n      vkuiClass={classNames(\n        getClassName(\"Slider\", platform),\n        `Slider--sizeY-${sizeY}`,\n        disabled && \"Slider--disabled\"\n      )}\n    >\n      <div ref={container} vkuiClass=\"Slider__in\">\n        <div vkuiClass=\"Slider__dragger\" style={draggerStyle}>\n          {isRange && (\n            <span\n              vkuiClass={classNames(\"Slider__thumb\", \"Slider__thumb--start\")}\n              ref={thumbStart}\n            />\n          )}\n          <span\n            vkuiClass={classNames(\"Slider__thumb\", \"Slider__thumb--end\")}\n            ref={thumbEnd}\n          />\n        </div>\n      </div>\n    </Touch>\n  );\n};\n\nexport const UniversalSlider = withAdaptivity(UniversalSliderDumb, {\n  sizeY: true,\n});\n"]},"metadata":{},"sourceType":"module"}