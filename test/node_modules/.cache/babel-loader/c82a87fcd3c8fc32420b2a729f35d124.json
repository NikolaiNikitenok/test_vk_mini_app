{"ast":null,"code":"/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\nlet locked = false;\n\nconst _randomBytes = function (length) {\n  return new Uint8Array(crypto_random(length));\n};\n\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\n\nexport function randomBytes(length) {\n  return __randomBytes(length);\n}\nrandomBytes._ = _randomBytes;\n\nrandomBytes.lock = function () {\n  locked = true;\n};\n\nrandomBytes.register = function (func) {\n  if (locked) {\n    throw new Error(\"randomBytes is locked\");\n  }\n\n  __randomBytes = func;\n};\n\nObject.freeze(randomBytes);","map":{"version":3,"mappings":"AAAA;;;;;;;;AAQA,SAASA,WAAW,IAAIC,aAAxB,QAA6C,aAA7C;AAEA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,YAAY,GAAG,UAASC,MAAT,EAAuB;AACxC,SAAO,IAAIC,UAAJ,CAAeJ,aAAa,CAACG,MAAD,CAA5B,CAAP;AACH,CAFD;;AAIA,IAAIE,aAAa,GAAGH,YAApB;AAEA;;;;;;;;AAOA,OAAM,SAAUH,WAAV,CAAsBI,MAAtB,EAAoC;AACtC,SAAOE,aAAa,CAACF,MAAD,CAApB;AACH;AAEDJ,WAAW,CAACO,CAAZ,GAAgBJ,YAAhB;;AACAH,WAAW,CAACQ,IAAZ,GAAmB;AAAmBN,QAAM,GAAG,IAAT;AAAgB,CAAtD;;AACAF,WAAW,CAACS,QAAZ,GAAuB,UAASC,IAAT,EAA6C;AAChE,MAAIR,MAAJ,EAAY;AAAE,UAAM,IAAIS,KAAJ,CAAU,uBAAV,CAAN;AAA2C;;AACzDL,eAAa,GAAGI,IAAhB;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcb,WAAd","names":["randomBytes","crypto_random","locked","_randomBytes","length","Uint8Array","__randomBytes","_","lock","register","func","Error","Object","freeze"],"sourceRoot":"","sources":["../../src.ts/crypto/random.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}