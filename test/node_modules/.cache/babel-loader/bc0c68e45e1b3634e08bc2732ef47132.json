{"ast":null,"code":"/**\r\n *  About fixed-point math...\r\n *\r\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\r\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport { getBigInt, fromTwos, mask, toBigInt } from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {}; // Constant to pull zeros from for multipliers\n\nlet Zeros = \"0000\";\n\nwhile (Zeros.length < 80) {\n  Zeros += Zeros;\n} // Returns a string \"1\" followed by decimal \"0\"s\n\n\nfunction getTens(decimals) {\n  let result = Zeros;\n\n  while (result.length < decimals) {\n    result += result;\n  }\n\n  return BigInt(\"1\" + result.substring(0, decimals));\n}\n\nfunction checkValue(val, format, safeOp) {\n  const width = BigInt(format.width);\n\n  if (format.signed) {\n    const limit = BN_1 << width - BN_1;\n    assert(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n\n    if (val > BN_0) {\n      val = fromTwos(mask(val, width), width);\n    } else {\n      val = -fromTwos(mask(-val, width), width);\n    }\n  } else {\n    const limit = BN_1 << width;\n    assert(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    val = (val % limit + limit) % limit & limit - BN_1;\n  }\n\n  return val;\n}\n\nfunction getFormat(value) {\n  if (typeof value === \"number\") {\n    value = `fixed128x${value}`;\n  }\n\n  let signed = true;\n  let width = 128;\n  let decimals = 18;\n\n  if (typeof value === \"string\") {\n    // Parse the format string\n    if (value === \"fixed\") {// defaults...\n    } else if (value === \"ufixed\") {\n      signed = false;\n    } else {\n      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n      assertArgument(match, \"invalid fixed format\", \"format\", value);\n      signed = match[1] !== \"u\";\n      width = parseInt(match[2]);\n      decimals = parseInt(match[3]);\n    }\n  } else if (value) {\n    // Extract the values from the object\n    const v = value;\n\n    const check = (key, type, defaultValue) => {\n      if (v[key] == null) {\n        return defaultValue;\n      }\n\n      assertArgument(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n      return v[key];\n    };\n\n    signed = check(\"signed\", \"boolean\", signed);\n    width = check(\"width\", \"number\", width);\n    decimals = check(\"decimals\", \"number\", decimals);\n  }\n\n  assertArgument(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n  assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n  const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n  return {\n    signed,\n    width,\n    decimals,\n    name\n  };\n}\n\nfunction toString(val, decimals) {\n  let negative = \"\";\n\n  if (val < BN_0) {\n    negative = \"-\";\n    val *= BN_N1;\n  }\n\n  let str = val.toString(); // No decimal point for whole values\n\n  if (decimals === 0) {\n    return negative + str;\n  } // Pad out to the whole component (including a whole digit)\n\n\n  while (str.length <= decimals) {\n    str = Zeros + str;\n  } // Insert the decimal point\n\n\n  const index = str.length - decimals;\n  str = str.substring(0, index) + \".\" + str.substring(index); // Trim the whole component (leaving at least one 0)\n\n  while (str[0] === \"0\" && str[1] !== \".\") {\n    str = str.substring(1);\n  } // Trim the decimal component (leaving at least one 0)\n\n\n  while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n    str = str.substring(0, str.length - 1);\n  }\n\n  return negative + str;\n}\n/**\r\n *  A FixedNumber represents a value over its [[FixedFormat]]\r\n *  arithmetic field.\r\n *\r\n *  A FixedNumber can be used to perform math, losslessly, on\r\n *  values which have decmial places.\r\n *\r\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\r\n *  values internally by multiplying the value by 10 raised to the power of\r\n *  %%decimals%%.\r\n *\r\n *  If operations are performed that cause a value to grow too high (close to\r\n *  positive infinity) or too low (close to negative infinity), the value\r\n *  is said to //overflow//.\r\n *\r\n *  For example, an 8-bit signed value, with 0 decimals may only be within\r\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\r\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\r\n *\r\n *  Many operation have a normal and //unsafe// variant. The normal variant\r\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\r\n *  variant will silently allow overflow, corrupting its value value.\r\n *\r\n *  If operations are performed that cause a value to become too small\r\n *  (close to zero), the value loses precison and is said to //underflow//.\r\n *\r\n *  For example, an value with 1 decimal place may store a number as small\r\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\r\n *  into 1 decimal place, so underflow occurs which means precision is lost\r\n *  and the value becomes ``0``.\r\n *\r\n *  Some operations have a normal and //signalling// variant. The normal\r\n *  variant will silently ignore underflow, while the //signalling// variant\r\n *  will thow a [[NumericFaultError]] on underflow.\r\n */\n\n\nexport class FixedNumber {\n  /**\r\n   *  The specific fixed-point arithmetic field for this value.\r\n   */\n  format;\n  #format; // The actual value (accounting for decimals)\n\n  #val; // A base-10 value to multiple values by to maintain the magnitude\n\n  #tens;\n  /**\r\n   *  This is a property so console.log shows a human-meaningful value.\r\n   *\r\n   *  @private\r\n   */\n\n  _value; // Use this when changing this file to get some typing info,\n  // but then switch to any to mask the internal type\n  //constructor(guard: any, value: bigint, format: _FixedFormat) {\n\n  /**\r\n   *  @private\r\n   */\n\n  constructor(guard, value, format) {\n    assertPrivate(guard, _guard, \"FixedNumber\");\n    this.#val = value;\n    this.#format = format;\n\n    const _value = toString(value, format.decimals);\n\n    defineProperties(this, {\n      format: format.name,\n      _value\n    });\n    this.#tens = getTens(format.decimals);\n  }\n  /**\r\n   *  If true, negative values are permitted, otherwise only\r\n   *  positive values and zero are allowed.\r\n   */\n\n\n  get signed() {\n    return this.#format.signed;\n  }\n  /**\r\n   *  The number of bits available to store the value.\r\n   */\n\n\n  get width() {\n    return this.#format.width;\n  }\n  /**\r\n   *  The number of decimal places in the fixed-point arithment field.\r\n   */\n\n\n  get decimals() {\n    return this.#format.decimals;\n  }\n  /**\r\n   *  The value as an integer, based on the smallest unit the\r\n   *  [[decimals]] allow.\r\n   */\n\n\n  get value() {\n    return this.#val;\n  }\n\n  #checkFormat(other) {\n    assertArgument(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n  }\n\n  #checkValue(val, safeOp) {\n    /*\r\n            const width = BigInt(this.width);\r\n            if (this.signed) {\r\n                const limit = (BN_1 << (width - BN_1));\r\n                assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\r\n                    operation: <string>safeOp, fault: \"overflow\", value: val\r\n                });\r\n    \r\n                if (val > BN_0) {\r\n                    val = fromTwos(mask(val, width), width);\r\n                } else {\r\n                    val = -fromTwos(mask(-val, width), width);\r\n                }\r\n    \r\n            } else {\r\n                const masked = mask(val, width);\r\n                assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\r\n                    operation: <string>safeOp, fault: \"overflow\", value: val\r\n                });\r\n                val = masked;\r\n            }\r\n    */\n    val = checkValue(val, this.#format, safeOp);\n    return new FixedNumber(_guard, val, this.#format);\n  }\n\n  #add(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val + o.#val, safeOp);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\r\n   *  to %%other%%, ignoring overflow.\r\n   */\n\n\n  addUnsafe(other) {\n    return this.#add(other);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\r\n   *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n   *  occurs.\r\n   */\n\n\n  add(other) {\n    return this.#add(other, \"add\");\n  }\n\n  #sub(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val - o.#val, safeOp);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\r\n   *  from %%this%%, ignoring overflow.\r\n   */\n\n\n  subUnsafe(other) {\n    return this.#sub(other);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\r\n   *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\r\n   *  occurs.\r\n   */\n\n\n  sub(other) {\n    return this.#sub(other, \"sub\");\n  }\n\n  #mul(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n   *  by %%other%%, ignoring overflow and underflow (precision loss).\r\n   */\n\n\n  mulUnsafe(other) {\n    return this.#mul(other);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n   *  occurs.\r\n   */\n\n\n  mul(other) {\n    return this.#mul(other, \"mul\");\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n   *  occurs or if underflow (precision loss) occurs.\r\n   */\n\n\n  mulSignal(other) {\n    this.#checkFormat(other);\n    const value = this.#val * other.#val;\n    assert(value % this.#tens === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n      operation: \"mulSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return this.#checkValue(value / this.#tens, \"mulSignal\");\n  }\n\n  #div(o, safeOp) {\n    assert(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n   *  by %%other%%, ignoring underflow (precision loss). A\r\n   *  [[NumericFaultError]] is thrown if overflow occurs.\r\n   */\n\n\n  divUnsafe(other) {\n    return this.#div(other);\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n   *  by %%other%%, ignoring underflow (precision loss). A\r\n   *  [[NumericFaultError]] is thrown if overflow occurs.\r\n   */\n\n\n  div(other) {\n    return this.#div(other, \"div\");\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n   *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\r\n   *  (precision loss) occurs.\r\n   */\n\n\n  divSignal(other) {\n    assert(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    this.#checkFormat(other);\n    const value = this.#val * this.#tens;\n    assert(value % other.#val === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n      operation: \"divSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return this.#checkValue(value / other.#val, \"divSignal\");\n  }\n  /**\r\n   *  Returns a comparison result between %%this%% and %%other%%.\r\n   *\r\n   *  This is suitable for use in sorting, where ``-1`` implies %%this%%\r\n   *  is smaller, ``1`` implies %%other%% is larger and ``0`` implies\r\n   *  both are equal.\r\n   */\n\n\n  cmp(other) {\n    let a = this.value,\n        b = other.value; // Coerce a and b to the same magnitude\n\n    const delta = this.decimals - other.decimals;\n\n    if (delta > 0) {\n      b *= getTens(delta);\n    } else if (delta < 0) {\n      a *= getTens(-delta);\n    } // Comnpare\n\n\n    if (a < b) {\n      return -1;\n    }\n\n    if (a > b) {\n      return -1;\n    }\n\n    return 0;\n  }\n  /**\r\n   *  Returns true if %%other%% is equal to %%this%%.\r\n   */\n\n\n  eq(other) {\n    return this.cmp(other) === 0;\n  }\n  /**\r\n   *  Returns true if %%other%% is less than to %%this%%.\r\n   */\n\n\n  lt(other) {\n    return this.cmp(other) < 0;\n  }\n  /**\r\n   *  Returns true if %%other%% is less than or equal to %%this%%.\r\n   */\n\n\n  lte(other) {\n    return this.cmp(other) <= 0;\n  }\n  /**\r\n   *  Returns true if %%other%% is greater than to %%this%%.\r\n   */\n\n\n  gt(other) {\n    return this.cmp(other) > 0;\n  }\n  /**\r\n   *  Returns true if %%other%% is greater than or equal to %%this%%.\r\n   */\n\n\n  gte(other) {\n    return this.cmp(other) >= 0;\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] which is the largest **integer**\r\n   *  that is less than or equal to %%this%%.\r\n   *\r\n   *  The decimal component of the result will always be ``0``.\r\n   */\n\n\n  floor() {\n    let val = this.#val;\n\n    if (this.#val < BN_0) {\n      val -= this.#tens - BN_1;\n    }\n\n    val = this.#val / this.#tens * this.#tens;\n    return this.#checkValue(val, \"floor\");\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] which is the smallest **integer**\r\n   *  that is greater than or equal to %%this%%.\r\n   *\r\n   *  The decimal component of the result will always be ``0``.\r\n   */\n\n\n  ceiling() {\n    let val = this.#val;\n\n    if (this.#val > BN_0) {\n      val += this.#tens - BN_1;\n    }\n\n    val = this.#val / this.#tens * this.#tens;\n    return this.#checkValue(val, \"ceiling\");\n  }\n  /**\r\n   *  Returns a new [[FixedNumber]] with the decimal component\r\n   *  rounded up on ties at %%decimals%% places.\r\n   */\n\n\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    } // Not enough precision to not already be rounded\n\n\n    if (decimals >= this.decimals) {\n      return this;\n    }\n\n    const delta = this.decimals - decimals;\n    const bump = BN_5 * getTens(delta - 1);\n    let value = this.value + bump;\n    const tens = getTens(delta);\n    value = value / tens * tens;\n    checkValue(value, this.#format, \"round\");\n    return new FixedNumber(_guard, value, this.#format);\n  }\n  /**\r\n   *  Returns true if %%this%% is equal to ``0``.\r\n   */\n\n\n  isZero() {\n    return this.#val === BN_0;\n  }\n  /**\r\n   *  Returns true if %%this%% is less than ``0``.\r\n   */\n\n\n  isNegative() {\n    return this.#val < BN_0;\n  }\n  /**\r\n   *  Returns the string representation of %%this%%.\r\n   */\n\n\n  toString() {\n    return this._value;\n  }\n  /**\r\n   *  Returns a float approximation.\r\n   *\r\n   *  Due to IEEE 754 precission (or lack thereof), this function\r\n   *  can only return an approximation and most values will contain\r\n   *  rounding errors.\r\n   */\n\n\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n  /**\r\n   *  Return a new [[FixedNumber]] with the same value but has had\r\n   *  its field set to %%format%%.\r\n   *\r\n   *  This will throw if the value cannot fit into %%format%%.\r\n   */\n\n\n  toFormat(format) {\n    return FixedNumber.fromString(this.toString(), format);\n  }\n  /**\r\n   *  Creates a new [[FixedNumber]] for %%value%% divided by\r\n   *  %%decimal%% places with %%format%%.\r\n   *\r\n   *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\r\n   *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\r\n   *  or underflow (precision loss).\r\n   */\n\n\n  static fromValue(_value, decimals, _format) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n\n    const format = getFormat(_format);\n    let value = getBigInt(_value, \"value\");\n    const delta = decimals - format.decimals;\n\n    if (delta > 0) {\n      const tens = getTens(delta);\n      assert(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n        operation: \"fromValue\",\n        fault: \"underflow\",\n        value: _value\n      });\n      value /= tens;\n    } else if (delta < 0) {\n      value *= getTens(-delta);\n    }\n\n    checkValue(value, format, \"fromValue\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\r\n   *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\r\n   *\r\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\r\n   *  in %%format%%, either due to overflow or underflow (precision loss).\r\n   */\n\n\n  static fromString(_value, _format) {\n    const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n\n    assertArgument(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n    const format = getFormat(_format);\n    let whole = match[2] || \"0\",\n        decimal = match[3] || \"\"; // Pad out the decimals\n\n    while (decimal.length < format.decimals) {\n      decimal += Zeros;\n    } // Check precision is safe\n\n\n    assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n      operation: \"fromString\",\n      fault: \"underflow\",\n      value: _value\n    }); // Remove extra padding\n\n    decimal = decimal.substring(0, format.decimals);\n    const value = BigInt(match[1] + whole + decimal);\n    checkValue(value, format, \"fromString\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\r\n   *  Creates a new [[FixedNumber]] with the big-endian representation\r\n   *  %%value%% with %%format%%.\r\n   *\r\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\r\n   *  in %%format%% due to overflow.\r\n   */\n\n\n  static fromBytes(_value, _format) {\n    let value = toBigInt(getBytes(_value, \"value\"));\n    const format = getFormat(_format);\n\n    if (format.signed) {\n      value = fromTwos(value, format.width);\n    }\n\n    checkValue(value, format, \"fromBytes\");\n    return new FixedNumber(_guard, value, format);\n  }\n\n} //const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"mappings":"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","names":["getBytes","assert","assertArgument","assertPrivate","getBigInt","fromTwos","mask","toBigInt","defineProperties","BN_N1","BigInt","BN_0","BN_1","BN_5","_guard","Zeros","length","getTens","decimals","result","substring","checkValue","val","format","safeOp","width","signed","limit","operation","fault","value","getFormat","match","parseInt","v","check","key","type","defaultValue","name","String","toString","negative","str","index","FixedNumber","_value","constructor","guard","other","o","addUnsafe","add","subUnsafe","sub","mulUnsafe","mul","mulSignal","divUnsafe","div","divSignal","cmp","a","b","delta","eq","lt","lte","gt","gte","floor","ceiling","round","bump","tens","isZero","isNegative","toUnsafeFloat","parseFloat","toFormat","fromString","fromValue","_format","whole","decimal","fromBytes"],"sourceRoot":"","sources":["../../src.ts/utils/fixednumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}