{"ast":null,"code":"/**\r\n *  [[link-ankr]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\r\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n  }\n\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\r\n *  The **AnkrProvider** connects to the [[link-ankr]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-ankr-signup).\r\n */\n\n\nexport class AnkrProvider extends JsonRpcProvider {\n  /**\r\n   *  The API key for the Ankr connection.\r\n   */\n  apiKey;\n  /**\r\n   *  Create a new **AnkrProvider**.\r\n   *\r\n   *  By default connecting to ``mainnet`` with a highly throttled\r\n   *  API key.\r\n   */\n\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n\n    const network = Network.from(_network);\n\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    } // Ankr does not support filterId, so we force polling\n\n\n    const options = {\n      polling: true,\n      staticNetwork: network\n    };\n    const request = AnkrProvider.getRequest(network, apiKey);\n    super(request, network, options);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n\n  _getProvider(chainId) {\n    try {\n      return new AnkrProvider(chainId, this.apiKey);\n    } catch (error) {}\n\n    return super._getProvider(chainId);\n  }\n  /**\r\n   *  Returns a prepared request for connecting to %%network%% with\r\n   *  %%apiKey%%.\r\n   */\n\n\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"AnkrProvider\");\n        return true;\n      };\n    }\n\n    return request;\n  }\n\n  getRpcError(payload, error) {\n    if (payload.method === \"eth_sendRawTransaction\") {\n      if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n        error.error.message = \"replacement transaction underpriced\";\n      }\n    }\n\n    return super.getRpcError(payload, error);\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;AAaA,SACIA,gBADJ,EACsBC,YADtB,EACoCC,cADpC,QAEO,mBAFP;AAKA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAOA,MAAMC,aAAa,GAAG,kEAAtB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAA6B;AACzB,UAAQA,IAAR;AACI,SAAK,SAAL;AACI,aAAO,kBAAP;;AACJ,SAAK,QAAL;AACI,aAAO,yBAAP;;AACJ,SAAK,OAAL;AACI,aAAO,sBAAP;;AACJ,SAAK,UAAL;AACI,aAAO,uBAAP;AARR;;AAWAN,gBAAc,CAAC,KAAD,EAAQ,qBAAR,EAA+B,SAA/B,EAA0CM,IAA1C,CAAd;AACH;AAGD;;;;;;;;;;;AASA,OAAM,MAAOC,YAAP,SAA4BJ,eAA5B,CAA2C;AAE7C;;;AAGSK,QAAM;AAEf;;;;;;;AAMAC,cAAYC,QAAZ,EAAmCF,MAAnC,EAAyD;AACrD,QAAIE,QAAQ,IAAI,IAAhB,EAAsB;AAAEA,cAAQ,GAAG,SAAX;AAAuB;;AAC/C,UAAMC,OAAO,GAAGT,OAAO,CAACU,IAAR,CAAaF,QAAb,CAAhB;;AACA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAAEA,YAAM,GAAGJ,aAAT;AAAyB,KAHM,CAKrD;;;AACA,UAAMS,OAAO,GAAG;AAAEC,aAAO,EAAE,IAAX;AAAiBC,mBAAa,EAAEJ;AAAhC,KAAhB;AAEA,UAAMK,OAAO,GAAGT,YAAY,CAACU,UAAb,CAAwBN,OAAxB,EAAiCH,MAAjC,CAAhB;AACA,UAAMQ,OAAN,EAAeL,OAAf,EAAwBE,OAAxB;AAEAf,oBAAgB,CAAe,IAAf,EAAqB;AAAEU;AAAF,KAArB,CAAhB;AACH;;AAEDU,cAAY,CAACC,OAAD,EAAgB;AACxB,QAAI;AACA,aAAO,IAAIZ,YAAJ,CAAiBY,OAAjB,EAA0B,KAAKX,MAA/B,CAAP;AACH,KAFD,CAEE,OAAOY,KAAP,EAAc,CAAG;;AACnB,WAAO,MAAMF,YAAN,CAAmBC,OAAnB,CAAP;AACH;AAED;;;;;;AAIiB,SAAVF,UAAU,CAACN,OAAD,EAAmBH,MAAnB,EAAyC;AACtD,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAAEA,YAAM,GAAGJ,aAAT;AAAyB;;AAE/C,UAAMY,OAAO,GAAG,IAAIjB,YAAJ,CAAiB,YAAaM,OAAO,CAACM,OAAO,CAACL,IAAT,CAAe,IAAKE,MAAO,EAAhE,CAAhB;AACAQ,WAAO,CAACK,SAAR,GAAoB,IAApB;;AAEA,QAAIb,MAAM,KAAKJ,aAAf,EAA8B;AAC1BY,aAAO,CAACM,SAAR,GAAoB,OAAON,OAAP,EAAgBO,QAAhB,EAA0BC,OAA1B,KAAqC;AACrDvB,2BAAmB,CAAC,cAAD,CAAnB;AACA,eAAO,IAAP;AACH,OAHD;AAIH;;AAED,WAAOe,OAAP;AACH;;AAEDS,aAAW,CAACC,OAAD,EAA0BN,KAA1B,EAA6C;AACpD,QAAIM,OAAO,CAACC,MAAR,KAAmB,wBAAvB,EAAiD;AAC7C,UAAIP,KAAK,IAAIA,KAAK,CAACA,KAAf,IAAwBA,KAAK,CAACA,KAAN,CAAYQ,OAAZ,KAAwB,+CAApD,EAAqG;AACjGR,aAAK,CAACA,KAAN,CAAYQ,OAAZ,GAAsB,qCAAtB;AACH;AACJ;;AAED,WAAO,MAAMH,WAAN,CAAkBC,OAAlB,EAA2BN,KAA3B,CAAP;AACH;;AAEDS,qBAAmB;AACf,WAAQ,KAAKrB,MAAL,KAAgBJ,aAAxB;AACH;;AAlE4C","names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AnkrProvider","apiKey","constructor","_network","network","from","options","polling","staticNetwork","request","getRequest","_getProvider","chainId","error","allowGzip","retryFunc","response","attempt","getRpcError","payload","method","message","isCommunityResource"],"sourceRoot":"","sources":["../../src.ts/providers/provider-ankr.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}