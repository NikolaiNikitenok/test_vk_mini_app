{"ast":null,"code":"import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\nlet lockedSync = false,\n    lockedAsync = false;\n\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\n  return await _nobleAsync(passwd, salt, {\n    N,\n    r,\n    p,\n    dkLen,\n    onProgress\n  });\n};\n\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\n  return _nobleSync(passwd, salt, {\n    N,\n    r,\n    p,\n    dkLen\n  });\n};\n\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\n\nexport async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n  const passwd = getBytes(_passwd, \"passwd\");\n  const salt = getBytes(_salt, \"salt\");\n  return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\n\nscrypt.lock = function () {\n  lockedAsync = true;\n};\n\nscrypt.register = function (func) {\n  if (lockedAsync) {\n    throw new Error(\"scrypt is locked\");\n  }\n\n  __scryptAsync = func;\n};\n\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\n\nexport function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n  const passwd = getBytes(_passwd, \"passwd\");\n  const salt = getBytes(_salt, \"salt\");\n  return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\n\nscryptSync.lock = function () {\n  lockedSync = true;\n};\n\nscryptSync.register = function (func) {\n  if (lockedSync) {\n    throw new Error(\"scryptSync is locked\");\n  }\n\n  __scryptSync = func;\n};\n\nObject.freeze(scryptSync);","map":{"version":3,"mappings":"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","names":["scrypt","_nobleSync","scryptAsync","_nobleAsync","getBytes","hexlify","H","lockedSync","lockedAsync","_scryptAsync","passwd","salt","N","r","p","dkLen","onProgress","_scryptSync","__scryptAsync","__scryptSync","_passwd","_salt","progress","_","lock","register","func","Error","Object","freeze","scryptSync"],"sourceRoot":"","sources":["../../src.ts/crypto/scrypt.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}