{"ast":null,"code":"import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nconst _sha256 = function (data) {\n  return createHash(\"sha256\").update(data).digest();\n};\n\nconst _sha512 = function (data) {\n  return createHash(\"sha512\").update(data).digest();\n};\n\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false,\n    locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\n\nexport function sha256(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\n\nsha256.lock = function () {\n  locked256 = true;\n};\n\nsha256.register = function (func) {\n  if (locked256) {\n    throw new Error(\"sha256 is locked\");\n  }\n\n  __sha256 = func;\n};\n\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\n\nexport function sha512(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\n\nsha512.lock = function () {\n  locked512 = true;\n};\n\nsha512.register = function (func) {\n  if (locked512) {\n    throw new Error(\"sha512 is locked\");\n  }\n\n  __sha512 = func;\n};\n\nObject.freeze(sha256);","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AAEA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;;AAKA,MAAMC,OAAO,GAAG,UAASC,IAAT,EAAyB;AACrC,SAAOJ,UAAU,CAAC,QAAD,CAAV,CAAqBK,MAArB,CAA4BD,IAA5B,EAAkCE,MAAlC,EAAP;AACH,CAFD;;AAIA,MAAMC,OAAO,GAAG,UAASH,IAAT,EAAyB;AACrC,SAAOJ,UAAU,CAAC,QAAD,CAAV,CAAqBK,MAArB,CAA4BD,IAA5B,EAAkCE,MAAlC,EAAP;AACH,CAFD;;AAIA,IAAIE,QAAQ,GAAoCL,OAAhD;AACA,IAAIM,QAAQ,GAAoCF,OAAhD;AAEA,IAAIG,SAAS,GAAG,KAAhB;AAAA,IAAuBC,SAAS,GAAG,KAAnC;AAGA;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,MAAV,CAAiBC,KAAjB,EAAiC;AACnC,QAAMT,IAAI,GAAGH,QAAQ,CAACY,KAAD,EAAQ,MAAR,CAArB;AACA,SAAOX,OAAO,CAACM,QAAQ,CAACJ,IAAD,CAAT,CAAd;AACH;AACDQ,MAAM,CAACE,CAAP,GAAWX,OAAX;;AACAS,MAAM,CAACG,IAAP,GAAc;AAAmBL,WAAS,GAAG,IAAZ;AAAmB,CAApD;;AACAE,MAAM,CAACI,QAAP,GAAkB,UAASC,IAAT,EAA8C;AAC5D,MAAIP,SAAJ,EAAe;AAAE,UAAM,IAAIQ,KAAJ,CAAU,kBAAV,CAAN;AAAsC;;AACvDV,UAAQ,GAAGS,IAAX;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcR,MAAd;AAGA;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUS,MAAV,CAAiBR,KAAjB,EAAiC;AACnC,QAAMT,IAAI,GAAGH,QAAQ,CAACY,KAAD,EAAQ,MAAR,CAArB;AACA,SAAOX,OAAO,CAACO,QAAQ,CAACL,IAAD,CAAT,CAAd;AACH;AACDiB,MAAM,CAACP,CAAP,GAAWP,OAAX;;AACAc,MAAM,CAACN,IAAP,GAAc;AAAmBJ,WAAS,GAAG,IAAZ;AAAmB,CAApD;;AACAU,MAAM,CAACL,QAAP,GAAkB,UAASC,IAAT,EAA8C;AAC5D,MAAIN,SAAJ,EAAe;AAAE,UAAM,IAAIO,KAAJ,CAAU,kBAAV,CAAN;AAAsC;;AACvDT,UAAQ,GAAGQ,IAAX;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcR,MAAd","names":["createHash","getBytes","hexlify","_sha256","data","update","digest","_sha512","__sha256","__sha512","locked256","locked512","sha256","_data","_","lock","register","func","Error","Object","freeze","sha512"],"sourceRoot":"","sources":["../../src.ts/crypto/sha2.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}