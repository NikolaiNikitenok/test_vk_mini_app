{"ast":null,"code":"/**\n *  About Subclassing the Provider...\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroHash } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { concat, dataLength, dataSlice, hexlify, isHexString, getBigInt, getBytes, getNumber, isCallException, makeError, assert, assertArgument, FetchRequest, toBeArray, toQuantity, defineProperties, EventPayload, resolveProperties, toUtf8String } from \"../utils/index.js\";\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport { formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse } from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport { PollingBlockSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber } from \"./subscriber-polling.js\"; // Constants\n\nconst BN_2 = BigInt(2);\nconst MAX_CCIP_REDIRECTS = 10;\n\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\n\nfunction getTag(prefix, value) {\n  return prefix + \":\" + JSON.stringify(value, (k, v) => {\n    if (v == null) {\n      return \"null\";\n    }\n\n    if (typeof v === \"bigint\") {\n      return `bigint:${v.toString()}`;\n    }\n\n    if (typeof v === \"string\") {\n      return v.toLowerCase();\n    } // Sort object keys\n\n\n    if (typeof v === \"object\" && !Array.isArray(v)) {\n      const keys = Object.keys(v);\n      keys.sort();\n      return keys.reduce((accum, key) => {\n        accum[key] = v[key];\n        return accum;\n      }, {});\n    }\n\n    return v;\n  });\n}\n\nexport class UnmanagedSubscriber {\n  name;\n\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n\n  start() {}\n\n  stop() {}\n\n  pause(dropWhilePaused) {}\n\n  resume() {}\n\n}\n\nfunction copy(value) {\n  return JSON.parse(JSON.stringify(value));\n}\n\nfunction concisify(items) {\n  items = Array.from(new Set(items).values());\n  items.sort();\n  return items;\n}\n\nasync function getSubscription(_event, provider) {\n  if (_event == null) {\n    throw new Error(\"invalid event\");\n  } // Normalize topic array info an EventFilter\n\n\n  if (Array.isArray(_event)) {\n    _event = {\n      topics: _event\n    };\n  }\n\n  if (typeof _event === \"string\") {\n    switch (_event) {\n      case \"block\":\n      case \"pending\":\n      case \"debug\":\n      case \"network\":\n        {\n          return {\n            type: _event,\n            tag: _event\n          };\n        }\n    }\n  }\n\n  if (isHexString(_event, 32)) {\n    const hash = _event.toLowerCase();\n\n    return {\n      type: \"transaction\",\n      tag: getTag(\"tx\", {\n        hash\n      }),\n      hash\n    };\n  }\n\n  if (_event.orphan) {\n    const event = _event; // @TODO: Should lowercase and whatnot things here instead of copy...\n\n    return {\n      type: \"orphan\",\n      tag: getTag(\"orphan\", event),\n      filter: copy(event)\n    };\n  }\n\n  if (_event.address || _event.topics) {\n    const event = _event;\n    const filter = {\n      topics: (event.topics || []).map(t => {\n        if (t == null) {\n          return null;\n        }\n\n        if (Array.isArray(t)) {\n          return concisify(t.map(t => t.toLowerCase()));\n        }\n\n        return t.toLowerCase();\n      })\n    };\n\n    if (event.address) {\n      const addresses = [];\n      const promises = [];\n\n      const addAddress = addr => {\n        if (isHexString(addr)) {\n          addresses.push(addr);\n        } else {\n          promises.push((async () => {\n            addresses.push(await resolveAddress(addr, provider));\n          })());\n        }\n      };\n\n      if (Array.isArray(event.address)) {\n        event.address.forEach(addAddress);\n      } else {\n        addAddress(event.address);\n      }\n\n      if (promises.length) {\n        await Promise.all(promises);\n      }\n\n      filter.address = concisify(addresses.map(a => a.toLowerCase()));\n    }\n\n    return {\n      filter,\n      tag: getTag(\"event\", filter),\n      type: \"event\"\n    };\n  }\n\n  assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nexport class AbstractProvider {\n  #subs;\n  #plugins; // null=unpaused, true=paused+dropWhilePaused, false=paused\n\n  #pausedState;\n  #networkPromise;\n  #anyNetwork;\n  #performCache; // The most recent block number if running an event or -1 if no \"block\" event\n\n  #lastBlockNumber;\n  #nextTimer;\n  #timers;\n  #disableCcipRead; // @TODO: This should be a () => Promise<Network> so network can be\n  // done when needed; or rely entirely on _detectNetwork?\n\n  constructor(_network) {\n    if (_network === \"any\") {\n      this.#anyNetwork = true;\n      this.#networkPromise = null;\n    } else if (_network) {\n      const network = Network.from(_network);\n      this.#anyNetwork = false;\n      this.#networkPromise = Promise.resolve(network);\n      setTimeout(() => {\n        this.emit(\"network\", network, null);\n      }, 0);\n    } else {\n      this.#anyNetwork = false;\n      this.#networkPromise = null;\n    }\n\n    this.#lastBlockNumber = -1;\n    this.#performCache = new Map();\n    this.#subs = new Map();\n    this.#plugins = new Map();\n    this.#pausedState = null;\n    this.#nextTimer = 1;\n    this.#timers = new Map();\n    this.#disableCcipRead = false;\n  }\n\n  get provider() {\n    return this;\n  }\n\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n\n    this.#plugins.set(plugin.name, plugin.connect(this));\n    return this;\n  }\n\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n\n  get disableCcipRead() {\n    return this.#disableCcipRead;\n  }\n\n  set disableCcipRead(value) {\n    this.#disableCcipRead = !!value;\n  } // Shares multiple identical requests made during the same 250ms\n\n\n  async #perform(req) {\n    // Create a tag\n    const tag = getTag(req.method, req);\n    let perform = this.#performCache.get(tag);\n\n    if (!perform) {\n      perform = this._perform(req);\n      this.#performCache.set(tag, perform);\n      setTimeout(() => {\n        if (this.#performCache.get(tag) === perform) {\n          this.#performCache.delete(tag);\n        }\n      }, 250);\n    }\n\n    return await perform;\n  }\n\n  async ccipReadFetch(tx, calldata, urls) {\n    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\n      return null;\n    }\n\n    const sender = tx.to.toLowerCase();\n    const data = calldata.toLowerCase();\n    const errorMessages = [];\n\n    for (let i = 0; i < urls.length; i++) {\n      const url = urls[i]; // URL expansion\n\n      const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n      //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n      //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n      //    value.status = response.statusCode;\n      //    return value;\n      //});\n\n      const request = new FetchRequest(href);\n\n      if (url.indexOf(\"{data}\") === -1) {\n        request.body = {\n          data,\n          sender\n        };\n      }\n\n      this.emit(\"debug\", {\n        action: \"sendCcipReadFetchRequest\",\n        request,\n        index: i,\n        urls\n      });\n      let errorMessage = \"unknown error\";\n      const resp = await request.send();\n\n      try {\n        const result = resp.bodyJson;\n\n        if (result.data) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadFetchResult\",\n            request,\n            result\n          });\n          return result.data;\n        }\n\n        if (result.message) {\n          errorMessage = result.message;\n        }\n\n        this.emit(\"debug\", {\n          action: \"receiveCcipReadFetchError\",\n          request,\n          result\n        });\n      } catch (error) {} // 4xx indicates the result is not present; stop\n\n\n      assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", {\n        reason: \"404_MISSING_RESOURCE\",\n        transaction: tx,\n        info: {\n          url,\n          errorMessage\n        }\n      }); // 5xx indicates server issue; try the next url\n\n      errorMessages.push(errorMessage);\n    }\n\n    assert(false, `error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\n      reason: \"500_SERVER_ERROR\",\n      transaction: tx,\n      info: {\n        urls,\n        errorMessages\n      }\n    });\n  }\n\n  _wrapBlock(value, network) {\n    return new Block(formatBlock(value), this);\n  }\n\n  _wrapLog(value, network) {\n    return new Log(formatLog(value), this);\n  }\n\n  _wrapTransactionReceipt(value, network) {\n    return new TransactionReceipt(formatTransactionReceipt(value), this);\n  }\n\n  _wrapTransactionResponse(tx, network) {\n    return new TransactionResponse(tx, this);\n  }\n\n  _detectNetwork() {\n    assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_detectNetwork\"\n    });\n  } // Sub-classes should override this and handle PerformActionRequest requests, calling\n  // the super for any unhandled actions.\n\n\n  async _perform(req) {\n    assert(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\n      operation: req.method,\n      info: req\n    });\n  } // State\n\n\n  async getBlockNumber() {\n    const blockNumber = getNumber(await this.#perform({\n      method: \"getBlockNumber\"\n    }), \"%response\");\n\n    if (this.#lastBlockNumber >= 0) {\n      this.#lastBlockNumber = blockNumber;\n    }\n\n    return blockNumber;\n  }\n\n  _getAddress(address) {\n    return resolveAddress(address, this);\n  }\n\n  _getBlockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n\n    if (isHexString(blockTag)) {\n      if (isHexString(blockTag, 32)) {\n        return blockTag;\n      }\n\n      return toQuantity(blockTag);\n    }\n\n    if (typeof blockTag === \"number\") {\n      if (blockTag >= 0) {\n        return toQuantity(blockTag);\n      }\n\n      if (this.#lastBlockNumber >= 0) {\n        return toQuantity(this.#lastBlockNumber + blockTag);\n      }\n\n      return this.getBlockNumber().then(b => toQuantity(b + blockTag));\n    }\n\n    assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n  }\n\n  _getFilter(filter) {\n    // Create a canonical representation of the topics\n    const topics = (filter.topics || []).map(t => {\n      if (t == null) {\n        return null;\n      }\n\n      if (Array.isArray(t)) {\n        return concisify(t.map(t => t.toLowerCase()));\n      }\n\n      return t.toLowerCase();\n    });\n    const blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n\n    const resolve = (_address, fromBlock, toBlock) => {\n      let address = undefined;\n\n      switch (_address.length) {\n        case 0:\n          break;\n\n        case 1:\n          address = _address[0];\n          break;\n\n        default:\n          _address.sort();\n\n          address = _address;\n      }\n\n      if (blockHash) {\n        if (fromBlock != null || toBlock != null) {\n          throw new Error(\"invalid filter\");\n        }\n      }\n\n      const filter = {};\n\n      if (address) {\n        filter.address = address;\n      }\n\n      if (topics.length) {\n        filter.topics = topics;\n      }\n\n      if (fromBlock) {\n        filter.fromBlock = fromBlock;\n      }\n\n      if (toBlock) {\n        filter.toBlock = toBlock;\n      }\n\n      if (blockHash) {\n        filter.blockHash = blockHash;\n      }\n\n      return filter;\n    }; // Addresses could be async (ENS names or Addressables)\n\n\n    let address = [];\n\n    if (filter.address) {\n      if (Array.isArray(filter.address)) {\n        for (const addr of filter.address) {\n          address.push(this._getAddress(addr));\n        }\n      } else {\n        address.push(this._getAddress(filter.address));\n      }\n    }\n\n    let fromBlock = undefined;\n\n    if (\"fromBlock\" in filter) {\n      fromBlock = this._getBlockTag(filter.fromBlock);\n    }\n\n    let toBlock = undefined;\n\n    if (\"toBlock\" in filter) {\n      toBlock = this._getBlockTag(filter.toBlock);\n    }\n\n    if (address.filter(a => typeof a !== \"string\").length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n      return Promise.all([Promise.all(address), fromBlock, toBlock]).then(result => {\n        return resolve(result[0], result[1], result[2]);\n      });\n    }\n\n    return resolve(address, fromBlock, toBlock);\n  }\n\n  _getTransactionRequest(_request) {\n    const request = copyRequest(_request);\n    const promises = [];\n    [\"to\", \"from\"].forEach(key => {\n      if (request[key] == null) {\n        return;\n      }\n\n      const addr = resolveAddress(request[key]);\n\n      if (isPromise(addr)) {\n        promises.push(async function () {\n          request[key] = await addr;\n        }());\n      } else {\n        request[key] = addr;\n      }\n    });\n\n    if (request.blockTag != null) {\n      const blockTag = this._getBlockTag(request.blockTag);\n\n      if (isPromise(blockTag)) {\n        promises.push(async function () {\n          request.blockTag = await blockTag;\n        }());\n      } else {\n        request.blockTag = blockTag;\n      }\n    }\n\n    if (promises.length) {\n      return async function () {\n        await Promise.all(promises);\n        return request;\n      }();\n    }\n\n    return request;\n  }\n\n  async getNetwork() {\n    // No explicit network was set and this is our first time\n    if (this.#networkPromise == null) {\n      // Detect the current network (shared with all calls)\n      const detectNetwork = this._detectNetwork().then(network => {\n        this.emit(\"network\", network, null);\n        return network;\n      }, error => {\n        // Reset the networkPromise on failure, so we will try again\n        if (this.#networkPromise === detectNetwork) {\n          this.#networkPromise = null;\n        }\n\n        throw error;\n      });\n\n      this.#networkPromise = detectNetwork;\n      return (await detectNetwork).clone();\n    }\n\n    const networkPromise = this.#networkPromise;\n    const [expected, actual] = await Promise.all([networkPromise, this._detectNetwork() // The actual connected network\n    ]);\n\n    if (expected.chainId !== actual.chainId) {\n      if (this.#anyNetwork) {\n        // The \"any\" network can change, so notify listeners\n        this.emit(\"network\", actual, expected); // Update the network if something else hasn't already changed it\n\n        if (this.#networkPromise === networkPromise) {\n          this.#networkPromise = Promise.resolve(actual);\n        }\n      } else {\n        // Otherwise, we do not allow changes to the underlying network\n        assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\n          event: \"changed\"\n        });\n      }\n    }\n\n    return expected.clone();\n  }\n\n  async getFeeData() {\n    const {\n      block,\n      gasPrice\n    } = await resolveProperties({\n      block: this.getBlock(\"latest\"),\n      gasPrice: (async () => {\n        try {\n          const gasPrice = await this.#perform({\n            method: \"getGasPrice\"\n          });\n          return getBigInt(gasPrice, \"%response\");\n        } catch (error) {}\n\n        return null;\n      })()\n    });\n    let maxFeePerGas = null,\n        maxPriorityFeePerGas = null;\n\n    if (block && block.baseFeePerGas) {\n      // We may want to compute this more accurately in the future,\n      // using the formula \"check if the base fee is correct\".\n      // See: https://eips.ethereum.org/EIPS/eip-1559\n      maxPriorityFeePerGas = BigInt(\"1000000000\"); // Allow a network to override their maximum priority fee per gas\n      //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n      //if (priorityFeePlugin) {\n      //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n      //}\n\n      maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n    }\n\n    return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n  }\n\n  async estimateGas(_tx) {\n    let tx = this._getTransactionRequest(_tx);\n\n    if (isPromise(tx)) {\n      tx = await tx;\n    }\n\n    return getBigInt(await this.#perform({\n      method: \"estimateGas\",\n      transaction: tx\n    }), \"%response\");\n  }\n\n  async #call(tx, blockTag, attempt) {\n    assert(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n      reason: \"TOO_MANY_REDIRECTS\",\n      transaction: Object.assign({}, tx, {\n        blockTag,\n        enableCcipRead: true\n      })\n    }); // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n\n    const transaction = copyRequest(tx);\n\n    try {\n      return hexlify(await this._perform({\n        method: \"call\",\n        transaction,\n        blockTag\n      }));\n    } catch (error) {\n      // CCIP Read OffchainLookup\n      if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n        const data = error.data;\n        const txSender = await resolveAddress(transaction.to, this); // Parse the CCIP Read Arguments\n\n        let ccipArgs;\n\n        try {\n          ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n        } catch (error) {\n          assert(false, error.message, \"OFFCHAIN_FAULT\", {\n            reason: \"BAD_DATA\",\n            transaction,\n            info: {\n              data\n            }\n          });\n        } // Check the sender of the OffchainLookup matches the transaction\n\n\n        assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n          action: \"call\",\n          data,\n          reason: \"OffchainLookup\",\n          transaction: transaction,\n          invocation: null,\n          revert: {\n            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n            name: \"OffchainLookup\",\n            args: ccipArgs.errorArgs\n          }\n        });\n        const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n        assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n          reason: \"FETCH_FAILED\",\n          transaction,\n          info: {\n            data: error.data,\n            errorArgs: ccipArgs.errorArgs\n          }\n        });\n        const tx = {\n          to: txSender,\n          data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n        };\n        this.emit(\"debug\", {\n          action: \"sendCcipReadCall\",\n          transaction: tx\n        });\n\n        try {\n          const result = await this.#call(tx, blockTag, attempt + 1);\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallResult\",\n            transaction: Object.assign({}, tx),\n            result\n          });\n          return result;\n        } catch (error) {\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallError\",\n            transaction: Object.assign({}, tx),\n            error\n          });\n          throw error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  async #checkNetwork(promise) {\n    const {\n      value\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      value: promise\n    });\n    return value;\n  }\n\n  async call(_tx) {\n    const {\n      tx,\n      blockTag\n    } = await resolveProperties({\n      tx: this._getTransactionRequest(_tx),\n      blockTag: this._getBlockTag(_tx.blockTag)\n    });\n    return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n  } // Account\n\n\n  async #getAccountValue(request, _address, _blockTag) {\n    let address = this._getAddress(_address);\n\n    let blockTag = this._getBlockTag(_blockTag);\n\n    if (typeof address !== \"string\" || typeof blockTag !== \"string\") {\n      [address, blockTag] = await Promise.all([address, blockTag]);\n    }\n\n    return await this.#checkNetwork(this.#perform(Object.assign(request, {\n      address,\n      blockTag\n    })));\n  }\n\n  async getBalance(address, blockTag) {\n    return getBigInt(await this.#getAccountValue({\n      method: \"getBalance\"\n    }, address, blockTag), \"%response\");\n  }\n\n  async getTransactionCount(address, blockTag) {\n    return getNumber(await this.#getAccountValue({\n      method: \"getTransactionCount\"\n    }, address, blockTag), \"%response\");\n  }\n\n  async getCode(address, blockTag) {\n    return hexlify(await this.#getAccountValue({\n      method: \"getCode\"\n    }, address, blockTag));\n  }\n\n  async getStorage(address, _position, blockTag) {\n    const position = getBigInt(_position, \"position\");\n    return hexlify(await this.#getAccountValue({\n      method: \"getStorage\",\n      position\n    }, address, blockTag));\n  } // Write\n\n\n  async broadcastTransaction(signedTx) {\n    const {\n      blockNumber,\n      hash,\n      network\n    } = await resolveProperties({\n      blockNumber: this.getBlockNumber(),\n      hash: this._perform({\n        method: \"broadcastTransaction\",\n        signedTransaction: signedTx\n      }),\n      network: this.getNetwork()\n    });\n    const tx = Transaction.from(signedTx);\n\n    if (tx.hash !== hash) {\n      throw new Error(\"@TODO: the returned hash did not match\");\n    }\n\n    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\n  }\n\n  async #getBlock(block, includeTransactions) {\n    // @TODO: Add CustomBlockPlugin check\n    if (isHexString(block, 32)) {\n      return await this.#perform({\n        method: \"getBlock\",\n        blockHash: block,\n        includeTransactions\n      });\n    }\n\n    let blockTag = this._getBlockTag(block);\n\n    if (typeof blockTag !== \"string\") {\n      blockTag = await blockTag;\n    }\n\n    return await this.#perform({\n      method: \"getBlock\",\n      blockTag,\n      includeTransactions\n    });\n  } // Queries\n\n\n  async getBlock(block, prefetchTxs) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#getBlock(block, !!prefetchTxs)\n    });\n\n    if (params == null) {\n      return null;\n    }\n\n    return this._wrapBlock(formatBlock(params), network);\n  }\n\n  async getTransaction(hash) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransaction\",\n        hash\n      })\n    });\n\n    if (params == null) {\n      return null;\n    }\n\n    return this._wrapTransactionResponse(formatTransactionResponse(params), network);\n  }\n\n  async getTransactionReceipt(hash) {\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getTransactionReceipt\",\n        hash\n      })\n    });\n\n    if (params == null) {\n      return null;\n    } // Some backends did not backfill the effectiveGasPrice into old transactions\n    // in the receipt, so we look it up manually and inject it.\n\n\n    if (params.gasPrice == null && params.effectiveGasPrice == null) {\n      const tx = await this.#perform({\n        method: \"getTransaction\",\n        hash\n      });\n\n      if (tx == null) {\n        throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n      }\n\n      params.effectiveGasPrice = tx.gasPrice;\n    }\n\n    return this._wrapTransactionReceipt(formatTransactionReceipt(params), network);\n  }\n\n  async getTransactionResult(hash) {\n    const {\n      result\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      result: this.#perform({\n        method: \"getTransactionResult\",\n        hash\n      })\n    });\n\n    if (result == null) {\n      return null;\n    }\n\n    return hexlify(result);\n  } // Bloom-filter Queries\n\n\n  async getLogs(_filter) {\n    let filter = this._getFilter(_filter);\n\n    if (isPromise(filter)) {\n      filter = await filter;\n    }\n\n    const {\n      network,\n      params\n    } = await resolveProperties({\n      network: this.getNetwork(),\n      params: this.#perform({\n        method: \"getLogs\",\n        filter\n      })\n    });\n    return params.map(p => this._wrapLog(formatLog(p), network));\n  } // ENS\n\n\n  _getProvider(chainId) {\n    assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"_getProvider()\"\n    });\n  }\n\n  async getResolver(name) {\n    return await EnsResolver.fromName(this, name);\n  }\n\n  async getAvatar(name) {\n    const resolver = await this.getResolver(name);\n\n    if (resolver) {\n      return await resolver.getAvatar();\n    }\n\n    return null;\n  }\n\n  async resolveName(name) {\n    const resolver = await this.getResolver(name);\n\n    if (resolver) {\n      return await resolver.getAddress();\n    }\n\n    return null;\n  }\n\n  async lookupAddress(address) {\n    address = getAddress(address);\n    const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n\n    try {\n      const ensAddr = await EnsResolver.getEnsAddress(this);\n      const ensContract = new Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], this);\n      const resolver = await ensContract.resolver(node);\n\n      if (resolver == null || resolver === ZeroHash) {\n        return null;\n      }\n\n      const resolverContract = new Contract(resolver, [\"function name(bytes32) view returns (string)\"], this);\n      const name = await resolverContract.name(node);\n      const check = await this.resolveName(name);\n\n      if (check !== address) {\n        console.log(\"FAIL\", address, check);\n      }\n\n      return name;\n    } catch (error) {\n      console.log(\"TEMP\", error);\n    }\n\n    return null;\n  }\n\n  async waitForTransaction(hash, _confirms, timeout) {\n    const confirms = _confirms != null ? _confirms : 1;\n\n    if (confirms === 0) {\n      return this.getTransactionReceipt(hash);\n    }\n\n    return new Promise(async (resolve, reject) => {\n      let timer = null;\n\n      const listener = async blockNumber => {\n        try {\n          const receipt = await this.getTransactionReceipt(hash);\n\n          if (receipt != null) {\n            if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n              resolve(receipt); //this.off(\"block\", listener);\n\n              if (timer) {\n                clearTimeout(timer);\n                timer = null;\n              }\n\n              return;\n            }\n          }\n        } catch (error) {\n          console.log(\"EEE\", error);\n        }\n\n        this.once(\"block\", listener);\n      };\n\n      if (timeout != null) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          this.off(\"block\", listener);\n          reject(makeError(\"timeout\", \"TIMEOUT\", {\n            reason: \"timeout\"\n          }));\n        }, timeout);\n      }\n\n      listener(await this.getBlockNumber());\n    });\n  }\n\n  async waitForBlock(blockTag) {\n    assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n      operation: \"waitForBlock\"\n    });\n  }\n\n  _clearTimeout(timerId) {\n    const timer = this.#timers.get(timerId);\n\n    if (!timer) {\n      return;\n    }\n\n    if (timer.timer) {\n      clearTimeout(timer.timer);\n    }\n\n    this.#timers.delete(timerId);\n  }\n\n  _setTimeout(_func, timeout) {\n    if (timeout == null) {\n      timeout = 0;\n    }\n\n    const timerId = this.#nextTimer++;\n\n    const func = () => {\n      this.#timers.delete(timerId);\n\n      _func();\n    };\n\n    if (this.paused) {\n      this.#timers.set(timerId, {\n        timer: null,\n        func,\n        time: timeout\n      });\n    } else {\n      const timer = setTimeout(func, timeout);\n      this.#timers.set(timerId, {\n        timer,\n        func,\n        time: getTime()\n      });\n    }\n\n    return timerId;\n  }\n\n  _forEachSubscriber(func) {\n    for (const sub of this.#subs.values()) {\n      func(sub.subscriber);\n    }\n  } // Event API; sub-classes should override this; any supported\n  // event filter will have been munged into an EventFilter\n\n\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"debug\":\n      case \"network\":\n        return new UnmanagedSubscriber(sub.type);\n\n      case \"block\":\n        return new PollingBlockSubscriber(this);\n\n      case \"event\":\n        return new PollingEventSubscriber(this, sub.filter);\n\n      case \"transaction\":\n        return new PollingTransactionSubscriber(this, sub.hash);\n\n      case \"orphan\":\n        return new PollingOrphanSubscriber(this, sub.filter);\n    }\n\n    throw new Error(`unsupported event: ${sub.type}`);\n  }\n\n  _recoverSubscriber(oldSub, newSub) {\n    for (const sub of this.#subs.values()) {\n      if (sub.subscriber === oldSub) {\n        if (sub.started) {\n          sub.subscriber.stop();\n        }\n\n        sub.subscriber = newSub;\n\n        if (sub.started) {\n          newSub.start();\n        }\n\n        if (this.#pausedState != null) {\n          newSub.pause(this.#pausedState);\n        }\n\n        break;\n      }\n    }\n  }\n\n  async #hasSub(event, emitArgs) {\n    let sub = await getSubscription(event, this); // This is a log that is removing an existing log; we actually want\n    // to emit an orphan event for the removed log\n\n    if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n      sub = await getSubscription({\n        orphan: \"drop-log\",\n        log: emitArgs[0]\n      }, this);\n    }\n\n    return this.#subs.get(sub.tag) || null;\n  }\n\n  async #getSub(event) {\n    const subscription = await getSubscription(event, this); // Prevent tampering with our tag in any subclass' _getSubscriber\n\n    const tag = subscription.tag;\n    let sub = this.#subs.get(tag);\n\n    if (!sub) {\n      const subscriber = this._getSubscriber(subscription);\n\n      const addressableMap = new WeakMap();\n      const nameMap = new Map();\n      sub = {\n        subscriber,\n        tag,\n        addressableMap,\n        nameMap,\n        started: false,\n        listeners: []\n      };\n      this.#subs.set(tag, sub);\n    }\n\n    return sub;\n  }\n\n  async on(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n\n    return this;\n  }\n\n  async once(event, listener) {\n    const sub = await this.#getSub(event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n\n    if (!sub.started) {\n      sub.subscriber.start();\n      sub.started = true;\n\n      if (this.#pausedState != null) {\n        sub.subscriber.pause(this.#pausedState);\n      }\n    }\n\n    return this;\n  }\n\n  async emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    const sub = await this.#hasSub(event, args); // If there is not subscription or if a recent emit removed\n    // the last of them (which also deleted the sub) do nothing\n\n    if (!sub || sub.listeners.length === 0) {\n      return false;\n    }\n\n    ;\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(_ref => {\n      let {\n        listener,\n        once\n      } = _ref;\n      const payload = new EventPayload(this, once ? null : listener, event);\n\n      try {\n        listener.call(this, ...args, payload);\n      } catch (error) {}\n\n      return !once;\n    });\n\n    if (sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n\n      this.#subs.delete(sub.tag);\n    }\n\n    return count > 0;\n  }\n\n  async listenerCount(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n\n      if (!sub) {\n        return 0;\n      }\n\n      return sub.listeners.length;\n    }\n\n    let total = 0;\n\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      total += listeners.length;\n    }\n\n    return total;\n  }\n\n  async listeners(event) {\n    if (event) {\n      const sub = await this.#hasSub(event);\n\n      if (!sub) {\n        return [];\n      }\n\n      return sub.listeners.map(_ref2 => {\n        let {\n          listener\n        } = _ref2;\n        return listener;\n      });\n    }\n\n    let result = [];\n\n    for (const {\n      listeners\n    } of this.#subs.values()) {\n      result = result.concat(listeners.map(_ref3 => {\n        let {\n          listener\n        } = _ref3;\n        return listener;\n      }));\n    }\n\n    return result;\n  }\n\n  async off(event, listener) {\n    const sub = await this.#hasSub(event);\n\n    if (!sub) {\n      return this;\n    }\n\n    if (listener) {\n      const index = sub.listeners.map(_ref4 => {\n        let {\n          listener\n        } = _ref4;\n        return listener;\n      }).indexOf(listener);\n\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n\n    if (!listener || sub.listeners.length === 0) {\n      if (sub.started) {\n        sub.subscriber.stop();\n      }\n\n      this.#subs.delete(sub.tag);\n    }\n\n    return this;\n  }\n\n  async removeAllListeners(event) {\n    if (event) {\n      const {\n        tag,\n        started,\n        subscriber\n      } = await this.#getSub(event);\n\n      if (started) {\n        subscriber.stop();\n      }\n\n      this.#subs.delete(tag);\n    } else {\n      for (const [tag, {\n        started,\n        subscriber\n      }] of this.#subs) {\n        if (started) {\n          subscriber.stop();\n        }\n\n        this.#subs.delete(tag);\n      }\n    }\n\n    return this;\n  } // Alias for \"on\"\n\n\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  } // Alias for \"off\"\n\n\n  async removeListener(event, listener) {\n    return this.off(event, listener);\n  } // Sub-classes should override this to shutdown any sockets, etc.\n  // but MUST call this super.shutdown.\n\n\n  destroy() {\n    // Stop all listeners\n    this.removeAllListeners(); // Shut down all tiemrs\n\n    for (const timerId of this.#timers.keys()) {\n      this._clearTimeout(timerId);\n    }\n  }\n\n  get paused() {\n    return this.#pausedState != null;\n  }\n\n  set paused(pause) {\n    if (!!pause === this.paused) {\n      return;\n    }\n\n    if (this.paused) {\n      this.resume();\n    } else {\n      this.pause(false);\n    }\n  }\n\n  pause(dropWhilePaused) {\n    this.#lastBlockNumber = -1;\n\n    if (this.#pausedState != null) {\n      if (this.#pausedState == !!dropWhilePaused) {\n        return;\n      }\n\n      assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"pause\"\n      });\n    }\n\n    this._forEachSubscriber(s => s.pause(dropWhilePaused));\n\n    this.#pausedState = !!dropWhilePaused;\n\n    for (const timer of this.#timers.values()) {\n      // Clear the timer\n      if (timer.timer) {\n        clearTimeout(timer.timer);\n      } // Remaining time needed for when we become unpaused\n\n\n      timer.time = getTime() - timer.time;\n    }\n  }\n\n  resume() {\n    if (this.#pausedState == null) {\n      return;\n    }\n\n    this._forEachSubscriber(s => s.resume());\n\n    this.#pausedState = null;\n\n    for (const timer of this.#timers.values()) {\n      // Remaining time when we were paused\n      let timeout = timer.time;\n\n      if (timeout < 0) {\n        timeout = 0;\n      } // Start time (in cause paused, so we con compute remaininf time)\n\n\n      timer.time = getTime(); // Start the timer\n\n      setTimeout(timer.func, timeout);\n    }\n  }\n\n}\n\nfunction _parseString(result, start) {\n  try {\n    const bytes = _parseBytes(result, start);\n\n    if (bytes) {\n      return toUtf8String(bytes);\n    }\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  try {\n    const offset = getNumber(dataSlice(result, start, start + 32));\n    const length = getNumber(dataSlice(result, offset, offset + 32));\n    return dataSlice(result, offset + 32, offset + 32 + length);\n  } catch (error) {}\n\n  return null;\n}\n\nfunction numPad(value) {\n  const result = toBeArray(value);\n\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\n\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n\nconst empty = new Uint8Array([]); // ABI Encodes a series of (bytes, bytes, ...)\n\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0; // Add place-holders for pointers as we add items\n\n  for (let i = 0; i < datas.length; i++) {\n    result.push(empty);\n    byteCount += 32;\n  }\n\n  for (let i = 0; i < datas.length; i++) {\n    const data = getBytes(datas[i]); // Update the bytes offset\n\n    result[i] = numPad(byteCount); // The length and padded value of data\n\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n\n  return concat(result);\n}\n\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nfunction parseOffchainLookup(data) {\n  const result = {\n    sender: \"\",\n    urls: [],\n    calldata: \"\",\n    selector: \"\",\n    extraData: \"\",\n    errorArgs: []\n  };\n  assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n    reason: \"insufficient OffchainLookup data\"\n  });\n  const sender = dataSlice(data, 0, 32);\n  assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup sender\"\n  });\n  result.sender = dataSlice(sender, 12); // Read the URLs from the response\n\n  try {\n    const urls = [];\n    const urlsOffset = getNumber(dataSlice(data, 32, 64));\n    const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n    const urlsData = dataSlice(data, urlsOffset + 32);\n\n    for (let u = 0; u < urlsLength; u++) {\n      const url = _parseString(urlsData, u * 32);\n\n      if (url == null) {\n        throw new Error(\"abort\");\n      }\n\n      urls.push(url);\n    }\n\n    result.urls = urls;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup urls\"\n    });\n  } // Get the CCIP calldata to forward\n\n\n  try {\n    const calldata = _parseBytes(data, 64);\n\n    if (calldata == null) {\n      throw new Error(\"abort\");\n    }\n\n    result.calldata = calldata;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup calldata\"\n    });\n  } // Get the callbackSelector (bytes4)\n\n\n  assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup callbaackSelector\"\n  });\n  result.selector = dataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n\n  try {\n    const extraData = _parseBytes(data, 128);\n\n    if (extraData == null) {\n      throw new Error(\"abort\");\n    }\n\n    result.extraData = extraData;\n  } catch (error) {\n    assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup extraData\"\n    });\n  }\n\n  result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map(k => result[k]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["getAddress","resolveAddress","ZeroHash","Contract","namehash","Transaction","concat","dataLength","dataSlice","hexlify","isHexString","getBigInt","getBytes","getNumber","isCallException","makeError","assert","assertArgument","FetchRequest","toBeArray","toQuantity","defineProperties","EventPayload","resolveProperties","toUtf8String","EnsResolver","formatBlock","formatLog","formatTransactionReceipt","formatTransactionResponse","Network","copyRequest","Block","FeeData","Log","TransactionReceipt","TransactionResponse","PollingBlockSubscriber","PollingEventSubscriber","PollingOrphanSubscriber","PollingTransactionSubscriber","BN_2","BigInt","MAX_CCIP_REDIRECTS","isPromise","value","then","getTag","prefix","JSON","stringify","k","v","toString","toLowerCase","Array","isArray","keys","Object","sort","reduce","accum","key","UnmanagedSubscriber","name","constructor","start","stop","pause","dropWhilePaused","resume","copy","parse","concisify","items","from","Set","values","getSubscription","_event","provider","Error","topics","type","tag","hash","orphan","event","filter","address","map","t","addresses","promises","addAddress","addr","push","forEach","length","Promise","all","a","getTime","Date","AbstractProvider","_network","network","resolve","setTimeout","emit","Map","plugins","attachPlugin","plugin","get","set","connect","getPlugin","disableCcipRead","req","method","perform","_perform","delete","ccipReadFetch","tx","calldata","urls","to","sender","data","errorMessages","i","url","href","replace","request","indexOf","body","action","index","errorMessage","resp","send","result","bodyJson","message","error","statusCode","reason","transaction","info","m","join","_wrapBlock","_wrapLog","_wrapTransactionReceipt","_wrapTransactionResponse","_detectNetwork","operation","getBlockNumber","blockNumber","_getAddress","_getBlockTag","blockTag","b","_getFilter","blockHash","undefined","_address","fromBlock","toBlock","_getTransactionRequest","_request","getNetwork","detectNetwork","clone","networkPromise","expected","actual","chainId","getFeeData","block","gasPrice","getBlock","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","estimateGas","_tx","attempt","assign","enableCcipRead","txSender","ccipArgs","parseOffchainLookup","invocation","revert","signature","args","errorArgs","ccipResult","selector","encodeBytes","extraData","promise","call","_blockTag","getBalance","getTransactionCount","getCode","getStorage","_position","position","broadcastTransaction","signedTx","signedTransaction","replaceableTransaction","includeTransactions","prefetchTxs","params","getTransaction","getTransactionReceipt","effectiveGasPrice","getTransactionResult","getLogs","_filter","p","_getProvider","getResolver","fromName","getAvatar","resolver","resolveName","lookupAddress","node","substring","ensAddr","getEnsAddress","ensContract","resolverContract","check","console","log","waitForTransaction","_confirms","timeout","confirms","reject","timer","listener","receipt","clearTimeout","once","off","waitForBlock","_clearTimeout","timerId","_setTimeout","_func","func","paused","time","_forEachSubscriber","sub","subscriber","_getSubscriber","_recoverSubscriber","oldSub","newSub","started","emitArgs","removed","subscription","addressableMap","WeakMap","nameMap","listeners","on","count","payload","listenerCount","total","splice","removeAllListeners","addListener","removeListener","destroy","s","_parseString","bytes","_parseBytes","offset","numPad","padded","Uint8Array","bytesPad","Math","ceil","empty","datas","byteCount","zeros","urlsOffset","urlsLength","urlsData","u","split"],"sourceRoot":"","sources":["../../src.ts/providers/abstract-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}