{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"style\", \"before\", \"inlineAfter\", \"after\", \"value\", \"onChange\", \"getRootRef\", \"getRef\", \"onHeightChange\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { hasReactNode, isFunction } from \"../../lib/utils\";\nimport { useDOM } from \"../../lib/dom\";\nimport { getClassName } from \"../../helpers/getClassName\";\nexport var WriteBar = function WriteBar(props) {\n  var platform = usePlatform();\n\n  var className = props.className,\n      style = props.style,\n      before = props.before,\n      inlineAfter = props.inlineAfter,\n      after = props.after,\n      value = props.value,\n      onChange = props.onChange,\n      getRootRef = props.getRootRef,\n      getRef = props.getRef,\n      onHeightChange = props.onHeightChange,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var isControlledOutside = value != null;\n\n  var _useDOM = useDOM(),\n      window = _useDOM.window;\n\n  var textareaRef = useExternRef(getRef);\n  var textareaMinHeightRef = React.useRef(null);\n  var resize = React.useCallback(function () {\n    var textareaEl = textareaRef.current;\n\n    if (!textareaEl) {\n      return;\n    }\n\n    var offsetHeight = textareaEl.offsetHeight,\n        scrollHeight = textareaEl.scrollHeight;\n    var style = window.getComputedStyle(textareaEl);\n    var paddingTop = parseInt(style.paddingTop);\n    var paddingBottom = parseInt(style.paddingBottom);\n\n    if (textareaMinHeightRef.current === null) {\n      textareaMinHeightRef.current = offsetHeight;\n    }\n\n    var diff = paddingTop + paddingBottom + 10;\n\n    if (scrollHeight + diff <= offsetHeight) {\n      diff = 0;\n    }\n\n    textareaEl.style.height = \"0px\";\n    var height = textareaEl.scrollHeight - diff / 4;\n    textareaEl.style.height = String(Math.max(height, textareaMinHeightRef.current)) + \"px\";\n\n    if (isFunction(onHeightChange)) {\n      onHeightChange();\n    }\n  }, [onHeightChange, textareaRef, window]);\n\n  var onTextareaChange = function onTextareaChange(event) {\n    if (isFunction(onChange)) {\n      onChange(event);\n    }\n\n    if (!isControlledOutside) {\n      resize();\n    }\n  };\n\n  React.useEffect(function () {\n    resize();\n  }, [resize, value]);\n  return createScopedElement(\"div\", {\n    ref: getRootRef,\n    vkuiClass: getClassName(\"WriteBar\", platform),\n    className: className,\n    style: style\n  }, createScopedElement(\"form\", {\n    vkuiClass: \"WriteBar__form\",\n    onSubmit: function onSubmit(e) {\n      return e.preventDefault();\n    }\n  }, hasReactNode(before) && createScopedElement(\"div\", {\n    vkuiClass: \"WriteBar__before\"\n  }, before), createScopedElement(\"div\", {\n    vkuiClass: \"WriteBar__formIn\"\n  }, createScopedElement(\"textarea\", _extends({}, restProps, {\n    vkuiClass: \"WriteBar__textarea\",\n    onChange: onTextareaChange,\n    ref: textareaRef,\n    value: value\n  })), hasReactNode(inlineAfter) && createScopedElement(\"div\", {\n    vkuiClass: \"WriteBar__inlineAfter\"\n  }, inlineAfter)), hasReactNode(after) && createScopedElement(\"div\", {\n    vkuiClass: \"WriteBar__after\"\n  }, after)));\n};","map":{"version":3,"mappings":"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","names":["React","usePlatform","useExternRef","hasReactNode","isFunction","useDOM","getClassName","WriteBar","props","platform","className","style","before","inlineAfter","after","value","onChange","getRootRef","getRef","onHeightChange","restProps","isControlledOutside","window","textareaRef","textareaMinHeightRef","useRef","resize","useCallback","textareaEl","current","offsetHeight","scrollHeight","getComputedStyle","paddingTop","parseInt","paddingBottom","diff","height","String","Math","max","onTextareaChange","event","useEffect","createScopedElement","ref","vkuiClass","onSubmit","e","preventDefault"],"sources":["../../../src/components/WriteBar/WriteBar.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { hasReactNode, isFunction } from \"../../lib/utils\";\nimport { useDOM } from \"../../lib/dom\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { HasRef, HasRootRef } from \"../../types\";\nimport \"./WriteBar.css\";\n\nexport interface WriteBarProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HasRootRef<HTMLDivElement>,\n    HasRef<HTMLTextAreaElement> {\n  /**\n   * Содержимое, отображаемое слева от поля ввода.\n   */\n  before?: React.ReactNode;\n  /**\n   * Содержимое, отображаемое поверх поля ввода (актуально для iOS)\n   */\n  inlineAfter?: React.ReactNode;\n  /**\n   * Содержимое, отображаемое справа от поля ввода\n   */\n  after?: React.ReactNode;\n  /**\n   * Вызывается при смене высоты поля ввода\n   */\n  onHeightChange?: VoidFunction;\n\n  children?: never;\n}\n\nexport const WriteBar: React.FC<WriteBarProps> = (props: WriteBarProps) => {\n  const platform = usePlatform();\n  const {\n    className,\n    style,\n\n    before,\n    inlineAfter,\n    after,\n\n    value,\n    onChange,\n\n    getRootRef,\n    getRef,\n    onHeightChange,\n    ...restProps\n  } = props;\n\n  const isControlledOutside = value != null;\n\n  const { window } = useDOM();\n  const textareaRef = useExternRef(getRef);\n  const textareaMinHeightRef = React.useRef<number | null>(null);\n\n  const resize = React.useCallback(() => {\n    const textareaEl = textareaRef.current;\n    if (!textareaEl) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight } = textareaEl;\n    const style = window!.getComputedStyle(textareaEl);\n    const paddingTop = parseInt(style.paddingTop);\n    const paddingBottom = parseInt(style.paddingBottom);\n\n    if (textareaMinHeightRef.current === null) {\n      textareaMinHeightRef.current = offsetHeight;\n    }\n\n    let diff = paddingTop + paddingBottom + 10;\n\n    if (scrollHeight + diff <= offsetHeight) {\n      diff = 0;\n    }\n\n    textareaEl.style.height = \"0px\";\n\n    const height = textareaEl.scrollHeight - diff / 4;\n    textareaEl.style.height =\n      String(Math.max(height, textareaMinHeightRef.current)) + \"px\";\n\n    if (isFunction(onHeightChange)) {\n      onHeightChange();\n    }\n  }, [onHeightChange, textareaRef, window]);\n\n  const onTextareaChange: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event\n  ) => {\n    if (isFunction(onChange)) {\n      onChange(event);\n    }\n\n    if (!isControlledOutside) {\n      resize();\n    }\n  };\n\n  React.useEffect(() => {\n    resize();\n  }, [resize, value]);\n\n  return (\n    <div\n      ref={getRootRef}\n      vkuiClass={getClassName(\"WriteBar\", platform)}\n      className={className}\n      style={style}\n    >\n      <form vkuiClass=\"WriteBar__form\" onSubmit={(e) => e.preventDefault()}>\n        {hasReactNode(before) && (\n          <div vkuiClass=\"WriteBar__before\">{before}</div>\n        )}\n\n        <div vkuiClass=\"WriteBar__formIn\">\n          <textarea\n            {...restProps}\n            vkuiClass=\"WriteBar__textarea\"\n            onChange={onTextareaChange}\n            ref={textareaRef}\n            value={value}\n          />\n\n          {hasReactNode(inlineAfter) && (\n            <div vkuiClass=\"WriteBar__inlineAfter\">{inlineAfter}</div>\n          )}\n        </div>\n\n        {hasReactNode(after) && <div vkuiClass=\"WriteBar__after\">{after}</div>}\n      </form>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}