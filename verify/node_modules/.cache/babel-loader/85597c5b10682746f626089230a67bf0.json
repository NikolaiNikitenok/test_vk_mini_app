{"ast":null,"code":"/**\r\n *  Property helper functions.\r\n *\r\n *  @_subsection api/utils:Properties  [about-properties]\r\n */\nfunction checkType(value, type, name) {\n  const types = type.split(\"|\").map(t => t.trim());\n\n  for (let i = 0; i < types.length; i++) {\n    switch (type) {\n      case \"any\":\n        return;\n\n      case \"bigint\":\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        if (typeof value === type) {\n          return;\n        }\n\n    }\n  }\n\n  const error = new Error(`invalid value for type ${type}`);\n  error.code = \"INVALID_ARGUMENT\";\n  error.argument = `value.${name}`;\n  error.value = value;\n  throw error;\n}\n/**\r\n *  Resolves to a new object that is a copy of %%value%%, but with all\r\n *  values resolved.\r\n */\n\n\nexport async function resolveProperties(value) {\n  const keys = Object.keys(value);\n  const results = await Promise.all(keys.map(k => Promise.resolve(value[k])));\n  return results.reduce((accum, v, index) => {\n    accum[keys[index]] = v;\n    return accum;\n  }, {});\n}\n/**\r\n *  Assigns the %%values%% to %%target%% as read-only values.\r\n *\r\n *  It %%types%% is specified, the values are checked.\r\n */\n\nexport function defineProperties(target, values, types) {\n  for (let key in values) {\n    let value = values[key];\n    const type = types ? types[key] : null;\n\n    if (type) {\n      checkType(value, type, key);\n    }\n\n    Object.defineProperty(target, key, {\n      enumerable: true,\n      value,\n      writable: false\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAASA,SAAT,CAAmBC,KAAnB,EAA+BC,IAA/B,EAA6CC,IAA7C,EAAyD;AACrD,QAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAzB,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAQP,IAAR;AACI,WAAK,KAAL;AACI;;AACJ,WAAK,QAAL;AACA,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACI,YAAI,OAAOD,KAAP,KAAkBC,IAAtB,EAA4B;AAAE;AAAS;;AAP/C;AASH;;AAED,QAAMS,KAAK,GAAQ,IAAIC,KAAJ,CAAU,0BAA2BV,IAAK,EAA1C,CAAnB;AACAS,OAAK,CAACE,IAAN,GAAa,kBAAb;AACAF,OAAK,CAACG,QAAN,GAAiB,SAAUX,IAAK,EAAhC;AACAQ,OAAK,CAACV,KAAN,GAAcA,KAAd;AAEA,QAAMU,KAAN;AACH;AAED;;;;;;AAIA,OAAO,eAAeI,iBAAf,CAAoCd,KAApC,EAAoF;AACvF,QAAMe,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYf,KAAZ,CAAb;AACA,QAAMiB,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACV,GAAL,CAAUe,CAAD,IAAOF,OAAO,CAACG,OAAR,CAAgBrB,KAAK,CAAUoB,CAAV,CAArB,CAAhB,CAAZ,CAAtB;AACA,SAAOH,OAAO,CAACK,MAAR,CAAe,CAACC,KAAD,EAAaC,CAAb,EAAgBC,KAAhB,KAAyB;AAC3CF,SAAK,CAACR,IAAI,CAACU,KAAD,CAAL,CAAL,GAAqBD,CAArB;AACA,WAAOD,KAAP;AACH,GAHM,EAGuB,EAHvB,CAAP;AAIH;AAED;;;;;;AAKA,OAAM,SAAUG,gBAAV,CACLC,MADK,EAELC,MAFK,EAGLzB,KAHK,EAGgC;AAElC,OAAK,IAAI0B,GAAT,IAAgBD,MAAhB,EAAwB;AACpB,QAAI5B,KAAK,GAAG4B,MAAM,CAACC,GAAD,CAAlB;AAEA,UAAM5B,IAAI,GAAIE,KAAK,GAAGA,KAAK,CAAC0B,GAAD,CAAR,GAAe,IAAlC;;AACA,QAAI5B,IAAJ,EAAU;AAAEF,eAAS,CAACC,KAAD,EAAQC,IAAR,EAAc4B,GAAd,CAAT;AAA8B;;AAE1Cb,UAAM,CAACc,cAAP,CAAsBH,MAAtB,EAA8BE,GAA9B,EAAmC;AAAEE,gBAAU,EAAE,IAAd;AAAoB/B,WAApB;AAA2BgC,cAAQ,EAAE;AAArC,KAAnC;AACH;AACJ","names":["checkType","value","type","name","types","split","map","t","trim","i","length","error","Error","code","argument","resolveProperties","keys","Object","results","Promise","all","k","resolve","reduce","accum","v","index","defineProperties","target","values","key","defineProperty","enumerable","writable"],"sourceRoot":"","sources":["../../src.ts/utils/properties.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}