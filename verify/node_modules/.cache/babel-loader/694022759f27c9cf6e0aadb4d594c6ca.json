{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst _u64_js_1 = require(\"./_u64.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Various per round constants calculations\n\n\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _7n = BigInt(7);\n\nconst _256n = BigInt(256);\n\nconst _0x71n = BigInt(0x71);\n\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x)); // Rotational\n\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64); // Iota\n\n  let t = _0n;\n\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n\n  _SHA3_IOTA.push(t);\n}\n\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true); // Left rotation (without 0, 32, 64)\n\n\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\n\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s); // Same as keccakf1600, but allows to skip some rounds\n\n\nfunction keccakP(s) {\n  let rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  const B = new Uint32Array(5 * 2); // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    } // Rho (ρ) and Pi (π)\n\n\n    let curH = s[2];\n    let curL = s[3];\n\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    } // Chi (χ)\n\n\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    } // Iota (ι)\n\n\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n\n  B.fill(0);\n}\n\nexports.keccakP = keccakP;\n\nclass Keccak extends utils_js_1.Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen) {\n    let enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false; // Can be passed from user as dkLen\n\n    _assert_js_1.default.number(outputLen); // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n\n\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = (0, utils_js_1.u32)(this.state);\n  }\n\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n\n  update(data) {\n    _assert_js_1.default.exists(this);\n\n    const {\n      blockLen,\n      state\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n\n      if (this.pos === blockLen) this.keccak();\n    }\n\n    return this;\n  }\n\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this; // Do the padding\n\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n\n  writeInto(out) {\n    _assert_js_1.default.exists(this, false);\n\n    _assert_js_1.default.bytes(out);\n\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n\n    return out;\n  }\n\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n\n  xof(bytes) {\n    _assert_js_1.default.number(bytes);\n\n    return this.xofInto(new Uint8Array(bytes));\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.output(out, this);\n\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds; // Suffix can change in cSHAKE\n\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n\n}\n\nexports.Keccak = Keccak;\n\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\n\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\r\n * SHA3-256 hash function\r\n * @param message - that would be hashed\r\n */\n\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\r\n * keccak-256 hash function. Different from SHA3-256.\r\n * @param message - that would be hashed\r\n */\n\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\n\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)(function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n});\n\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/node_modules/@noble/hashes/sha3.js"],"names":["Object","defineProperty","exports","value","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","_assert_js_1","require","_u64_js_1","utils_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","default","split","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Hash","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","u32","keccak","update","data","exists","toBytes","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","wrapConstructor","genShake","wrapConstructorWithOpts","opts","dkLen","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\r\nconst _assert_js_1 = require(\"./_assert.js\");\r\nconst _u64_js_1 = require(\"./_u64.js\");\r\nconst utils_js_1 = require(\"./utils.js\");\r\n// Various per round constants calculations\r\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst _7n = BigInt(7);\r\nconst _256n = BigInt(256);\r\nconst _0x71n = BigInt(0x71);\r\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\r\n    // Pi\r\n    [x, y] = [y, (2 * x + 3 * y) % 5];\r\n    SHA3_PI.push(2 * (5 * y + x));\r\n    // Rotational\r\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\r\n    // Iota\r\n    let t = _0n;\r\n    for (let j = 0; j < 7; j++) {\r\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\r\n        if (R & _2n)\r\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\r\n    }\r\n    _SHA3_IOTA.push(t);\r\n}\r\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\r\n// Left rotation (without 0, 32, 64)\r\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\r\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\r\n// Same as keccakf1600, but allows to skip some rounds\r\nfunction keccakP(s, rounds = 24) {\r\n    const B = new Uint32Array(5 * 2);\r\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\r\n    for (let round = 24 - rounds; round < 24; round++) {\r\n        // Theta θ\r\n        for (let x = 0; x < 10; x++)\r\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\r\n        for (let x = 0; x < 10; x += 2) {\r\n            const idx1 = (x + 8) % 10;\r\n            const idx0 = (x + 2) % 10;\r\n            const B0 = B[idx0];\r\n            const B1 = B[idx0 + 1];\r\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\r\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\r\n            for (let y = 0; y < 50; y += 10) {\r\n                s[x + y] ^= Th;\r\n                s[x + y + 1] ^= Tl;\r\n            }\r\n        }\r\n        // Rho (ρ) and Pi (π)\r\n        let curH = s[2];\r\n        let curL = s[3];\r\n        for (let t = 0; t < 24; t++) {\r\n            const shift = SHA3_ROTL[t];\r\n            const Th = rotlH(curH, curL, shift);\r\n            const Tl = rotlL(curH, curL, shift);\r\n            const PI = SHA3_PI[t];\r\n            curH = s[PI];\r\n            curL = s[PI + 1];\r\n            s[PI] = Th;\r\n            s[PI + 1] = Tl;\r\n        }\r\n        // Chi (χ)\r\n        for (let y = 0; y < 50; y += 10) {\r\n            for (let x = 0; x < 10; x++)\r\n                B[x] = s[y + x];\r\n            for (let x = 0; x < 10; x++)\r\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\r\n        }\r\n        // Iota (ι)\r\n        s[0] ^= SHA3_IOTA_H[round];\r\n        s[1] ^= SHA3_IOTA_L[round];\r\n    }\r\n    B.fill(0);\r\n}\r\nexports.keccakP = keccakP;\r\nclass Keccak extends utils_js_1.Hash {\r\n    // NOTE: we accept arguments in bytes instead of bits here.\r\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.suffix = suffix;\r\n        this.outputLen = outputLen;\r\n        this.enableXOF = enableXOF;\r\n        this.rounds = rounds;\r\n        this.pos = 0;\r\n        this.posOut = 0;\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        // Can be passed from user as dkLen\r\n        _assert_js_1.default.number(outputLen);\r\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\r\n        if (0 >= this.blockLen || this.blockLen >= 200)\r\n            throw new Error('Sha3 supports only keccak-f1600 function');\r\n        this.state = new Uint8Array(200);\r\n        this.state32 = (0, utils_js_1.u32)(this.state);\r\n    }\r\n    keccak() {\r\n        keccakP(this.state32, this.rounds);\r\n        this.posOut = 0;\r\n        this.pos = 0;\r\n    }\r\n    update(data) {\r\n        _assert_js_1.default.exists(this);\r\n        const { blockLen, state } = this;\r\n        data = (0, utils_js_1.toBytes)(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            for (let i = 0; i < take; i++)\r\n                state[this.pos++] ^= data[pos++];\r\n            if (this.pos === blockLen)\r\n                this.keccak();\r\n        }\r\n        return this;\r\n    }\r\n    finish() {\r\n        if (this.finished)\r\n            return;\r\n        this.finished = true;\r\n        const { state, suffix, pos, blockLen } = this;\r\n        // Do the padding\r\n        state[pos] ^= suffix;\r\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\r\n            this.keccak();\r\n        state[blockLen - 1] ^= 0x80;\r\n        this.keccak();\r\n    }\r\n    writeInto(out) {\r\n        _assert_js_1.default.exists(this, false);\r\n        _assert_js_1.default.bytes(out);\r\n        this.finish();\r\n        const bufferOut = this.state;\r\n        const { blockLen } = this;\r\n        for (let pos = 0, len = out.length; pos < len;) {\r\n            if (this.posOut >= blockLen)\r\n                this.keccak();\r\n            const take = Math.min(blockLen - this.posOut, len - pos);\r\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\r\n            this.posOut += take;\r\n            pos += take;\r\n        }\r\n        return out;\r\n    }\r\n    xofInto(out) {\r\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\r\n        if (!this.enableXOF)\r\n            throw new Error('XOF is not possible for this instance');\r\n        return this.writeInto(out);\r\n    }\r\n    xof(bytes) {\r\n        _assert_js_1.default.number(bytes);\r\n        return this.xofInto(new Uint8Array(bytes));\r\n    }\r\n    digestInto(out) {\r\n        _assert_js_1.default.output(out, this);\r\n        if (this.finished)\r\n            throw new Error('digest() was already called');\r\n        this.writeInto(out);\r\n        this.destroy();\r\n        return out;\r\n    }\r\n    digest() {\r\n        return this.digestInto(new Uint8Array(this.outputLen));\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.state.fill(0);\r\n    }\r\n    _cloneInto(to) {\r\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\r\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\r\n        to.state32.set(this.state32);\r\n        to.pos = this.pos;\r\n        to.posOut = this.posOut;\r\n        to.finished = this.finished;\r\n        to.rounds = rounds;\r\n        // Suffix can change in cSHAKE\r\n        to.suffix = suffix;\r\n        to.outputLen = outputLen;\r\n        to.enableXOF = enableXOF;\r\n        to.destroyed = this.destroyed;\r\n        return to;\r\n    }\r\n}\r\nexports.Keccak = Keccak;\r\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\r\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\r\n/**\r\n * SHA3-256 hash function\r\n * @param message - that would be hashed\r\n */\r\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\r\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\r\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\r\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\r\n/**\r\n * keccak-256 hash function. Different from SHA3-256.\r\n * @param message - that would be hashed\r\n */\r\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\r\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\r\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\r\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\r\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\r\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\r\n"]},"metadata":{},"sourceType":"script"}