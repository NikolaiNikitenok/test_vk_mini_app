{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"textLevel\"],\n    _excluded2 = [\"size\", \"selected\", \"textLevel\", \"before\", \"after\", \"expandable\", \"children\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { getTitleFromChildren, hasReactNode } from \"../../lib/utils\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon16Dropdown } from \"@vkontakte/icons\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Caption } from \"../Typography/Caption/Caption\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\n\nvar SubnavigationButtonTypography = function SubnavigationButtonTypography(_ref) {\n  var textLevel = _ref.textLevel,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  if (textLevel === 1) {\n    return createScopedElement(Subhead, restProps);\n  }\n\n  return createScopedElement(Caption, _extends({\n    level: textLevel === 2 ? \"1\" : \"2\"\n  }, restProps));\n};\n\nexport var SubnavigationButton = function SubnavigationButton(props) {\n  var platform = usePlatform();\n\n  var size = props.size,\n      selected = props.selected,\n      textLevel = props.textLevel,\n      before = props.before,\n      after = props.after,\n      expandable = props.expandable,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, _excluded2);\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    hasActive: false,\n    focusVisibleMode: \"outside\",\n    vkuiClass: classNames(getClassName(\"SubnavigationButton\", platform), \"SubnavigationButton--\".concat(size), {\n      \"SubnavigationButton--selected\": selected\n    }),\n    \"aria-label\": getTitleFromChildren(children)\n  }), createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__in\"\n  }, hasReactNode(before) && createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__before\"\n  }, before), createScopedElement(SubnavigationButtonTypography, {\n    textLevel: textLevel,\n    vkuiClass: \"SubnavigationButton__label\",\n    Component: \"span\"\n  }, children), hasReactNode(after) && createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__after\"\n  }, after), expandable && createScopedElement(Icon16Dropdown, {\n    vkuiClass: \"SubnavigationButton__expandableIcon\"\n  })));\n};\nSubnavigationButton.defaultProps = {\n  size: \"m\",\n  textLevel: 1\n};","map":{"version":3,"mappings":";;;;;AAEA,SAASA,UAAT;AACA,SAASC,YAAT;AACA,SAASC,oBAAT,EAA+BC,YAA/B;AACA,OAAOC,QAAP;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT;AACA,SAASC,OAAT;AACA,OAAOC,OAAP;;AAwBA,IAAMC,6BAAoE,GAAG,SAAvEA,6BAAuE,OAG1C;AAAA,MAFjCC,SAEiC,QAFjCA,SAEiC;AAAA,MAD9BC,SAC8B;;AACjC,MAAID,SAAS,KAAK,CAAlB,EAAqB;AACnB,WAAOE,oBAACJ,OAAD,EAAaG,SAAb,CAAP;AACD;;AAED,SAAOC,oBAACL,OAAD;AAASM,SAAK,EAAEH,SAAS,KAAK,CAAdA,GAAkB,GAAlBA,GAAwB;AAAxC,KAAiDC,SAAjD,EAAP;AARF;;AAWA,OAAO,IAAMG,mBAAuD,GAAG,SAA1DA,mBAA0D,CACrEC,KADqE,EAElE;AACH,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AACA,MACEW,IADF,GASIF,KATJ,CACEE,IADF;AAAA,MAEEC,QAFF,GASIH,KATJ,CAEEG,QAFF;AAAA,MAGER,SAHF,GASIK,KATJ,CAGEL,SAHF;AAAA,MAIES,MAJF,GASIJ,KATJ,CAIEI,MAJF;AAAA,MAKEC,KALF,GASIL,KATJ,CAKEK,KALF;AAAA,MAMEC,UANF,GASIN,KATJ,CAMEM,UANF;AAAA,MAOEC,QAPF,GASIP,KATJ,CAOEO,QAPF;AAAA,MAQKX,SARL,4BASII,KATJ;;AAWA,SACEH,oBAACR,QAAD,eACMO,SADN;AAEEY,aAAS,EAAE,KAFb;AAGEC,oBAAgB,EAAC,SAHnB;AAIEC,aAAS,EAAEzB,UAAU,CACnBC,YAAY,CAAC,qBAAD,EAAwBe,QAAxB,CADO,iCAEKC,IAFL,GAGnB;AACE,uCAAiCC;AADnC,KAHmB,CAJvB;AAWE,kBAAYhB,oBAAoB,CAACoB,QAAD;AAXlC,MAaEV;AAAMa,aAAS,EAAC;AAAhB,KACGtB,YAAY,CAACgB,MAAD,CAAZhB,IACCS;AAAMa,aAAS,EAAC;AAAhB,KAA+CN,MAA/C,CAFJ,EAIEP,oBAACH,6BAAD;AACEC,aAAS,EAAEA,SADb;AAEEe,aAAS,EAAC,4BAFZ;AAGEC,aAAS,EAAC;AAHZ,KAKGJ,QALH,CAJF,EAWGnB,YAAY,CAACiB,KAAD,CAAZjB,IACCS;AAAMa,aAAS,EAAC;AAAhB,KAA8CL,KAA9C,CAZJ,EAcGC,UAAU,IACTT,oBAACP,cAAD;AAAgBoB,aAAS,EAAC;AAA1B,IAfJ,CAbF,CADF;AAfK;AAmDPX,mBAAmB,CAACa,YAApBb,GAAmC;AACjCG,MAAI,EAAE,GAD2B;AAEjCP,WAAS,EAAE;AAFsB,CAAnCI","names":["classNames","getClassName","getTitleFromChildren","hasReactNode","Tappable","Icon16Dropdown","usePlatform","Caption","Subhead","SubnavigationButtonTypography","textLevel","restProps","createScopedElement","level","SubnavigationButton","props","platform","size","selected","before","after","expandable","children","hasActive","focusVisibleMode","vkuiClass","Component","defaultProps"],"sources":["../../../src/components/SubnavigationButton/SubnavigationButton.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { HasComponent } from \"../../types\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { getTitleFromChildren, hasReactNode } from \"../../lib/utils\";\nimport Tappable, { TappableProps } from \"../Tappable/Tappable\";\nimport { Icon16Dropdown } from \"@vkontakte/icons\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Caption } from \"../Typography/Caption/Caption\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport \"./SubnavigationButton.css\";\n\nexport interface SubnavigationButtonProps extends Omit<TappableProps, \"size\"> {\n  size?: \"m\" | \"l\";\n  selected?: boolean;\n  /**\n   * Размер шрифта. Этим свойством рекомендуется пользоваться, чтобы отрегулировать размер шрифта у кнопок в `<SubnavigationBar mode=\"fixed\" />`\n   */\n  textLevel?: 1 | 2 | 3;\n  /**\n   * Рекомендуется использовать только иконки с размером 24\n   */\n  before?: React.ReactNode;\n  /**\n   * Рекомендуется использовать только `<Counter size=\"s\" />` или `<Badge />`\n   */\n  after?: React.ReactNode;\n  expandable?: boolean;\n}\n\ntype SubnavButtonTypographyProps = Pick<SubnavigationButtonProps, \"textLevel\"> &\n  HasComponent;\n\nconst SubnavigationButtonTypography: React.FC<SubnavButtonTypographyProps> = ({\n  textLevel,\n  ...restProps\n}: SubnavButtonTypographyProps) => {\n  if (textLevel === 1) {\n    return <Subhead {...restProps} />;\n  }\n\n  return <Caption level={textLevel === 2 ? \"1\" : \"2\"} {...restProps} />;\n};\n\nexport const SubnavigationButton: React.FC<SubnavigationButtonProps> = (\n  props: SubnavigationButtonProps\n) => {\n  const platform = usePlatform();\n  const {\n    size,\n    selected,\n    textLevel,\n    before,\n    after,\n    expandable,\n    children,\n    ...restProps\n  } = props;\n\n  return (\n    <Tappable\n      {...restProps}\n      hasActive={false}\n      focusVisibleMode=\"outside\"\n      vkuiClass={classNames(\n        getClassName(\"SubnavigationButton\", platform),\n        `SubnavigationButton--${size}`,\n        {\n          \"SubnavigationButton--selected\": selected,\n        }\n      )}\n      aria-label={getTitleFromChildren(children)}\n    >\n      <span vkuiClass=\"SubnavigationButton__in\">\n        {hasReactNode(before) && (\n          <span vkuiClass=\"SubnavigationButton__before\">{before}</span>\n        )}\n        <SubnavigationButtonTypography\n          textLevel={textLevel}\n          vkuiClass=\"SubnavigationButton__label\"\n          Component=\"span\"\n        >\n          {children}\n        </SubnavigationButtonTypography>\n        {hasReactNode(after) && (\n          <span vkuiClass=\"SubnavigationButton__after\">{after}</span>\n        )}\n        {expandable && (\n          <Icon16Dropdown vkuiClass=\"SubnavigationButton__expandableIcon\" />\n        )}\n      </span>\n    </Tappable>\n  );\n};\n\nSubnavigationButton.defaultProps = {\n  size: \"m\",\n  textLevel: 1,\n};\n"]},"metadata":{},"sourceType":"module"}