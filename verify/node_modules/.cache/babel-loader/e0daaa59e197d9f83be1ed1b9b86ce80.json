{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha256 = void 0;\n\nconst _sha2_js_1 = require(\"./_sha2.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Choice: a ? b : c\n\n\nconst Chi = (a, b, c) => a & b ^ ~a & c; // Majority function, true if any two inpust is true\n\n\nconst Maj = (a, b, c) => a & b ^ a & c ^ b & c; // Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\n\n\nconst SHA256_K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]); // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\n\nconst IV = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]); // Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\n\nconst SHA256_W = new Uint32Array(64);\n\nclass SHA256 extends _sha2_js_1.SHA2 {\n  constructor() {\n    super(64, 32, 8, false); // We cannot use array here since array allows indexing by variable\n    // which means optimizer/compiler cannot use registers.\n\n    this.A = IV[0] | 0;\n    this.B = IV[1] | 0;\n    this.C = IV[2] | 0;\n    this.D = IV[3] | 0;\n    this.E = IV[4] | 0;\n    this.F = IV[5] | 0;\n    this.G = IV[6] | 0;\n    this.H = IV[7] | 0;\n  }\n\n  get() {\n    const {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n    return [A, B, C, D, E, F, G, H];\n  } // prettier-ignore\n\n\n  set(A, B, C, D, E, F, G, H) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;\n      const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;\n      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n    } // Compression function main loop, 64 rounds\n\n\n    let {\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H\n    } = this;\n\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n      const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n      const T2 = sigma0 + Maj(A, B, C) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = D + T1 | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = T1 + T2 | 0;\n    } // Add the compressed chunk to the current hash value\n\n\n    A = A + this.A | 0;\n    B = B + this.B | 0;\n    C = C + this.C | 0;\n    D = D + this.D | 0;\n    E = E + this.E | 0;\n    F = F + this.F | 0;\n    G = G + this.G | 0;\n    H = H + this.H | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n\n  roundClean() {\n    SHA256_W.fill(0);\n  }\n\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n\n}\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\n\n\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/node_modules/@noble/hashes/sha256.js"],"names":["Object","defineProperty","exports","value","sha256","_sha2_js_1","require","utils_js_1","Chi","a","b","c","Maj","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","SHA2","constructor","A","B","C","D","E","F","G","H","get","set","process","view","offset","i","getUint32","W15","W2","s0","rotr","s1","sigma1","T1","sigma0","T2","roundClean","fill","destroy","buffer","wrapConstructor"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sha256 = void 0;\r\nconst _sha2_js_1 = require(\"./_sha2.js\");\r\nconst utils_js_1 = require(\"./utils.js\");\r\n// Choice: a ? b : c\r\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = new Uint32Array([\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = new Uint32Array([\r\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = new Uint32Array(64);\r\nclass SHA256 extends _sha2_js_1.SHA2 {\r\n    constructor() {\r\n        super(64, 32, 8, false);\r\n        // We cannot use array here since array allows indexing by variable\r\n        // which means optimizer/compiler cannot use registers.\r\n        this.A = IV[0] | 0;\r\n        this.B = IV[1] | 0;\r\n        this.C = IV[2] | 0;\r\n        this.D = IV[3] | 0;\r\n        this.E = IV[4] | 0;\r\n        this.F = IV[5] | 0;\r\n        this.G = IV[6] | 0;\r\n        this.H = IV[7] | 0;\r\n    }\r\n    get() {\r\n        const { A, B, C, D, E, F, G, H } = this;\r\n        return [A, B, C, D, E, F, G, H];\r\n    }\r\n    // prettier-ignore\r\n    set(A, B, C, D, E, F, G, H) {\r\n        this.A = A | 0;\r\n        this.B = B | 0;\r\n        this.C = C | 0;\r\n        this.D = D | 0;\r\n        this.E = E | 0;\r\n        this.F = F | 0;\r\n        this.G = G | 0;\r\n        this.H = H | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            SHA256_W[i] = view.getUint32(offset, false);\r\n        for (let i = 16; i < 64; i++) {\r\n            const W15 = SHA256_W[i - 15];\r\n            const W2 = SHA256_W[i - 2];\r\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\r\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\r\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n        }\r\n        // Compression function main loop, 64 rounds\r\n        let { A, B, C, D, E, F, G, H } = this;\r\n        for (let i = 0; i < 64; i++) {\r\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\r\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\r\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n            H = G;\r\n            G = F;\r\n            F = E;\r\n            E = (D + T1) | 0;\r\n            D = C;\r\n            C = B;\r\n            B = A;\r\n            A = (T1 + T2) | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        A = (A + this.A) | 0;\r\n        B = (B + this.B) | 0;\r\n        C = (C + this.C) | 0;\r\n        D = (D + this.D) | 0;\r\n        E = (E + this.E) | 0;\r\n        F = (F + this.F) | 0;\r\n        G = (G + this.G) | 0;\r\n        H = (H + this.H) | 0;\r\n        this.set(A, B, C, D, E, F, G, H);\r\n    }\r\n    roundClean() {\r\n        SHA256_W.fill(0);\r\n    }\r\n    destroy() {\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n        this.buffer.fill(0);\r\n    }\r\n}\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\r\n"]},"metadata":{},"sourceType":"script"}