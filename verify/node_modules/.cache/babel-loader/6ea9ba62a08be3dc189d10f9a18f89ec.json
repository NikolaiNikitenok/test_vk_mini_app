{"ast":null,"code":"/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](solc-abi-standard).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\"; // https://docs.soliditylang.org/en/v0.8.17/control-structures.html\n\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\n\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n  let message = \"missing revert data\";\n  let reason = null;\n  const invocation = null;\n  let revert = null;\n\n  if (data) {\n    message = \"execution reverted\";\n    const bytes = getBytes(data);\n    data = hexlify(data);\n\n    if (bytes.length % 32 !== 4) {\n      message += \" (could not decode reason; invalid data length)\";\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n      // Error(string)\n      try {\n        reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        revert = {\n          signature: \"Error(string)\",\n          name: \"Error\",\n          args: [reason]\n        };\n        message += `: ${JSON.stringify(reason)}`;\n      } catch (error) {\n        console.log(error);\n        message += \" (could not decode reason; invalid data)\";\n      }\n    } else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n      // Panic(uint256)\n      try {\n        const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n        revert = {\n          signature: \"Panic(uint256)\",\n          name: \"Panic\",\n          args: [code]\n        };\n        reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n        message += `: ${reason}`;\n      } catch (error) {\n        console.log(error);\n        message += \" (could not decode panic reason)\";\n      }\n    } else {\n      message += \" (unknown custom error)\";\n    }\n  }\n\n  const transaction = {\n    to: tx.to ? getAddress(tx.to) : null,\n    data: tx.data || \"0x\"\n  };\n\n  if (tx.from) {\n    transaction.from = getAddress(tx.from);\n  }\n\n  return makeError(message, \"CALL_EXCEPTION\", {\n    action,\n    data,\n    reason,\n    transaction,\n    invocation,\n    revert\n  });\n}\n/**\n  * About AbiCoder\n  */\n\n\nexport class AbiCoder {\n  #getCoder(param) {\n    if (param.isArray()) {\n      return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n    }\n\n    if (param.isTuple()) {\n      return new TupleCoder(param.components.map(c => this.#getCoder(c)), param.name);\n    }\n\n    switch (param.baseType) {\n      case \"address\":\n        return new AddressCoder(param.name);\n\n      case \"bool\":\n        return new BooleanCoder(param.name);\n\n      case \"string\":\n        return new StringCoder(param.name);\n\n      case \"bytes\":\n        return new BytesCoder(param.name);\n\n      case \"\":\n        return new NullCoder(param.name);\n    } // u?int[0-9]*\n\n\n    let match = param.type.match(paramTypeNumber);\n\n    if (match) {\n      let size = parseInt(match[2] || \"256\");\n      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n      return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n    } // bytes[0-9]+\n\n\n    match = param.type.match(paramTypeBytes);\n\n    if (match) {\n      let size = parseInt(match[1]);\n      assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n      return new FixedBytesCoder(size, param.name);\n    }\n\n    assertArgument(false, \"invalid type\", \"type\", param.type);\n  }\n  /**\n   *  Get the default values for the given %%types%%.\n   *\n   *  For example, a ``uint`` is by default ``0`` and ``bool``\n   *  is by default ``false``.\n   */\n\n\n  getDefaultValue(types) {\n    const coders = types.map(type => this.#getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.defaultValue();\n  }\n  /**\n   *  Encode the %%values%% as the %%types%% into ABI data.\n   *\n   *  @returns DataHexstring\n   */\n\n\n  encode(types, values) {\n    assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n    const coders = types.map(type => this.#getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    const writer = new Writer();\n    coder.encode(writer, values);\n    return writer.data;\n  }\n  /**\n   *  Decode the ABI %%data%% as the %%types%% into values.\n   *\n   *  If %%loose%% decoding is enabled, then strict padding is\n   *  not enforced. Some older versions of Solidity incorrectly\n   *  padded event data emitted from ``external`` functions.\n   */\n\n\n  decode(types, data, loose) {\n    const coders = types.map(type => this.#getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.decode(new Reader(data, loose));\n  }\n  /**\n   *  Returns the shared singleton instance of a default [[AbiCoder]].\n   *\n   *  On the first call, the instance is created internally.\n   */\n\n\n  static defaultAbiCoder() {\n    if (defaultCoder == null) {\n      defaultCoder = new AbiCoder();\n    }\n\n    return defaultCoder;\n  }\n  /**\n   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n   *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n   *  the Transaction %%tx%%.\n   */\n\n\n  static getBuiltinCallException(action, tx, data) {\n    return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assertArgumentCount","assertArgument","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","getAddress","getBytes","hexlify","makeError","PanicReasons","Map","set","paramTypeBytes","RegExp","paramTypeNumber","defaultCoder","getBuiltinCallException","action","tx","data","abiCoder","message","reason","invocation","revert","bytes","length","slice","decode","signature","name","args","JSON","stringify","error","console","log","code","Number","get","transaction","to","from","AbiCoder","param","isArray","arrayChildren","arrayLength","isTuple","components","map","c","baseType","match","type","size","parseInt","getDefaultValue","types","coders","coder","defaultValue","encode","values","writer","loose","defaultAbiCoder"],"sourceRoot":"","sources":["../../src.ts/abi/abi-coder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}