{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scryptAsync = exports.scrypt = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst sha256_js_1 = require(\"./sha256.js\");\n\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // RFC 7914 Scrypt KDF\n// Left rotate for uint32\n\n\nconst rotl = (a, b) => a << b | a >>> 32 - b; // The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\n\n\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++],\n      y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++],\n      y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++],\n      y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++],\n      y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++],\n      y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++],\n      y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++],\n      y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++],\n      y15 = prev[pi++] ^ input[ii++]; // Save state to temporary variables (salsa)\n\n  let x00 = y00,\n      x01 = y01,\n      x02 = y02,\n      x03 = y03,\n      x04 = y04,\n      x05 = y05,\n      x06 = y06,\n      x07 = y07,\n      x08 = y08,\n      x09 = y09,\n      x10 = y10,\n      x11 = y11,\n      x12 = y12,\n      x13 = y13,\n      x14 = y14,\n      x15 = y15; // Main loop (salsa)\n\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0, 7);\n    x08 ^= rotl(x04 + x00 | 0, 9);\n    x12 ^= rotl(x08 + x04 | 0, 13);\n    x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0, 7);\n    x13 ^= rotl(x09 + x05 | 0, 9);\n    x01 ^= rotl(x13 + x09 | 0, 13);\n    x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0, 7);\n    x02 ^= rotl(x14 + x10 | 0, 9);\n    x06 ^= rotl(x02 + x14 | 0, 13);\n    x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0, 7);\n    x07 ^= rotl(x03 + x15 | 0, 9);\n    x11 ^= rotl(x07 + x03 | 0, 13);\n    x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0, 7);\n    x02 ^= rotl(x01 + x00 | 0, 9);\n    x03 ^= rotl(x02 + x01 | 0, 13);\n    x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0, 7);\n    x07 ^= rotl(x06 + x05 | 0, 9);\n    x04 ^= rotl(x07 + x06 | 0, 13);\n    x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0, 7);\n    x08 ^= rotl(x11 + x10 | 0, 9);\n    x09 ^= rotl(x08 + x11 | 0, 13);\n    x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0, 7);\n    x13 ^= rotl(x12 + x15 | 0, 9);\n    x14 ^= rotl(x13 + x12 | 0, 13);\n    x15 ^= rotl(x14 + x13 | 0, 18);\n  } // Write output (salsa)\n\n\n  out[oi++] = y00 + x00 | 0;\n  out[oi++] = y01 + x01 | 0;\n  out[oi++] = y02 + x02 | 0;\n  out[oi++] = y03 + x03 | 0;\n  out[oi++] = y04 + x04 | 0;\n  out[oi++] = y05 + x05 | 0;\n  out[oi++] = y06 + x06 | 0;\n  out[oi++] = y07 + x07 | 0;\n  out[oi++] = y08 + x08 | 0;\n  out[oi++] = y09 + x09 | 0;\n  out[oi++] = y10 + x10 | 0;\n  out[oi++] = y11 + x11 | 0;\n  out[oi++] = y12 + x12 | 0;\n  out[oi++] = y13 + x13 | 0;\n  out[oi++] = y14 + x14 | 0;\n  out[oi++] = y15 + x15 | 0;\n}\n\nfunction BlockMix(input, ii, out, oi, r) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n\n\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n\n    XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n} // Common prologue and epilogue for sync/async functions\n\n\nfunction scryptInit(password, salt, _opts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = (0, utils_js_1.checkOpts)({\n    dkLen: 32,\n    asyncTick: 10,\n    maxmem: 1024 ** 3 + 1024\n  }, _opts);\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    asyncTick,\n    maxmem,\n    onProgress\n  } = opts;\n\n  _assert_js_1.default.number(N);\n\n  _assert_js_1.default.number(r);\n\n  _assert_js_1.default.number(p);\n\n  _assert_js_1.default.number(dkLen);\n\n  _assert_js_1.default.number(asyncTick);\n\n  _assert_js_1.default.number(maxmem);\n\n  if (onProgress !== undefined && typeof onProgress !== 'function') throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n\n  if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n  }\n\n  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {\n    throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n  }\n\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n  }\n\n  const memUsed = blockSize * (N + p);\n\n  if (memUsed > maxmem) {\n    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n  } // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n\n\n  const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, {\n    c: 1,\n    dkLen: blockSize * p\n  });\n  const B32 = (0, utils_js_1.u32)(B); // Re-used between parallel iterations. Array(iterations) of B\n\n  const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n  const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n\n  let blockMixCb = () => {};\n\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p; // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n\n  return {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  };\n}\n\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n  const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, {\n    c: 1,\n    dkLen\n  });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\n\n\nfunction scrypt(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb\n  } = scryptInit(password, salt, opts);\n\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n\n\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n\n      blockMixCb();\n    }\n\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n\n    blockMixCb();\n\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n\n\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n\n      blockMixCb();\n    }\n  }\n\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\n\nasync function scryptAsync(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  } = scryptInit(password, salt, opts);\n\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n\n\n    let pos = 0;\n    await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, i => {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n\n    blockMixCb();\n    await (0, utils_js_1.asyncLoop)(N, asyncTick, i => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n\n\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n\n      blockMixCb();\n    });\n  }\n\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\nexports.scryptAsync = scryptAsync;","map":{"version":3,"sources":["/home/nikolai/GitHub/test_vk_mini_app/test/node_modules/@noble/hashes/scrypt.js"],"names":["Object","defineProperty","exports","value","scryptAsync","scrypt","_assert_js_1","require","sha256_js_1","pbkdf2_js_1","utils_js_1","rotl","a","b","XorAndSalsa","prev","pi","input","ii","out","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","i","BlockMix","r","head","tail","scryptInit","password","salt","_opts","opts","checkOpts","dkLen","asyncTick","maxmem","N","p","onProgress","default","number","undefined","Error","blockSize","blockSize32","memUsed","B","pbkdf2","sha256","c","B32","u32","V","Uint8Array","tmp","blockMixCb","totalBlockMix","callbackPer","Math","max","floor","blockMixCnt","scryptOutput","res","fill","Pi","pos","j","k","asyncLoop"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0, utils_js_1.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    _assert_js_1.default.number(N);\n    _assert_js_1.default.number(r);\n    _assert_js_1.default.number(p);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    _assert_js_1.default.number(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0, utils_js_1.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i) => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0, utils_js_1.asyncLoop)(N, asyncTick, (i) => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;\n"]},"metadata":{},"sourceType":"script"}