{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nexport var useDraggable = function useDraggable(_ref) {\n  var onDragFinish = _ref.onDragFinish;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragging = _React$useState2[0],\n      setDragging = _React$useState2[1];\n\n  var rootElRef = React.useRef(null);\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      siblings = _React$useState4[0],\n      setSiblings = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dragStartIndex = _React$useState6[0],\n      setDragStartIndex = _React$useState6[1];\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dragEndIndex = _React$useState8[0],\n      setDragEndIndex = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      dragShift = _React$useState10[0],\n      setDragShift = _React$useState10[1];\n\n  var _React$useState11 = React.useState(undefined),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      dragDirection = _React$useState12[0],\n      setDragDirection = _React$useState12[1];\n\n  var onDragStart = function onDragStart() {\n    var _rootEl$parentElement;\n\n    var rootEl = rootElRef.current;\n\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n    var _siblings = [];\n\n    if ((_rootEl$parentElement = rootEl.parentElement) !== null && _rootEl$parentElement !== void 0 && _rootEl$parentElement.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children);\n    }\n\n    var idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  var onDragMove = function onDragMove(e) {\n    e.originalEvent.preventDefault();\n    var rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = \"translateY(\".concat(e.shiftY, \"px)\");\n      var rootGesture = rootEl.getBoundingClientRect();\n      setDragDirection(dragShift - e.shiftY < 0 ? \"down\" : \"up\");\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n      siblings.forEach(function (sibling, siblingIndex) {\n        var siblingGesture = sibling.getBoundingClientRect();\n        var siblingHalfHeight = siblingGesture.height / 2;\n        var rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        var rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === \"down\") {\n              sibling.style.transform = \"translateY(-100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex + 1;\n            });\n          }\n\n          if (rootUnderSibling && dragDirection === \"up\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === \"up\") {\n              sibling.style.transform = \"translateY(100%)\";\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex - 1;\n            });\n          }\n\n          if (rootOverSibling && dragDirection === \"down\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    }\n  };\n\n  var onDragEnd = function onDragEnd() {\n    var from = dragStartIndex,\n        to = dragEndIndex;\n    siblings.forEach(function (sibling) {\n      sibling.style.transform = \"\";\n    });\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n    setDragging(false);\n    onDragFinish && onDragFinish({\n      from: from,\n      to: to\n    });\n  };\n\n  var useDraggableProps = {\n    onDragStart: onDragStart,\n    onDragMove: onDragMove,\n    onDragEnd: onDragEnd,\n    dragging: dragging,\n    rootElRef: rootElRef\n  };\n  return useDraggableProps;\n};","map":{"version":3,"mappings":"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","names":["React","useDraggable","onDragFinish","useState","dragging","setDragging","rootElRef","useRef","siblings","setSiblings","dragStartIndex","setDragStartIndex","dragEndIndex","setDragEndIndex","dragShift","setDragShift","undefined","dragDirection","setDragDirection","onDragStart","rootEl","current","_siblings","parentElement","_rootEl$parentElement","childNodes","Array","from","children","idx","indexOf","onDragMove","e","originalEvent","preventDefault","style","transform","shiftY","rootGesture","getBoundingClientRect","forEach","sibling","siblingIndex","siblingGesture","siblingHalfHeight","height","rootOverSibling","bottom","top","rootUnderSibling","onDragEnd","to","useDraggableProps"],"sources":["../../../src/components/Cell/useDraggable.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { TouchEvent } from \"../Touch/Touch\";\nimport { CellProps } from \"./Cell\";\n\nexport interface DraggableProps {\n  onDragStart: () => void;\n  onDragEnd: () => void;\n  onDragMove: (e: TouchEvent) => void;\n}\n\ninterface UseDraggableProps extends DraggableProps {\n  dragging: boolean;\n  rootElRef: any;\n}\n\nexport const useDraggable = ({\n  onDragFinish,\n}: Pick<CellProps, \"onDragFinish\">) => {\n  const [dragging, setDragging] = React.useState<boolean>(false);\n  const rootElRef = React.useRef<HTMLElement>(null);\n\n  const [siblings, setSiblings] = React.useState<HTMLElement[]>([]);\n  const [dragStartIndex, setDragStartIndex] = React.useState<number>(0);\n  const [dragEndIndex, setDragEndIndex] = React.useState<number>(0);\n  const [dragShift, setDragShift] = React.useState<number>(0);\n  const [dragDirection, setDragDirection] = React.useState<\n    \"down\" | \"up\" | undefined\n  >(undefined);\n\n  const onDragStart = () => {\n    const rootEl = rootElRef.current;\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n\n    let _siblings: HTMLElement[] = [];\n    if (rootEl.parentElement?.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children) as HTMLElement[];\n    }\n    const idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (e: TouchEvent) => {\n    e.originalEvent.preventDefault();\n\n    const rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = `translateY(${e.shiftY}px)`;\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      setDragDirection(dragShift - e.shiftY < 0 ? \"down\" : \"up\");\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n\n      siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n        const siblingGesture = sibling.getBoundingClientRect();\n        const siblingHalfHeight = siblingGesture.height / 2;\n\n        const rootOverSibling =\n          rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        const rootUnderSibling =\n          rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === \"down\") {\n              sibling.style.transform = \"translateY(-100%)\";\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n          }\n          if (rootUnderSibling && dragDirection === \"up\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === \"up\") {\n              sibling.style.transform = \"translateY(100%)\";\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n          }\n          if (rootOverSibling && dragDirection === \"down\") {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    }\n  };\n\n  const onDragEnd = () => {\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = \"\";\n    });\n\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n\n    setDragging(false);\n\n    onDragFinish && onDragFinish({ from, to });\n  };\n\n  const useDraggableProps: UseDraggableProps = {\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n    dragging,\n    rootElRef,\n  };\n\n  return useDraggableProps;\n};\n"]},"metadata":{},"sourceType":"module"}