{"ast":null,"code":"import _slicedToArray from\"C:/Users/k8909/OneDrive/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/GitHub/test_vk_mini_app/test/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';// import {ethers} from 'ethers'\nimport{Button,Group,Panel,PanelHeader,PanelHeaderBack,Div,Header,TabsItem,Tabs,Snackbar,Avatar,CellButton}from'@vkontakte/vkui';import{Icon28SettingsOutline,Icon28LogoVk,Icon16Done}from'@vkontakte/icons';// import MetaMask from 'metamask-connect';\nimport Web3 from'web3';// import WalletConnectProvider from '@walletconnect/web3-provider';\nimport'./Persik.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Settings=function Settings(_ref){var id=_ref.id,go=_ref.go;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),userAccount=_useState2[0],setUserAccount=_useState2[1];var onConnect=function onConnect(){var provider;if(window.ethereum){//если есть метамаск\nwindow.ethereum.request({method:\"eth_requestAccounts\"}).then(function(account){setUserAccount(account[0]);getBalance(account[0]);});}else if(window.web3){provider=window.web3.currentProvider;}else{alert(\"Установите МетаМаск!\");}};var getBalance=function getBalance(account){window.ethereum.request({method:\"eth_getBalance\",params:[account,\"Latest\"]}).then(function(balance){console.log(balance);});};return/*#__PURE__*/_jsxs(Panel,{children:[/*#__PURE__*/_jsx(PanelHeader,{left:/*#__PURE__*/_jsx(Icon28LogoVk,{}),children:\" NFT for Events\"}),/*#__PURE__*/_jsxs(Tabs,{children:[/*#__PURE__*/_jsx(TabsItem,{onClick:go,\"data-to\":\"home\",children:\"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\"}),/*#__PURE__*/_jsx(TabsItem,{onClick:go,\"data-to\":\"inventory\",children:\"\\u041C\\u043E\\u0438 \\u041C\\u0435\\u0440\\u043E\\u043F\\u0440\\u0438\\u044F\\u0442\\u0438\\u044F\"}),/*#__PURE__*/_jsx(TabsItem,{selected:true,onClick:go,\"data-to\":\"settings\",children:\"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438\"})]}),/*#__PURE__*/_jsx(Group,{header:/*#__PURE__*/_jsx(Header,{mode:\"secondary\",children:\"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C MetaMask\"}),children:/*#__PURE__*/_jsx(Div,{children:userAccount?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"span\",{children:\"\\u041A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D!!!\"})}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u0435 \\u0441\\u0432\\u043E\\u0439 \\u043A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A \\u043A \\u043F\\u0440\\u0438\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u044E!\"}),/*#__PURE__*/_jsx(Button,{stretched:true,size:\"l\",mode:\"secondary\",onClick:onConnect,children:\"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u043A\\u043E\\u0448\\u0435\\u043B\\u0435\\u043A MetaMask\"})]})})})]});// const [isConnected, setIsConnected] = useState(false);\n// const [ethBalance, setEthBalance] = useState(\"\");\n// const detectCurrentProvider = () => {\n//   let provider;\n//   if (window.ethereum) {\n//     provider = window.ethereum;\n//   } else if (window.web3) {\n//     provider = window.web3.currentProvider;\n//   } else {\n//     console.log(\"Non-ethereum browser detected. You should install Metamask\");\n//   }\n//   return provider;\n// };\n// const onConnect = async() => {\n//   try {\n//     const currentProvider = detectCurrentProvider();\n//     if(currentProvider) {\n//       await currentProvider.request({method: 'eth_requestAccounts'});\n//       const web3 = new Web3(currentProvider);\n//       const userAccount  =await web3.eth.getAccounts();\n//       const account = userAccount[0];\n//       let ethBalance = await web3.eth.getBalance(account);\n//       setEthBalance(ethBalance);\n//       setIsConnected(true);\n//     }\n//   } catch(err) {\n//     console.log(err);\n//   }\n// }\n// const onDisconnect = () => {\n//   setIsConnected(false);\n// }\n// return (\n//   <div className=\"app\">\n//     <div className=\"app-header\">\n//       <h1>React dApp authentication with React, We3.js and Metamask</h1>\n//     </div>\n//     <div className=\"app-wrapper\">\n//       {!isConnected && (\n//         <div>\n//           <button className=\"app-button__login\" onClick={onConnect}>\n//           Login\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//     {isConnected && (\n//       <div className=\"app-wrapper\">\n//         <div className=\"app-details\">\n//           <h2> You are connected to metamask.</h2>\n//           <div className=\"app-balance\">\n//             <span>Balance: </span>\n//             {ethBalance}\n//           </div>\n//         </div>\n//         <div>\n//           <button className=\"app-buttons__logout\" onClick={onDisconnect}>\n//           Disconnect\n//           </button>\n//         </div>\n//       </div>\n//     )}\n//   </div>\n// );\n};// Inventory.propTypes = {\n// \tid: PropTypes.string.isRequired,\n// \tgo: PropTypes.func.isRequired,\n// };\nexport default Settings;","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/src/panels/Settings.js"],"names":["React","useState","useEffect","Button","Group","Panel","PanelHeader","PanelHeaderBack","Div","Header","TabsItem","Tabs","Snackbar","Avatar","CellButton","Icon28SettingsOutline","Icon28LogoVk","Icon16Done","Web3","Settings","id","go","userAccount","setUserAccount","onConnect","provider","window","ethereum","request","method","then","account","getBalance","web3","currentProvider","alert","params","balance","console","log"],"mappings":"iMAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA;AACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,KAAxB,CAA+BC,WAA/B,CAA4CC,eAA5C,CAA6DC,GAA7D,CAAkEC,MAAlE,CAA0EC,QAA1E,CAAoFC,IAApF,CAA0FC,QAA1F,CAAoGC,MAApG,CAA4GC,UAA5G,KAA6H,iBAA7H,CACA,OAAQC,qBAAR,CAA+BC,YAA/B,CAA6CC,UAA7C,KAA8D,kBAA9D,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA;AAEA,MAAO,cAAP,C,6IAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAc,IAAZC,CAAAA,EAAY,MAAZA,EAAY,CAARC,EAAQ,MAARA,EAAQ,CAC9B,cAAsCpB,QAAQ,CAAC,IAAD,CAA9C,wCAAOqB,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACvB,GAAIC,CAAAA,QAAJ,CACA,GAAIC,MAAM,CAACC,QAAX,CAAqB,CACpB;AACAD,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,CAACC,MAAM,CAAE,qBAAT,CAAxB,EAAyDC,IAAzD,CAA8D,SAACC,OAAD,CAAa,CAC1ER,cAAc,CAACQ,OAAO,CAAC,CAAD,CAAR,CAAd,CACAC,UAAU,CAACD,OAAO,CAAC,CAAD,CAAR,CAAV,CACA,CAHD,EAIA,CAND,IAMO,IAAIL,MAAM,CAACO,IAAX,CAAiB,CACvBR,QAAQ,CAAGC,MAAM,CAACO,IAAP,CAAYC,eAAvB,CACA,CAFM,IAEA,CACNC,KAAK,CAAC,sBAAD,CAAL,CACA,CACD,CAbD,CAeA,GAAMH,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACD,OAAD,CAAa,CAC/BL,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,CAACC,MAAM,CAAE,gBAAT,CAA2BO,MAAM,CAAE,CAACL,OAAD,CAAU,QAAV,CAAnC,CAAxB,EAAkFD,IAAlF,CAAuF,SAACO,OAAD,CAAa,CACnGC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EACA,CAFD,EAGA,CAJD,CAOA,mBACC,MAAC,KAAD,yBACC,KAAC,WAAD,EAAa,IAAI,cAAE,KAAC,YAAD,IAAnB,6BADD,cAIC,MAAC,IAAD,yBACC,KAAC,QAAD,EAAU,OAAO,CAAEhB,EAAnB,CAAuB,UAAQ,MAA/B,wDADD,cAGC,KAAC,QAAD,EAAU,OAAO,CAAEA,EAAnB,CAAuB,UAAQ,WAA/B,mGAHD,cAIC,KAAC,QAAD,EAAU,QAAQ,KAAlB,CAAmB,OAAO,CAAEA,EAA5B,CAAgC,UAAQ,UAAxC,oEAJD,GAJD,cAUC,KAAC,KAAD,EAAO,MAAM,cAAE,KAAC,MAAD,EAAQ,IAAI,CAAC,WAAb,mFAAf,uBACC,KAAC,GAAD,WACEC,WAAW,cACO,sCACI,8HADJ,EADP,cAKV,wCAAE,6NAAF,cACA,KAAC,MAAD,EAAQ,SAAS,KAAjB,CAAkB,IAAI,CAAC,GAAvB,CAA2B,IAAI,CAAC,WAAhC,CAA4C,OAAO,CAAEE,SAArD,8HADA,GANH,EADD,EAVD,GADD,CA4BA;AACC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA3HD,CAiIA;AACA;AACA;AACA;AAEA,cAAeL,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import {ethers} from 'ethers'\r\nimport { Button, Group, Panel, PanelHeader, PanelHeaderBack, Div, Header, TabsItem, Tabs, Snackbar, Avatar, CellButton} from '@vkontakte/vkui';\r\nimport {Icon28SettingsOutline, Icon28LogoVk, Icon16Done} from '@vkontakte/icons';\r\n// import MetaMask from 'metamask-connect';\r\nimport Web3 from 'web3';\r\n// import WalletConnectProvider from '@walletconnect/web3-provider';\r\n\r\nimport './Persik.css';\r\n\r\nconst Settings = ({id, go}) => {\r\n\tconst [userAccount, setUserAccount] = useState(null);\r\n\r\n\tconst onConnect = () => {\r\n\t\tlet provider;\r\n\t\tif (window.ethereum) {\r\n\t\t\t//если есть метамаск\r\n\t\t\twindow.ethereum.request({method: \"eth_requestAccounts\"}).then((account) => {\r\n\t\t\t\tsetUserAccount(account[0]);\r\n\t\t\t\tgetBalance(account[0]);\r\n\t\t\t})\r\n\t\t} else if (window.web3) {\r\n\t\t\tprovider = window.web3.currentProvider;\r\n\t\t} else {\r\n\t\t\talert(\"Установите МетаМаск!\")\r\n\t\t}\r\n\t};\r\n\r\n\tconst getBalance = (account) => {\r\n\t\twindow.ethereum.request({method: \"eth_getBalance\", params: [account, \"Latest\"],}).then((balance) => {\r\n\t\t\tconsole.log(balance)\t\r\n\t\t})\r\n\t};\r\n    \r\n\r\n\treturn(\r\n\t\t<Panel>\r\n\t\t\t<PanelHeader left={<Icon28LogoVk/>}> NFT for Events\r\n\t\t\t\r\n\t\t\t</PanelHeader>\r\n\t\t\t<Tabs>\r\n\t\t\t\t<TabsItem onClick={go} data-to=\"home\">Главная</TabsItem>\r\n\t\t\t\t{/* <TabsItem>Купить билеты</TabsItem> */}\r\n\t\t\t\t<TabsItem onClick={go} data-to=\"inventory\">Мои Мероприятия</TabsItem>\r\n\t\t\t\t<TabsItem selected onClick={go} data-to=\"settings\">Настройки</TabsItem>\r\n\t\t\t</Tabs>\r\n\t\t\t<Group header={<Header mode=\"secondary\">Подключить MetaMask</Header>}>\r\n\t\t\t\t<Div>\t\r\n\t\t\t\t\t{userAccount ? (\r\n                        <>\r\n                            <span>Кошелек подключен!!!</span>\r\n                        </>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<><h2>Подключите свой кошелек к приложению!</h2>\r\n\t\t\t\t\t\t\t<Button stretched size=\"l\" mode=\"secondary\" onClick={onConnect} >Подключить кошелек MetaMask</Button></>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t{/* <><h2>Подключите свой кошелек к приложению!</h2>\r\n\t\t\t\t\t<Button>Подключить кошелек MetaMask</Button></> */}\r\n\t\t\t\t</Div>\r\n\t\t\t</Group>\r\n\t\t</Panel>\r\n\t)\r\n\r\n\t// const [isConnected, setIsConnected] = useState(false);\r\n  // const [ethBalance, setEthBalance] = useState(\"\");\r\n  \r\n  // const detectCurrentProvider = () => {\r\n  //   let provider;\r\n  //   if (window.ethereum) {\r\n  //     provider = window.ethereum;\r\n  //   } else if (window.web3) {\r\n  //     provider = window.web3.currentProvider;\r\n  //   } else {\r\n  //     console.log(\"Non-ethereum browser detected. You should install Metamask\");\r\n  //   }\r\n  //   return provider;\r\n  // };\r\n  \r\n  // const onConnect = async() => {\r\n  //   try {\r\n  //     const currentProvider = detectCurrentProvider();\r\n  //     if(currentProvider) {\r\n  //       await currentProvider.request({method: 'eth_requestAccounts'});\r\n  //       const web3 = new Web3(currentProvider);\r\n  //       const userAccount  =await web3.eth.getAccounts();\r\n  //       const account = userAccount[0];\r\n  //       let ethBalance = await web3.eth.getBalance(account);\r\n  //       setEthBalance(ethBalance);\r\n  //       setIsConnected(true);\r\n  //     }\r\n  //   } catch(err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // }\r\n  \r\n  // const onDisconnect = () => {\r\n  //   setIsConnected(false);\r\n  // }\r\n  \r\n  \r\n  \r\n  // return (\r\n  //   <div className=\"app\">\r\n  //     <div className=\"app-header\">\r\n  //       <h1>React dApp authentication with React, We3.js and Metamask</h1>\r\n  //     </div>\r\n  //     <div className=\"app-wrapper\">\r\n  //       {!isConnected && (\r\n  //         <div>\r\n  //           <button className=\"app-button__login\" onClick={onConnect}>\r\n  //           Login\r\n  //           </button>\r\n  //         </div>\r\n  //       )}\r\n  //     </div>\r\n  //     {isConnected && (\r\n  //       <div className=\"app-wrapper\">\r\n  //         <div className=\"app-details\">\r\n  //           <h2> You are connected to metamask.</h2>\r\n  //           <div className=\"app-balance\">\r\n  //             <span>Balance: </span>\r\n  //             {ethBalance}\r\n  //           </div>\r\n  //         </div>\r\n  //         <div>\r\n  //           <button className=\"app-buttons__logout\" onClick={onDisconnect}>\r\n  //           Disconnect\r\n  //           </button>\r\n  //         </div>\r\n  //       </div>\r\n  //     )}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nSettings.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n// Inventory.propTypes = {\r\n// \tid: PropTypes.string.isRequired,\r\n// \tgo: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}