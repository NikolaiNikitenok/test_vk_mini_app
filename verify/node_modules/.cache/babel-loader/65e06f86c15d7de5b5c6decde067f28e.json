{"ast":null,"code":"/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``maticmum``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport { defineProperties, FetchRequest, assert, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n\n    case \"goerli\":\n      return \"goerli.infura.io\";\n\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n\n    case \"maticmum\":\n      return \"polygon-mumbai.infura.io\";\n\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n  }\n\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\n\n\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  /**\n   *  The Project ID for the INFURA connection.\n   */\n  projectId;\n  /**\n   *  The Project Secret.\n   *\n   *  If null, no authenticated requests are made. This should not\n   *  be used outside of private contexts.\n   */\n\n  projectSecret;\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n\n  constructor(network, projectId) {\n    const provider = new InfuraProvider(network, projectId);\n\n    const req = provider._getConnection();\n\n    assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    defineProperties(this, {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n\n}\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\n\nexport class InfuraProvider extends JsonRpcProvider {\n  /**\n   *  The Project ID for the INFURA connection.\n   */\n  projectId;\n  /**\n   *  The Project Secret.\n   *\n   *  If null, no authenticated requests are made. This should not\n   *  be used outside of private contexts.\n   */\n\n  projectSecret;\n  /**\n   *  Creates a new **InfuraProvider**.\n   */\n\n  constructor(_network, projectId, projectSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n\n    const network = Network.from(_network);\n\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n\n    const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      projectId,\n      projectSecret\n    });\n  }\n\n  _getProvider(chainId) {\n    try {\n      return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n    } catch (error) {}\n\n    return super._getProvider(chainId);\n  }\n\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n\n\n  static getWebSocketProvider(network, projectId) {\n    return new InfuraWebSocketProvider(network, projectId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%projectId%% and %%projectSecret%%.\n   */\n\n\n  static getRequest(network, projectId, projectSecret) {\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n    request.allowGzip = true;\n\n    if (projectSecret) {\n      request.setCredentials(\"\", projectSecret);\n    }\n\n    if (projectId === defaultProjectId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"InfuraProvider\");\n        return true;\n      };\n    }\n\n    return request;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineProperties","FetchRequest","assert","assertArgument","showThrottleMessage","Network","JsonRpcProvider","WebSocketProvider","defaultProjectId","getHost","name","InfuraWebSocketProvider","projectId","projectSecret","constructor","network","provider","InfuraProvider","req","_getConnection","credentials","operation","url","replace","isCommunityResource","_network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","getWebSocketProvider","allowGzip","setCredentials","retryFunc","response","attempt"],"sourceRoot":"","sources":["../../src.ts/providers/provider-infura.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}