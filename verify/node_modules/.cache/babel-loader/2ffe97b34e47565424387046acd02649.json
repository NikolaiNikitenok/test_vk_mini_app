{"ast":null,"code":"/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n\n    case \"maticmum\":\n      return \"polygon-mumbai.g.alchemy.com\";\n\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n  }\n\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\n\n\nexport class AlchemyProvider extends JsonRpcProvider {\n  apiKey;\n\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n\n    const network = Network.from(_network);\n\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const request = AlchemyProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      apiKey\n    });\n  }\n\n  _getProvider(chainId) {\n    try {\n      return new AlchemyProvider(chainId, this.apiKey);\n    } catch (error) {}\n\n    return super._getProvider(chainId);\n  }\n\n  async _perform(req) {\n    // https://docs.alchemy.com/reference/trace-transaction\n    if (req.method === \"getTransactionResult\") {\n      const {\n        trace,\n        tx\n      } = await resolveProperties({\n        trace: this.send(\"trace_transaction\", [req.hash]),\n        tx: this.getTransaction(req.hash)\n      });\n\n      if (trace == null || tx == null) {\n        return null;\n      }\n\n      let data;\n      let error = false;\n\n      try {\n        data = trace[0].result.output;\n        error = trace[0].error === \"Reverted\";\n      } catch (error) {}\n\n      if (data) {\n        assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n          action: \"getTransactionResult\",\n          data,\n          reason: null,\n          transaction: tx,\n          invocation: null,\n          revert: null // @TODO\n\n        });\n        return data;\n      }\n\n      assert(false, \"could not parse trace result\", \"BAD_DATA\", {\n        value: trace\n      });\n    }\n\n    return await super._perform(req);\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n    request.allowGzip = true;\n\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"alchemy\");\n        return true;\n      };\n    }\n\n    return request;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defineProperties","resolveProperties","assert","assertArgument","FetchRequest","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AlchemyProvider","apiKey","constructor","_network","network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","_perform","req","method","trace","tx","send","hash","getTransaction","data","result","output","action","reason","transaction","invocation","revert","value","isCommunityResource","allowGzip","retryFunc","response","attempt"],"sourceRoot":"","sources":["../../src.ts/providers/provider-alchemy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}