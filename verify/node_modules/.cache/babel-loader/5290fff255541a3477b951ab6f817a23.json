{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n/**\n * Вычисляет сумму элементов массива\n */\n\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\n\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\n\nexport function uniqueArray(array) {\n  return array.filter(function (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\n\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\n\nexport function chunkArray(array, size) {\n  if (!array.length) {\n    return [];\n  }\n\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_toConsumableArray(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\n\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\n\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n\n    return res;\n  }, []);\n}","map":{"version":3,"mappings":";AAAA;;;;AAGA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAA2C;AAChD,MAAI,CAACC,KAAK,CAACC,OAAND,CAAcD,KAAdC,CAAD,IAAyB,CAACD,KAAK,CAACG,MAApC,EAA4C;AAC1C,WAAO,CAAP;AACD;;AACD,SAAOH,KAAK,CAACI,MAANJ,CAAa,UAACK,QAAD,EAAWC,OAAX;AAAA,WAAuBA,OAAO,GAAGD,QAAjC;AAAb,IAAP;AACD;AAED;;;;AAGA,OAAO,SAASE,YAAT,CAAsBP,KAAtB,EAA+C;AACpD,MAAI,CAACC,KAAK,CAACC,OAAND,CAAcD,KAAdC,CAAD,IAAyB,CAACD,KAAK,CAACG,MAApC,EAA4C;AAC1C,WAAO,CAAP;AACD;;AACD,SAAOJ,QAAQ,CAACC,KAAD,CAARD,GAAkBC,KAAK,CAACG,MAA/B;AACD;AAED;;;;AAGA,OAAO,SAASK,WAAT,CAAwBR,KAAxB,EAAyC;AAC9C,SAAOA,KAAK,CAACS,MAANT,CAAa,UAACU,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAwB;AAC1C,WAAOA,IAAI,CAACC,OAALD,CAAaF,KAAbE,MAAwBD,KAA/B;AADK,IAAP;AAGD;AAED;;;;AAGA,OAAO,SAASG,YAAT,CAAyBd,KAAzB,EAA0C;AAC/C,SAAOA,KAAK,CACTe,GADIf,CACa,UAACgB,CAAD;AAAA,WAAO,CAACC,IAAI,CAACC,MAALD,EAAD,EAAgBD,CAAhB,CAAP;AADb,KAEJG,IAFInB,CAEC,UAACgB,CAAD,EAAII,CAAJ;AAAA,WAAUJ,CAAC,CAAC,CAAD,CAADA,GAAOI,CAAC,CAAC,CAAD,CAAlB;AAFD,KAGJL,GAHIf,CAGG,UAACgB,CAAD;AAAA,WAAOA,CAAC,CAAC,CAAD,CAAR;AAHH,IAAP;AAID;AAED;;;;AAGA,OAAO,SAASK,UAAT,CAAuBrB,KAAvB,EAAmCsB,IAAnC,EAAwD;AAC7D,MAAI,CAACtB,KAAK,CAACG,MAAX,EAAmB;AACjB,WAAO,EAAP;AACD;;AACD,MAAMoB,IAAI,GAAGvB,KAAK,CAACwB,KAANxB,CAAY,CAAZA,EAAesB,IAAftB,CAAb;AACA,MAAMyB,IAAI,GAAGzB,KAAK,CAACwB,KAANxB,CAAYsB,IAAZtB,CAAb;AAEA,UAAQuB,IAAR,4BAAiBF,UAAU,CAACI,IAAD,EAAOH,IAAP,CAA3B;AACD;AAED;;;;;;;;;;AASA,OAAO,SAASI,aAAT,GAA0D;AAAA,MAAhC1B,KAAgC,uEAAnB,EAAmB;AAAA,MAAfU,KAAe;AAC/D,MAAMC,KAAK,GAAGX,KAAK,CAACa,OAANb,CAAcU,KAAdV,CAAd;;AAEA,MAAIW,KAAK,GAAG,CAAZ,EAAe;AACb,WAAOX,KAAP;AADF,SAEO;AACL,wCAAWA,KAAK,CAACwB,KAANxB,CAAY,CAAZA,EAAeW,KAAfX,CAAX,sBAAqCA,KAAK,CAACwB,KAANxB,CAAYW,KAAK,GAAG,CAApBX,CAArC;AACD;AACF;AAED;;;;;;;;;;;AAUA,OAAO,SAAS2B,UAAT,GAA2D;AAAA,MAApCC,MAAoC,uEAAtB,EAAsB;AAAA,MAAlBC,MAAkB,uEAAJ,EAAI;AAChE,SAAOD,MAAM,CAACxB,MAAPwB,CAAmB,UAACE,GAAD,EAAMC,IAAN,EAAe;AACvC,QAAIF,MAAM,CAAChB,OAAPgB,CAAeE,IAAfF,IAAuB,CAA3B,EAA8B;AAC5BC,SAAG,CAACE,IAAJF,CAASC,IAATD;AACD;;AACD,WAAOA,GAAP;AAJK,KAKJ,EALIF,CAAP;AAMD","names":["sumArray","array","Array","isArray","length","reduce","previous","current","averageArray","uniqueArray","filter","value","index","self","indexOf","shuffleArray","map","a","Math","random","sort","b","chunkArray","size","head","slice","tail","omitFromArray","difference","array1","array2","res","item","push"],"sources":["../../src/arrays.ts"],"sourcesContent":["/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  return array.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!array.length) {\n    return [];\n  }\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}