{"ast":null,"code":"// Counter Mode\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\n\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CTR extends ModeOfOperation {\n  constructor(key, initialValue) {\n    super(\"CTR\", key, CTR); // Remaining bytes for the one-time pad\n\n    _CTR_remaining.set(this, void 0);\n\n    _CTR_remainingIndex.set(this, void 0); // The current counter\n\n\n    _CTR_counter.set(this, void 0);\n\n    __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n\n    __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n\n    __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n\n\n    __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n\n    if (initialValue == null) {\n      initialValue = 1;\n    }\n\n    if (typeof initialValue === \"number\") {\n      this.setCounterValue(initialValue);\n    } else {\n      this.setCounterBytes(initialValue);\n    }\n  }\n\n  get counter() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\"));\n  }\n\n  setCounterValue(value) {\n    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError(\"invalid counter initial integer value\");\n    }\n\n    for (let index = 15; index >= 0; --index) {\n      __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n      value = Math.floor(value / 256);\n    }\n  }\n\n  setCounterBytes(value) {\n    if (value.length !== 16) {\n      throw new TypeError(\"invalid counter initial Uint8Array value length\");\n    }\n\n    __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n  }\n\n  increment() {\n    for (let i = 15; i >= 0; i--) {\n      if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n        __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n      } else {\n        __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n        break;\n      }\n    }\n  }\n\n  encrypt(plaintext) {\n    var _a, _b;\n\n    const crypttext = new Uint8Array(plaintext);\n\n    for (let i = 0; i < crypttext.length; i++) {\n      if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n        __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n\n        this.increment();\n      }\n\n      crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[(__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a)];\n    }\n\n    return crypttext;\n  }\n\n  decrypt(ciphertext) {\n    return this.encrypt(ciphertext);\n  }\n\n}\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();","map":{"version":3,"mappings":"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","names":["ModeOfOperation","CTR","constructor","key","initialValue","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","__classPrivateFieldSet","Uint8Array","__classPrivateFieldGet","fill","setCounterValue","setCounterBytes","counter","value","Number","isInteger","MAX_SAFE_INTEGER","TypeError","index","Math","floor","length","set","increment","i","encrypt","plaintext","crypttext","aes","_b","_a","decrypt","ciphertext"],"sourceRoot":"","sources":["../src.ts/mode-ctr.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}