{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // import {ethers} from 'ethers'\n\nimport { Button, Group, Panel, PanelHeader, PanelHeaderBack, Div, Header, TabsItem, Tabs, Snackbar, Avatar, CellButton } from '@vkontakte/vkui';\nimport { Icon28SettingsOutline, Icon28LogoVk, Icon16Done } from '@vkontakte/icons'; // import MetaMask from 'metamask-connect';\n\nimport Web3 from 'web3'; // import WalletConnectProvider from '@walletconnect/web3-provider';\n\nimport './Persik.css';\n\nconst Settings = _ref => {// const [userAccount, setUserAccount] = useState(null);\n  // const onConnect = () => {\n  // \tlet provider;\n  // \tif (window.ethereum) {\n  // \t\t//если есть метамаск\n  // \t\twindow.ethereum.request({method: \"eth_requestAccounts\"}).then((account) => {\n  // \t\t\tsetUserAccount(account[0]);\n  // \t\t\tgetBalance(account[0]);\n  // \t\t})\n  // \t} else if (window.web3) {\n  // \t\tprovider = window.web3.currentProvider;\n  // \t} else {\n  // \t\talert(\"Установите МетаМаск!\")\n  // \t}\n  // };\n  // const getBalance = (account) => {\n  // \twindow.ethereum.request({method: \"eth_getBalance\", params: [account, \"Latest\"],}).then((balance) => {\n  // \t\tconsole.log(balance)\t\n  // \t})\n  // };\n  // return(\n  // \t<Panel>\n  // \t\t<PanelHeader left={<Icon28LogoVk/>}> NFT for Events\n  // \t\t</PanelHeader>\n  // \t\t<Tabs>\n  // \t\t\t<TabsItem onClick={go} data-to=\"home\">Главная</TabsItem>\n  // \t\t\t{/* <TabsItem>Купить билеты</TabsItem> */}\n  // \t\t\t<TabsItem onClick={go} data-to=\"inventory\">Мои Мероприятия</TabsItem>\n  // \t\t\t<TabsItem selected onClick={go} data-to=\"settings\">Настройки</TabsItem>\n  // \t\t</Tabs>\n  // \t\t<Group header={<Header mode=\"secondary\">Подключить MetaMask</Header>}>\n  // \t\t\t<Div>\t\n  // \t\t\t\t{userAccount ? (\n  //                       <>\n  //                           <span>Кошелек подключен!!!</span>\n  //                       </>\n  // \t\t\t\t\t) : (\n  // \t\t\t\t\t\t<><h2>Подключите свой кошелек к приложению!</h2>\n  // \t\t\t\t\t\t<Button stretched size=\"l\" mode=\"secondary\" onClick={onConnect} >Подключить кошелек MetaMask</Button></>\n  // \t\t\t\t\t\t)}\n  // \t\t\t\t{/* <><h2>Подключите свой кошелек к приложению!</h2>\n  // \t\t\t\t<Button>Подключить кошелек MetaMask</Button></> */}\n  // \t\t\t</Div>\n  // \t\t</Group>\n  // \t</Panel>\n  // )\n\n  let {\n    id,\n    go\n  } = _ref;\n};\n\n_c = Settings;\nSettings.propTypes = {\n  id: PropTypes.string.isRequired,\n  go: PropTypes.func.isRequired\n}; // Inventory.propTypes = {\n// \tid: PropTypes.string.isRequired,\n// \tgo: PropTypes.func.isRequired,\n// };\n\nexport default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/src/panels/Settings.js"],"names":["React","useState","useEffect","PropTypes","Button","Group","Panel","PanelHeader","PanelHeaderBack","Div","Header","TabsItem","Tabs","Snackbar","Avatar","CellButton","Icon28SettingsOutline","Icon28LogoVk","Icon16Done","Web3","Settings","id","go","propTypes","string","isRequired","func"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,WAA/B,EAA4CC,eAA5C,EAA6DC,GAA7D,EAAkEC,MAAlE,EAA0EC,QAA1E,EAAoFC,IAApF,EAA0FC,QAA1F,EAAoGC,MAApG,EAA4GC,UAA5G,QAA6H,iBAA7H;AACA,SAAQC,qBAAR,EAA+BC,YAA/B,EAA6CC,UAA7C,QAA8D,kBAA9D,C,CACA;;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AAEA,OAAO,cAAP;;AAEA,MAAMC,QAAQ,GAAG,QAAc,CAC9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnD8B,MAAb;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,GAAa;AAsD9B,CAtDD;;KAAMF,Q;AAwDNA,QAAQ,CAACG,SAAT,GAAqB;AACpBF,EAAAA,EAAE,EAAElB,SAAS,CAACqB,MAAV,CAAiBC,UADD;AAEpBH,EAAAA,EAAE,EAAEnB,SAAS,CAACuB,IAAV,CAAeD;AAFC,CAArB,C,CAIA;AACA;AACA;AACA;;AAEA,eAAeL,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import {ethers} from 'ethers'\r\nimport { Button, Group, Panel, PanelHeader, PanelHeaderBack, Div, Header, TabsItem, Tabs, Snackbar, Avatar, CellButton} from '@vkontakte/vkui';\r\nimport {Icon28SettingsOutline, Icon28LogoVk, Icon16Done} from '@vkontakte/icons';\r\n// import MetaMask from 'metamask-connect';\r\nimport Web3 from 'web3';\r\n// import WalletConnectProvider from '@walletconnect/web3-provider';\r\n\r\nimport './Persik.css';\r\n\r\nconst Settings = ({id, go}) => {\r\n\t// const [userAccount, setUserAccount] = useState(null);\r\n\r\n\t// const onConnect = () => {\r\n\t// \tlet provider;\r\n\t// \tif (window.ethereum) {\r\n\t// \t\t//если есть метамаск\r\n\t// \t\twindow.ethereum.request({method: \"eth_requestAccounts\"}).then((account) => {\r\n\t// \t\t\tsetUserAccount(account[0]);\r\n\t// \t\t\tgetBalance(account[0]);\r\n\t// \t\t})\r\n\t// \t} else if (window.web3) {\r\n\t// \t\tprovider = window.web3.currentProvider;\r\n\t// \t} else {\r\n\t// \t\talert(\"Установите МетаМаск!\")\r\n\t// \t}\r\n\t// };\r\n\r\n\t// const getBalance = (account) => {\r\n\t// \twindow.ethereum.request({method: \"eth_getBalance\", params: [account, \"Latest\"],}).then((balance) => {\r\n\t// \t\tconsole.log(balance)\t\r\n\t// \t})\r\n\t// };\r\n    \r\n\r\n\t// return(\r\n\t// \t<Panel>\r\n\t// \t\t<PanelHeader left={<Icon28LogoVk/>}> NFT for Events\r\n\t\t\t\r\n\t// \t\t</PanelHeader>\r\n\t// \t\t<Tabs>\r\n\t// \t\t\t<TabsItem onClick={go} data-to=\"home\">Главная</TabsItem>\r\n\t// \t\t\t{/* <TabsItem>Купить билеты</TabsItem> */}\r\n\t// \t\t\t<TabsItem onClick={go} data-to=\"inventory\">Мои Мероприятия</TabsItem>\r\n\t// \t\t\t<TabsItem selected onClick={go} data-to=\"settings\">Настройки</TabsItem>\r\n\t// \t\t</Tabs>\r\n\t// \t\t<Group header={<Header mode=\"secondary\">Подключить MetaMask</Header>}>\r\n\t// \t\t\t<Div>\t\r\n\t// \t\t\t\t{userAccount ? (\r\n  //                       <>\r\n  //                           <span>Кошелек подключен!!!</span>\r\n  //                       </>\r\n\t// \t\t\t\t\t) : (\r\n\t// \t\t\t\t\t\t<><h2>Подключите свой кошелек к приложению!</h2>\r\n\t// \t\t\t\t\t\t<Button stretched size=\"l\" mode=\"secondary\" onClick={onConnect} >Подключить кошелек MetaMask</Button></>\r\n\t// \t\t\t\t\t\t)}\r\n\t// \t\t\t\t{/* <><h2>Подключите свой кошелек к приложению!</h2>\r\n\t// \t\t\t\t<Button>Подключить кошелек MetaMask</Button></> */}\r\n\t// \t\t\t</Div>\r\n\t// \t\t</Group>\r\n\t// \t</Panel>\r\n\t// )\r\n\r\n\t\r\n}\r\n\r\nSettings.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n// Inventory.propTypes = {\r\n// \tid: PropTypes.string.isRequired,\r\n// \tgo: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}