{"ast":null,"code":"/* Browser Crypto Shims */\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assert, assertArgument } from \"../utils/index.js\";\n\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n}\n\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nexport function createHash(algo) {\n  switch (algo) {\n    case \"sha256\":\n      return sha256.create();\n\n    case \"sha512\":\n      return sha512.create();\n  }\n\n  assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexport function createHmac(_algo, key) {\n  const algo = {\n    sha256,\n    sha512\n  }[_algo];\n  assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n  return hmac.create(algo, key);\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n  const algo = {\n    sha256,\n    sha512\n  }[_algo];\n  assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n  return pbkdf2(algo, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}\nexport function randomBytes(length) {\n  assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"randomBytes\"\n  });\n  assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return result;\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,IAAT,QAAqB,oBAArB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,mBAAvC;;AAWA,SAASC,SAAT,GAAkB;AAChB,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAAE,WAAOA,IAAP;AAAc;;AACjD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAE,WAAOA,MAAP;AAAgB;;AACrD,QAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAAA;AAED,MAAMC,SAAS,GAAGL,SAAS,EAA3B;AACA,MAAMM,MAAM,GAAQD,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAACE,QAAlD;AAQA,OAAM,SAAUC,UAAV,CAAqBC,IAArB,EAAiC;AACnC,UAAQA,IAAR;AACI,SAAK,QAAL;AAAe,aAAOb,MAAM,CAACc,MAAP,EAAP;;AACf,SAAK,QAAL;AAAe,aAAOb,MAAM,CAACa,MAAP,EAAP;AAFnB;;AAIAX,gBAAc,CAAC,KAAD,EAAQ,gCAAR,EAA0C,WAA1C,EAAuDU,IAAvD,CAAd;AACH;AAED,OAAM,SAAUE,UAAV,CAAqBC,KAArB,EAAoCC,GAApC,EAAmD;AACrD,QAAMJ,IAAI,GAAI;AAAEb,UAAF;AAAUC;AAAV,IAAmBe,KAAnB,CAAd;AACAb,gBAAc,CAACU,IAAI,IAAI,IAAT,EAAe,wBAAf,EAAyC,WAAzC,EAAsDG,KAAtD,CAAd;AACA,SAAOlB,IAAI,CAACgB,MAAL,CAAYD,IAAZ,EAAkBI,GAAlB,CAAP;AACH;AAED,OAAM,SAAUC,UAAV,CAAqBC,QAArB,EAA2CC,IAA3C,EAA6DC,UAA7D,EAAiFC,MAAjF,EAAiGN,KAAjG,EAA2H;AAC7H,QAAMH,IAAI,GAAI;AAAEb,UAAF;AAAUC;AAAV,IAAmBe,KAAnB,CAAd;AACAb,gBAAc,CAACU,IAAI,IAAI,IAAT,EAAe,0BAAf,EAA2C,WAA3C,EAAwDG,KAAxD,CAAd;AACA,SAAOjB,MAAM,CAACc,IAAD,EAAOM,QAAP,EAAiBC,IAAjB,EAAuB;AAAEG,KAAC,EAAEF,UAAL;AAAiBG,SAAK,EAAEF;AAAxB,GAAvB,CAAb;AACH;AAED,OAAM,SAAUG,WAAV,CAAsBC,MAAtB,EAAoC;AACtCxB,QAAM,CAACQ,MAAM,IAAI,IAAX,EAAiB,iDAAjB,EAAoE,uBAApE,EAA6F;AAC/FiB,aAAS,EAAE;AADoF,GAA7F,CAAN;AAGAxB,gBAAc,CAACyB,MAAM,CAACC,SAAP,CAAiBH,MAAjB,KAA4BA,MAAM,GAAG,CAArC,IAA0CA,MAAM,IAAI,IAArD,EAA2D,gBAA3D,EAA6E,QAA7E,EAAuFA,MAAvF,CAAd;AAEA,QAAMI,MAAM,GAAG,IAAIC,UAAJ,CAAeL,MAAf,CAAf;AACAhB,QAAM,CAACsB,eAAP,CAAuBF,MAAvB;AACA,SAAOA,MAAP;AACH","names":["hmac","pbkdf2","sha256","sha512","assert","assertArgument","getGlobal","self","window","global","Error","anyGlobal","crypto","msCrypto","createHash","algo","create","createHmac","_algo","key","pbkdf2Sync","password","salt","iterations","keylen","c","dkLen","randomBytes","length","operation","Number","isInteger","result","Uint8Array","getRandomValues"],"sourceRoot":"","sources":["../../src.ts/crypto/crypto-browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}