{"ast":null,"code":"// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create these necessary data.\n */\n\nexport class WordlistOwl extends Wordlist {\n  #data;\n  #checksum;\n  /**\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n   *  and validated against the %%checksum%%.\n   */\n\n  constructor(locale, data, checksum) {\n    super(locale);\n    this.#data = data;\n    this.#checksum = checksum;\n    this.#words = null;\n  }\n\n  get _data() {\n    return this.#data;\n  }\n\n  _decodeWords() {\n    return decodeOwl(this.#data);\n  }\n\n  #words;\n\n  #loadWords() {\n    if (this.#words == null) {\n      const words = this._decodeWords(); // Verify the computed list matches the official list\n\n\n      const checksum = id(words.join(\"\\n\") + \"\\n\");\n      /* c8 ignore start */\n\n      if (checksum !== this.#checksum) {\n        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n      }\n      /* c8 ignore stop */\n\n\n      this.#words = words;\n    }\n\n    return this.#words;\n  }\n\n  getWord(index) {\n    const words = this.#loadWords();\n    assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n    return words[index];\n  }\n\n  getWordIndex(word) {\n    return this.#loadWords().indexOf(word);\n  }\n\n}","map":{"version":3,"mappings":"AACA;AACA;AAEA,SAASA,EAAT,QAAmB,kBAAnB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA;;;;;;;;;;;;;AAYA,OAAM,MAAOC,WAAP,SAA2BD,QAA3B,CAAmC;AACrC;AACA;AAEA;;;;;AAIAE,cAAYC,MAAZ,EAA4BC,IAA5B,EAA0CC,QAA1C,EAA0D;AACtD,UAAMF,MAAN;AACA,SAAK,KAAL,GAAaC,IAAb;AACA,SAAK,SAAL,GAAiBC,QAAjB;AACA,SAAK,MAAL,GAAc,IAAd;AACH;;AAEQ,MAALC,KAAK;AAAa,WAAO,KAAK,KAAZ;AAAoB;;AAE1CC,cAAY;AACR,WAAOR,SAAS,CAAC,KAAK,KAAN,CAAhB;AACH;;AAED;;AACA,YAAU;AACN,QAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACrB,YAAMS,KAAK,GAAG,KAAKD,YAAL,EAAd,CADqB,CAGrB;;;AACA,YAAMF,QAAQ,GAAGR,EAAE,CAACW,KAAK,CAACC,IAAN,CAAW,IAAX,IAAmB,IAApB,CAAnB;AACA;;AACA,UAAIJ,QAAQ,KAAK,KAAK,SAAtB,EAAiC;AAC7B,cAAM,IAAIK,KAAJ,CAAU,sBAAuB,KAAKP,MAAO,SAA7C,CAAN;AACH;AACD;;;AAEA,WAAK,MAAL,GAAcK,KAAd;AACH;;AACD,WAAO,KAAK,MAAZ;AACH;;AAEDG,SAAO,CAACC,KAAD,EAAc;AACjB,UAAMJ,KAAK,GAAG,KAAK,UAAL,EAAd;AACAV,kBAAc,CAACc,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGJ,KAAK,CAACK,MAA7B,EAAqC,uBAAwBD,KAAM,EAAnE,EAAuE,OAAvE,EAAgFA,KAAhF,CAAd;AACA,WAAOJ,KAAK,CAACI,KAAD,CAAZ;AACH;;AAEDE,cAAY,CAACC,IAAD,EAAa;AACrB,WAAO,KAAK,UAAL,GAAkBC,OAAlB,CAA0BD,IAA1B,CAAP;AACH;;AA/CoC","names":["id","assertArgument","decodeOwl","Wordlist","WordlistOwl","constructor","locale","data","checksum","_data","_decodeWords","words","join","Error","getWord","index","length","getWordIndex","word","indexOf"],"sourceRoot":"","sources":["../../src.ts/wordlists/wordlist-owl.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}