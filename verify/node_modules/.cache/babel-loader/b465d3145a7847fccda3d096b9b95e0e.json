{"ast":null,"code":"/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */\nimport { getBytes, toUtf8Bytes, toUtf8String, zeroPadBytes } from \"../utils/index.js\";\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */\n\nexport function encodeBytes32String(text) {\n  // Get the bytes\n  const bytes = toUtf8Bytes(text); // Check we have room for null-termination\n\n  if (bytes.length > 31) {\n    throw new Error(\"bytes32 string must be less than 32 bytes\");\n  } // Zero-pad (implicitly null-terminates)\n\n\n  return zeroPadBytes(bytes, 32);\n}\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */\n\nexport function decodeBytes32String(_bytes) {\n  const data = getBytes(_bytes, \"bytes\"); // Must be 32 bytes with a null-termination\n\n  if (data.length !== 32) {\n    throw new Error(\"invalid bytes32 - not 32 bytes long\");\n  }\n\n  if (data[31] !== 0) {\n    throw new Error(\"invalid bytes32 string - no null terminator\");\n  } // Find the null termination\n\n\n  let length = 31;\n\n  while (data[length - 1] === 0) {\n    length--;\n  } // Determine the string value\n\n\n  return toUtf8String(data.slice(0, length));\n}","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SACIA,QADJ,EACcC,WADd,EAC2BC,YAD3B,EACyCC,YADzC,QAEO,mBAFP;AAMA;;;;AAGA,OAAM,SAAUC,mBAAV,CAA8BC,IAA9B,EAA0C;AAE5C;AACA,QAAMC,KAAK,GAAGL,WAAW,CAACI,IAAD,CAAzB,CAH4C,CAK5C;;AACA,MAAIC,KAAK,CAACC,MAAN,GAAe,EAAnB,EAAuB;AAAE,UAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AAA+D,GAN5C,CAQ5C;;;AACA,SAAOL,YAAY,CAACG,KAAD,EAAQ,EAAR,CAAnB;AACH;AAED;;;;AAGA,OAAM,SAAUG,mBAAV,CAA8BC,MAA9B,EAA+C;AACjD,QAAMC,IAAI,GAAGX,QAAQ,CAACU,MAAD,EAAS,OAAT,CAArB,CADiD,CAGjD;;AACA,MAAIC,IAAI,CAACJ,MAAL,KAAgB,EAApB,EAAwB;AAAE,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AAAyD;;AACnF,MAAIG,IAAI,CAAC,EAAD,CAAJ,KAAa,CAAjB,EAAoB;AAAE,UAAM,IAAIH,KAAJ,CAAU,6CAAV,CAAN;AAAiE,GALtC,CAOjD;;;AACA,MAAID,MAAM,GAAG,EAAb;;AACA,SAAOI,IAAI,CAACJ,MAAM,GAAG,CAAV,CAAJ,KAAqB,CAA5B,EAA+B;AAAEA,UAAM;AAAK,GATK,CAWjD;;;AACA,SAAOL,YAAY,CAACS,IAAI,CAACC,KAAL,CAAW,CAAX,EAAcL,MAAd,CAAD,CAAnB;AACH","names":["getBytes","toUtf8Bytes","toUtf8String","zeroPadBytes","encodeBytes32String","text","bytes","length","Error","decodeBytes32String","_bytes","data","slice"],"sourceRoot":"","sources":["../../src.ts/abi/bytes32.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}