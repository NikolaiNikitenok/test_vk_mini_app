{"ast":null,"code":"import { assert } from \"../utils/index.js\";\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\"; //import { PocketProvider } from \"./provider-pocket.js\";\n\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nfunction isWebSocketLike(value) {\n  return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\n\nexport function getDefaultProvider(network, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  if (typeof network === \"string\" && network.match(/^https?:/)) {\n    return new JsonRpcProvider(network);\n  }\n\n  if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n    return new WebSocketProvider(network);\n  }\n\n  const providers = [];\n\n  if (options.alchemy !== \"-\") {\n    try {\n      providers.push(new AlchemyProvider(network, options.alchemy));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (options.ankr !== \"-\") {\n    try {\n      providers.push(new AnkrProvider(network, options.ankr));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (options.cloudflare !== \"-\") {\n    try {\n      providers.push(new CloudflareProvider(network));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (options.etherscan !== \"-\") {\n    try {\n      providers.push(new EtherscanProvider(network, options.etherscan));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (options.infura !== \"-\") {\n    try {\n      let projectId = options.infura;\n      let projectSecret = undefined;\n\n      if (typeof projectId === \"object\") {\n        projectSecret = projectId.projectSecret;\n        projectId = projectId.projectId;\n      }\n\n      providers.push(new InfuraProvider(network, projectId, projectSecret));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /*\n      if (options.pocket !== \"-\") {\n          try {\n              let appId = options.pocket;\n              let secretKey: undefined | string = undefined;\n              let loadBalancer: undefined | boolean = undefined;\n              if (typeof(appId) === \"object\") {\n                  loadBalancer = !!appId.loadBalancer;\n                  secretKey = appId.secretKey;\n                  appId = appId.appId;\n              }\n              providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n          } catch (error) { console.log(error); }\n      }\n  */\n\n\n  if (options.quicknode !== \"-\") {\n    try {\n      let token = options.qquicknode;\n      providers.push(new QuickNodeProvider(network, token));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getDefaultProvider\"\n  });\n\n  if (providers.length === 1) {\n    return providers[0];\n  }\n\n  return new FallbackProvider(providers);\n}","map":{"version":3,"mappings":"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","names":["assert","AnkrProvider","AlchemyProvider","CloudflareProvider","EtherscanProvider","InfuraProvider","QuickNodeProvider","FallbackProvider","JsonRpcProvider","WebSocketProvider","isWebSocketLike","value","send","close","getDefaultProvider","network","options","match","providers","alchemy","push","error","console","log","ankr","cloudflare","etherscan","infura","projectId","projectSecret","undefined","quicknode","token","qquicknode","length","operation"],"sourceRoot":"","sources":["../../src.ts/providers/default-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}