{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return getBytes(zeroPadValue(value, 32));\n      }\n\n      return getBytes(getAddress(value));\n\n    case \"string\":\n      return toUtf8Bytes(value);\n\n    case \"bytes\":\n      return getBytes(value);\n\n    case \"bool\":\n      value = !!value ? \"0x01\" : \"0x00\";\n\n      if (isArray) {\n        return getBytes(zeroPadValue(value, 32));\n      }\n\n      return getBytes(value);\n  }\n\n  let match = type.match(regexNumber);\n\n  if (match) {\n    let signed = match[1] === \"int\";\n    let size = parseInt(match[2] || \"256\");\n    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n\n    if (isArray) {\n      size = 256;\n    }\n\n    if (signed) {\n      value = toTwos(value, size);\n    }\n\n    return getBytes(zeroPadValue(toBeArray(value), size / 8));\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    const size = parseInt(match[1]);\n    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n    assertArgument(dataLength(value) === size, `invalid value for ${type}`, \"value\", value);\n\n    if (isArray) {\n      return getBytes(zeroPadBytes(value, 32));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n    assertArgument(count === value.length, `invalid array length for ${type}`, \"value\", value);\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return getBytes(concat(result));\n  }\n\n  assertArgument(false, \"invalid type\", \"type\", type);\n} // @TODO: Array Enum\n\n/**\r\n *   Computes the [[link-solc-packed]] representation of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\n\n\nexport function solidityPacked(types, values) {\n  assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\n/**\r\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\n\nexport function solidityPackedKeccak256(types, values) {\n  return _keccak256(solidityPacked(types, values));\n}\n/**\r\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\n\nexport function solidityPackedSha256(types, values) {\n  return _sha256(solidityPacked(types, values));\n}","map":{"version":3,"mappings":"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","names":["getAddress","keccak256","_keccak256","sha256","_sha256","concat","dataLength","getBytes","hexlify","toBeArray","toTwos","toUtf8Bytes","zeroPadBytes","zeroPadValue","assertArgument","regexBytes","RegExp","regexNumber","regexArray","_pack","type","value","isArray","match","signed","size","parseInt","String","Array","baseType","count","length","result","forEach","push","solidityPacked","types","values","tight","index","solidityPackedKeccak256","solidityPackedSha256"],"sourceRoot":"","sources":["../../src.ts/hash/solidity.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}