{"ast":null,"code":"import { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { AppearanceProviderContext } from \"./AppearanceProviderContext\";\nimport { getScheme } from \"../../helpers/getScheme\";\nimport { classNamesString } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Platform } from \"../../lib/platform\";\nexport var generateVKUITokensClassName = function generateVKUITokensClassName(platform, appearance) {\n  var tokensPlatform;\n\n  switch (platform) {\n    case Platform.ANDROID:\n      tokensPlatform = \"vkBase\";\n      break;\n\n    case Platform.IOS:\n      tokensPlatform = \"vkIOS\";\n      break;\n\n    case Platform.VKCOM:\n      tokensPlatform = \"vkCom\";\n      break;\n\n    default:\n      tokensPlatform = platform;\n  }\n\n  return \"vkui--\".concat(tokensPlatform, \"--\").concat(appearance);\n};\nexport var AppearanceProvider = function AppearanceProvider(_ref) {\n  var children = _ref.children,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === void 0 ? \"light\" : _ref$appearance;\n  var platform = usePlatform();\n  var scheme = getScheme({\n    platform: platform,\n    appearance: appearance\n  });\n  return createScopedElement(AppearanceProviderContext.Provider, {\n    value: appearance\n  }, React.Children.map(children, function (child) {\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: classNamesString(child.props.className, \"vkui\".concat(scheme), generateVKUITokensClassName(platform, appearance))\n      });\n    }\n\n    return child;\n  }));\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,yBAAT;AACA,SAASC,SAAT;AACA,SAASC,gBAAT;AACA,SAASC,WAAT;AACA,SAASC,QAAT;AAMA,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CACzCC,QADyC,EAEzCC,UAFyC,EAG9B;AACX,MAAIC,cAAJ;;AACA,UAAQF,QAAR;AACE,SAAKF,QAAQ,CAACK,OAAd;AACED,oBAAc,GAAG,QAAjBA;AACA;;AACF,SAAKJ,QAAQ,CAACM,GAAd;AACEF,oBAAc,GAAG,OAAjBA;AACA;;AACF,SAAKJ,QAAQ,CAACO,KAAd;AACEH,oBAAc,GAAG,OAAjBA;AACA;;AACF;AACEA,oBAAc,GAAGF,QAAjBE;AAXJ;;AAcA,yBAAgBA,cAAhB,eAAmCD,UAAnC;AAnBK;AAsBP,OAAO,IAAMK,kBAAqD,GAAG,SAAxDA,kBAAwD,OAG/D;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,6BADJN,UACI;AAAA,MADJA,UACI,gCADS,OACT;AACJ,MAAMD,QAAQ,GAAGH,WAAW,EAA5B;AACA,MAAMW,MAAM,GAAGb,SAAS,CAAC;AACvBK,YAAQ,EAARA,QADuB;AAEvBC,cAAU,EAAVA;AAFuB,GAAD,CAAxB;AAKA,SACEQ,oBAACf,yBAAD,CAA2BgB,QAA3B;AAAoCC,SAAK,EAAEV;AAA3C,KACGR,KAAK,CAACmB,QAANnB,CAAeoB,GAAfpB,CAAmBc,QAAnBd,EAA6B,UAACqB,KAAD,EAAW;AACvC,sBAAIrB,KAAK,CAACsB,cAANtB,CAAqBqB,KAArBrB,CAAJ,EAAiC;AAC/B,0BAAOA,KAAK,CAACuB,YAANvB,CAAmBqB,KAAnBrB,EAA0B;AAC/BwB,iBAAS,EAAErB,gBAAgB,CACzBkB,KAAK,CAACI,KAANJ,CAAYG,SADa,gBAElBT,MAFkB,GAGzBT,2BAA2B,CAACC,QAAD,EAAWC,UAAX,CAHF;AADI,OAA1BR,CAAP;AAOD;;AACD,WAAOqB,KAAP;AAVD,IADH,CADF;AAVK","names":["React","AppearanceProviderContext","getScheme","classNamesString","usePlatform","Platform","generateVKUITokensClassName","platform","appearance","tokensPlatform","ANDROID","IOS","VKCOM","AppearanceProvider","children","scheme","createScopedElement","Provider","value","Children","map","child","isValidElement","cloneElement","className","props"],"sources":["../../../src/components/AppearanceProvider/AppearanceProvider.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { AppearanceType } from \"@vkontakte/vk-bridge\";\nimport { AppearanceProviderContext } from \"./AppearanceProviderContext\";\nimport { getScheme } from \"../../helpers/getScheme\";\nimport { classNamesString } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Platform } from \"../../lib/platform\";\n\nexport interface AppearanceProviderProps {\n  appearance?: AppearanceType;\n}\n\nexport const generateVKUITokensClassName = (\n  platform: string,\n  appearance: string\n): string => {\n  let tokensPlatform;\n  switch (platform) {\n    case Platform.ANDROID:\n      tokensPlatform = \"vkBase\";\n      break;\n    case Platform.IOS:\n      tokensPlatform = \"vkIOS\";\n      break;\n    case Platform.VKCOM:\n      tokensPlatform = \"vkCom\";\n      break;\n    default:\n      tokensPlatform = platform;\n  }\n\n  return `vkui--${tokensPlatform}--${appearance}`;\n};\n\nexport const AppearanceProvider: React.FC<AppearanceProviderProps> = ({\n  children,\n  appearance = \"light\",\n}) => {\n  const platform = usePlatform();\n  const scheme = getScheme({\n    platform,\n    appearance,\n  });\n\n  return (\n    <AppearanceProviderContext.Provider value={appearance}>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child, {\n            className: classNamesString(\n              child.props.className,\n              `vkui${scheme}`,\n              generateVKUITokensClassName(platform, appearance)\n            ),\n          });\n        }\n        return child;\n      })}\n    </AppearanceProviderContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}