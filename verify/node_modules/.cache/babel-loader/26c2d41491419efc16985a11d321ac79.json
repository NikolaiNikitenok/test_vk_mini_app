{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { ModalType } from \"./types\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getNavId } from \"../../lib/getNavId\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { noop, isFunction } from \"../../lib/utils\";\n\nfunction getModals(children) {\n  return React.Children.toArray(children);\n}\n\nvar warn = warnOnce(\"ModalRoot\");\nexport function modalTransitionReducer(state, action) {\n  if (action.type === \"setActive\" && action.id !== state.activeModal) {\n    var nextModal = action.id; // preserve exiting modal if switching mid-transition\n\n    var prevModal = state.exitingModal || state.activeModal;\n    var history = state.history ? _toConsumableArray(state.history) : [];\n    var isBack = Boolean(nextModal && history.includes(nextModal));\n\n    if (nextModal === null) {\n      history = [];\n    } else if (isBack) {\n      history = history.splice(0, history.indexOf(nextModal) + 1);\n    } else {\n      history.push(nextModal);\n    }\n\n    return {\n      activeModal: nextModal,\n      // not entering yet\n      enteringModal: null,\n      exitingModal: prevModal,\n      history: history,\n      isBack: isBack\n    };\n  }\n\n  if (action.type === \"entered\" && action.id === state.enteringModal) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      enteringModal: null\n    });\n  }\n\n  if (action.type === \"exited\" && action.id === state.exitingModal) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      exitingModal: null\n    });\n  }\n\n  if (action.type === \"inited\" && action.id === state.activeModal) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      enteringModal: action.id\n    });\n  }\n\n  return state;\n}\n/**\n * Реализует переход модалок. При смене activeModal m1 -> m2:\n * 1. activeModal: m1, exitingModal: null, enteringModal: null, триггер перехода\n * 2. activeModal: m2, exitingModal: m1, enteringModal: null, рендерим m2 чтобы прошел init, начинаем анимацию выхода\n * одновременный переход между ModalPage:\n *   3a. activeModal: m2, exitingModal: m1, enteringModal: m2\n *   4a. exitingModal и enteringModal переходят в null в порядке завершения анимации\n * ИЛИ дожидаемся скрытия ModalCard\n *   3b. activeModal: m2, exitingModal: null, enteringModal: m2\n *   4b. enteringModal переходит в null после завершения анимации\n * 5. activeModal: m2, exitingModal: null, enteringModal: null, переход закончен\n */\n\nexport function useModalManager(activeModal, children, onClose) {\n  var initModal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n  var modalsState = React.useRef({}).current;\n  getModals(children).forEach(function (Modal) {\n    var modalProps = Modal.props;\n    var id = getNavId(modalProps, warn);\n    var state = id !== undefined && modalsState[id] || {\n      id: id !== null && id !== void 0 ? id : null\n    };\n    state.onClose = Modal.props.onClose;\n    state.dynamicContentHeight = !!modalProps.dynamicContentHeight; // ModalPage props\n\n    if (typeof modalProps.settlingHeight === \"number\") {\n      state.settlingHeight = modalProps.settlingHeight;\n    }\n\n    if (state.id !== null) {\n      modalsState[state.id] = state;\n    }\n  });\n  var isMissing = activeModal && !modalsState[activeModal];\n  var safeActiveModal = isMissing ? null : activeModal;\n\n  var _React$useReducer = React.useReducer(modalTransitionReducer, {\n    activeModal: safeActiveModal,\n    enteringModal: null,\n    exitingModal: null,\n    history: safeActiveModal ? [safeActiveModal] : [],\n    isBack: false\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      transitionState = _React$useReducer2[0],\n      dispatchTransition = _React$useReducer2[1]; // Map props to state, render activeModal for init\n\n\n  useIsomorphicLayoutEffect(function () {\n    // ignore non-existent activeModal\n    if (process.env.NODE_ENV === \"development\" && isMissing) {\n      warn(\"Can't transition - modal \".concat(activeModal, \" not found\"));\n    }\n\n    dispatchTransition({\n      type: \"setActive\",\n      id: safeActiveModal !== null && safeActiveModal !== void 0 ? safeActiveModal : null\n    });\n  }, [activeModal]); // Init activeModal & set enteringModal\n\n  useIsomorphicLayoutEffect(function () {\n    if (transitionState.activeModal) {\n      initModal(modalsState[transitionState.activeModal]);\n      dispatchTransition({\n        type: \"inited\",\n        id: transitionState.activeModal\n      });\n    }\n  }, [transitionState.activeModal]);\n\n  var isCard = function isCard(id) {\n    var _modalsState$id;\n\n    return id != null && ((_modalsState$id = modalsState[id]) === null || _modalsState$id === void 0 ? void 0 : _modalsState$id.type) === ModalType.CARD;\n  };\n\n  var onEnter = React.useCallback(function (id) {\n    return dispatchTransition({\n      type: \"entered\",\n      id: id\n    });\n  }, []);\n  var onExit = React.useCallback(function (id) {\n    return dispatchTransition({\n      type: \"exited\",\n      id: id\n    });\n  }, []);\n  var delayEnter = Boolean(transitionState.exitingModal && (isCard(activeModal) || isCard(transitionState.exitingModal)));\n  var getModalState = React.useCallback(function (id) {\n    return modalsState[id];\n  }, [modalsState]);\n\n  function closeActiveModal() {\n    var modalState = transitionState.activeModal && modalsState[transitionState.activeModal];\n\n    if (modalState) {\n      if (isFunction(modalState.onClose)) {\n        modalState.onClose();\n      } else if (isFunction(onClose)) {\n        onClose(modalState.id);\n      } else if (process.env.NODE_ENV === \"development\") {\n        warn(\"onClose is undefined\");\n      }\n    }\n  }\n\n  return _objectSpread(_objectSpread({\n    onEnter: onEnter,\n    onExit: onExit\n  }, transitionState), {}, {\n    delayEnter: delayEnter,\n    getModalState: getModalState,\n    closeActiveModal: closeActiveModal\n  });\n}\nexport function withModalManager() {\n  var initModal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;\n  return function (Wrapped) {\n    return function WithModalManager(props) {\n      var transitionManager = useModalManager(props.activeModal, props.children, props.onClose, initModal);\n      return createScopedElement(Wrapped, _extends({}, props, transitionManager));\n    };\n  };\n}","map":{"version":3,"mappings":"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","names":["React","ModalType","warnOnce","getNavId","useIsomorphicLayoutEffect","noop","isFunction","getModals","children","Children","toArray","warn","modalTransitionReducer","state","action","type","id","activeModal","nextModal","prevModal","exitingModal","history","isBack","Boolean","includes","splice","indexOf","push","enteringModal","useModalManager","onClose","initModal","modalsState","useRef","current","forEach","Modal","modalProps","props","undefined","dynamicContentHeight","settlingHeight","isMissing","safeActiveModal","useReducer","transitionState","dispatchTransition","process","env","NODE_ENV","isCard","CARD","onEnter","useCallback","onExit","delayEnter","getModalState","closeActiveModal","modalState","withModalManager","Wrapped","WithModalManager","transitionManager","createScopedElement"],"sources":["../../../src/components/ModalRoot/useModalManager.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { ModalsState, ModalsStateEntry, ModalType } from \"./types\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getNavId } from \"../../lib/getNavId\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { noop, isFunction } from \"../../lib/utils\";\n\ninterface ModalTransitionState {\n  activeModal?: string | null;\n  enteringModal?: string | null;\n  exitingModal?: string | null;\n\n  history?: string[];\n  isBack?: boolean | null;\n}\n\nexport interface ModalTransitionProps extends ModalTransitionState {\n  onEnter: (id: string | null) => void;\n  onExit: (id: string | null) => void;\n  getModalState: (id: string) => ModalsStateEntry;\n  closeActiveModal: VoidFunction;\n  delayEnter: boolean;\n}\n\nfunction getModals(children: React.ReactNode | React.ReactNode[]) {\n  return React.Children.toArray(children) as React.ReactElement[];\n}\n\nconst warn = warnOnce(\"ModalRoot\");\n\nexport function modalTransitionReducer(\n  state: ModalTransitionState,\n  action: {\n    type: \"setActive\" | \"entered\" | \"exited\" | \"inited\";\n    id: string | null;\n  }\n): ModalTransitionState {\n  if (action.type === \"setActive\" && action.id !== state.activeModal) {\n    const nextModal = action.id;\n    // preserve exiting modal if switching mid-transition\n    const prevModal = state.exitingModal || state.activeModal;\n    let history = state.history ? [...state.history] : [];\n    const isBack = Boolean(nextModal && history.includes(nextModal));\n\n    if (nextModal === null) {\n      history = [];\n    } else if (isBack) {\n      history = history.splice(0, history.indexOf(nextModal) + 1);\n    } else {\n      history.push(nextModal);\n    }\n\n    return {\n      activeModal: nextModal,\n      // not entering yet\n      enteringModal: null,\n      exitingModal: prevModal,\n      history,\n      isBack,\n    };\n  }\n  if (action.type === \"entered\" && action.id === state.enteringModal) {\n    return { ...state, enteringModal: null };\n  }\n  if (action.type === \"exited\" && action.id === state.exitingModal) {\n    return { ...state, exitingModal: null };\n  }\n  if (action.type === \"inited\" && action.id === state.activeModal) {\n    return { ...state, enteringModal: action.id };\n  }\n  return state;\n}\n\n/**\n * Реализует переход модалок. При смене activeModal m1 -> m2:\n * 1. activeModal: m1, exitingModal: null, enteringModal: null, триггер перехода\n * 2. activeModal: m2, exitingModal: m1, enteringModal: null, рендерим m2 чтобы прошел init, начинаем анимацию выхода\n * одновременный переход между ModalPage:\n *   3a. activeModal: m2, exitingModal: m1, enteringModal: m2\n *   4a. exitingModal и enteringModal переходят в null в порядке завершения анимации\n * ИЛИ дожидаемся скрытия ModalCard\n *   3b. activeModal: m2, exitingModal: null, enteringModal: m2\n *   4b. enteringModal переходит в null после завершения анимации\n * 5. activeModal: m2, exitingModal: null, enteringModal: null, переход закончен\n */\nexport function useModalManager(\n  activeModal: string | null | undefined,\n  children: React.ReactNode | React.ReactNode[],\n  onClose: (id: string) => void,\n  initModal: (state: ModalsStateEntry) => void = noop\n): ModalTransitionProps {\n  const modalsState = React.useRef<ModalsState>({}).current;\n  getModals(children).forEach((Modal) => {\n    const modalProps = Modal.props;\n    const id = getNavId(modalProps, warn);\n    const state: ModalsStateEntry = (id !== undefined && modalsState[id]) || {\n      id: id ?? null,\n    };\n\n    state.onClose = Modal.props.onClose;\n    state.dynamicContentHeight = !!modalProps.dynamicContentHeight;\n    // ModalPage props\n    if (typeof modalProps.settlingHeight === \"number\") {\n      state.settlingHeight = modalProps.settlingHeight;\n    }\n\n    if (state.id !== null) {\n      modalsState[state.id] = state;\n    }\n  });\n\n  const isMissing = activeModal && !modalsState[activeModal];\n  const safeActiveModal = isMissing ? null : activeModal;\n  const [transitionState, dispatchTransition] = React.useReducer(\n    modalTransitionReducer,\n    {\n      activeModal: safeActiveModal,\n      enteringModal: null,\n      exitingModal: null,\n      history: safeActiveModal ? [safeActiveModal] : [],\n      isBack: false,\n    }\n  );\n\n  // Map props to state, render activeModal for init\n  useIsomorphicLayoutEffect(() => {\n    // ignore non-existent activeModal\n    if (process.env.NODE_ENV === \"development\" && isMissing) {\n      warn(`Can't transition - modal ${activeModal} not found`);\n    }\n    dispatchTransition({ type: \"setActive\", id: safeActiveModal ?? null });\n  }, [activeModal]);\n\n  // Init activeModal & set enteringModal\n  useIsomorphicLayoutEffect(() => {\n    if (transitionState.activeModal) {\n      initModal(modalsState[transitionState.activeModal]);\n      dispatchTransition({ type: \"inited\", id: transitionState.activeModal });\n    }\n  }, [transitionState.activeModal]);\n\n  const isCard = (id: string | null | undefined) =>\n    id != null && modalsState[id]?.type === ModalType.CARD;\n  const onEnter = React.useCallback(\n    (id: string | null) => dispatchTransition({ type: \"entered\", id }),\n    []\n  );\n  const onExit = React.useCallback(\n    (id: string | null) => dispatchTransition({ type: \"exited\", id }),\n    []\n  );\n  const delayEnter = Boolean(\n    transitionState.exitingModal &&\n      (isCard(activeModal) || isCard(transitionState.exitingModal))\n  );\n  const getModalState = React.useCallback(\n    (id: string) => modalsState[id],\n    [modalsState]\n  );\n\n  function closeActiveModal() {\n    const modalState =\n      transitionState.activeModal && modalsState[transitionState.activeModal];\n    if (modalState) {\n      if (isFunction(modalState.onClose)) {\n        modalState.onClose();\n      } else if (isFunction(onClose)) {\n        onClose(modalState.id);\n      } else if (process.env.NODE_ENV === \"development\") {\n        warn(\"onClose is undefined\");\n      }\n    }\n  }\n\n  return {\n    onEnter,\n    onExit,\n    ...transitionState,\n    delayEnter,\n    getModalState,\n    closeActiveModal,\n  };\n}\n\nexport function withModalManager(\n  initModal: (a: ModalsStateEntry) => void = noop\n) {\n  return function <Props extends ModalTransitionProps>(\n    Wrapped: React.ComponentType<Props>\n  ): React.FC<\n    Omit<Props, keyof ModalTransitionProps> & { activeModal?: string | null }\n  > {\n    return function WithModalManager(props) {\n      const transitionManager = useModalManager(\n        props.activeModal,\n        props.children,\n        (props as any).onClose,\n        initModal\n      );\n      return <Wrapped {...(props as any)} {...transitionManager} />;\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}