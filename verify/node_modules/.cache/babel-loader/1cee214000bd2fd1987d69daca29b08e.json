{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"layout\", \"action\", \"before\", \"after\", \"viewWidth\", \"duration\", \"onActionClick\", \"onClose\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { Touch } from \"../Touch/Touch\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, VKCOM } from \"../../lib/platform\";\nimport { rubber } from \"../../lib/touch\";\nimport { withAdaptivity, ViewWidth } from \"../../hoc/withAdaptivity\";\nimport Text from \"../Typography/Text/Text\";\nimport Button from \"../Button/Button\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { useWaitTransitionFinish } from \"../../hooks/useWaitTransitionFinish\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\n\nvar SnackbarComponent = function SnackbarComponent(props) {\n  var children = props.children,\n      layout = props.layout,\n      action = props.action,\n      before = props.before,\n      after = props.after,\n      viewWidth = props.viewWidth,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 0 : _props$duration,\n      onActionClick = props.onActionClick,\n      onClose = props.onClose,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var platform = usePlatform();\n\n  var _useWaitTransitionFin = useWaitTransitionFinish(),\n      waitTransitionFinish = _useWaitTransitionFin.waitTransitionFinish;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      closing = _React$useState2[0],\n      setClosing = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      touched = _React$useState4[0],\n      setTouched = _React$useState4[1];\n\n  var shiftXPercentRef = React.useRef(0);\n  var shiftXCurrentRef = React.useRef(0);\n  var bodyElRef = React.useRef(null);\n  var innerElRef = React.useRef(null);\n  var animationFrameRef = React.useRef(null);\n  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  var transitionFinishDurationFallback = platform === ANDROID || platform === VKCOM ? 400 : 320;\n\n  var close = function close() {\n    setClosing(true);\n    waitTransitionFinish(innerElRef.current, function () {\n      onClose();\n    }, transitionFinishDurationFallback);\n  };\n\n  var handleActionClick = function handleActionClick(e) {\n    close();\n\n    if (action && typeof onActionClick === \"function\") {\n      onActionClick(e);\n    }\n  };\n\n  var closeTimeout = useTimeout(close, duration);\n\n  var setBodyTransform = function setBodyTransform(percent) {\n    if (animationFrameRef.current !== null) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    animationFrameRef.current = requestAnimationFrame(function () {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = \"translate3d(\".concat(percent, \"%, 0, 0)\");\n      }\n    });\n  };\n\n  var onTouchStart = closeTimeout.clear;\n\n  var onTouchMoveX = function onTouchMoveX(event) {\n    var _bodyElRef$current$of, _bodyElRef$current;\n\n    var shiftX = event.shiftX,\n        originalEvent = event.originalEvent;\n    originalEvent.preventDefault();\n\n    if (!touched) {\n      setTouched(true);\n    }\n\n    shiftXPercentRef.current = shiftX / ((_bodyElRef$current$of = (_bodyElRef$current = bodyElRef.current) === null || _bodyElRef$current === void 0 ? void 0 : _bodyElRef$current.offsetWidth) !== null && _bodyElRef$current$of !== void 0 ? _bodyElRef$current$of : 0) * 100;\n    shiftXCurrentRef.current = rubber(shiftXPercentRef.current, 72, 1.2, platform === ANDROID || platform === VKCOM);\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n\n  var onTouchEnd = function onTouchEnd(e) {\n    var callback;\n\n    if (touched) {\n      var shiftXCurrent = shiftXCurrentRef.current;\n      var expectTranslateY = shiftXCurrent / e.duration * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(120);\n      } else {\n        callback = function callback() {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n\n  React.useEffect(function () {\n    return closeTimeout.set();\n  }, [closeTimeout]);\n  var resolvedLayout = after || isDesktop ? \"vertical\" : layout;\n  return createScopedElement(AppRootPortal, null, createScopedElement(\"div\", _extends({}, restProps, {\n    vkuiClass: classNames(getClassName(\"Snackbar\", platform), \"Snackbar--l-\".concat(resolvedLayout), {\n      \"Snackbar--closing\": closing,\n      \"Snackbar--touched\": touched,\n      \"Snackbar--desktop\": isDesktop\n    })\n  }), createScopedElement(Touch, {\n    vkuiClass: \"Snackbar__in\",\n    getRootRef: innerElRef,\n    onStart: onTouchStart,\n    onMoveX: onTouchMoveX,\n    onEnd: onTouchEnd\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__body\",\n    ref: bodyElRef\n  }, before && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__before\"\n  }, before), createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__content\"\n  }, createScopedElement(Text, {\n    weight: \"regular\",\n    vkuiClass: \"Snackbar__content-text\"\n  }, children), action && createScopedElement(Button, {\n    align: \"left\",\n    hasHover: false,\n    mode: \"tertiary\",\n    size: \"s\",\n    vkuiClass: \"Snackbar__action\",\n    onClick: handleActionClick\n  }, action)), after && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__after\"\n  }, after)))));\n};\n\nSnackbarComponent.displayName = \"Snackbar\";\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: \"horizontal\"\n};\nexport var Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true\n});","map":{"version":3,"mappings":"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","names":["React","Touch","classNames","getClassName","ANDROID","VKCOM","rubber","withAdaptivity","ViewWidth","Text","Button","AppRootPortal","useWaitTransitionFinish","usePlatform","useTimeout","SnackbarComponent","props","children","layout","action","before","after","viewWidth","duration","onActionClick","onClose","restProps","platform","waitTransitionFinish","useState","closing","setClosing","touched","setTouched","shiftXPercentRef","useRef","shiftXCurrentRef","bodyElRef","innerElRef","animationFrameRef","isDesktop","SMALL_TABLET","transitionFinishDurationFallback","close","current","handleActionClick","e","closeTimeout","setBodyTransform","percent","cancelAnimationFrame","requestAnimationFrame","style","transform","onTouchStart","clear","onTouchMoveX","event","shiftX","originalEvent","preventDefault","_bodyElRef$current","offsetWidth","onTouchEnd","callback","shiftXCurrent","expectTranslateY","set","useEffect","resolvedLayout","createScopedElement","vkuiClass","getRootRef","onStart","onMoveX","onEnd","ref","weight","align","hasHover","mode","size","onClick","displayName","defaultProps","Snackbar"],"sources":["../../../src/components/Snackbar/Snackbar.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Touch, TouchEvent } from \"../Touch/Touch\";\nimport { classNames } from \"../../lib/classNames\";\nimport { HasPlatform } from \"../../types\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, VKCOM } from \"../../lib/platform\";\nimport { rubber } from \"../../lib/touch\";\nimport { withAdaptivity, ViewWidth } from \"../../hoc/withAdaptivity\";\nimport Text from \"../Typography/Text/Text\";\nimport Button from \"../Button/Button\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { useWaitTransitionFinish } from \"../../hooks/useWaitTransitionFinish\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\nimport {\n  AdaptivityContextInterface,\n  AdaptivityProps,\n} from \"../AdaptivityProvider/AdaptivityContext\";\nimport \"./Snackbar.css\";\n\nexport interface SnackbarProps\n  extends React.HTMLAttributes<HTMLElement>,\n    HasPlatform,\n    AdaptivityProps {\n  /**\n   * Название кнопки действия в уведомлении\n   */\n  action?: string | React.ComponentType;\n\n  /**\n   * Будет вызвано при клике на кнопку действия\n   */\n  onActionClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Цветная иконка 24x24 пикселя\n   */\n  before?: React.ReactNode;\n  /**\n   * Контент в правой части, может быть `<Avatar size={32} />`\n   */\n  after?: React.ReactNode;\n  /**\n   * Варианты расположения кнопки\n   */\n  layout?: \"vertical\" | \"horizontal\";\n  /**\n   * Время в миллисекундах, через которое плашка скроется\n   */\n  duration?: number;\n  /**\n   * Обработчик закрытия уведомления\n   */\n  onClose: () => void;\n}\n\nconst SnackbarComponent: React.FC<\n  SnackbarProps & AdaptivityContextInterface\n> = (props) => {\n  const {\n    children,\n    layout,\n    action,\n    before,\n    after,\n    viewWidth,\n    duration = 0,\n    onActionClick,\n    onClose,\n    ...restProps\n  } = props;\n\n  const platform = usePlatform();\n\n  const { waitTransitionFinish } = useWaitTransitionFinish();\n\n  const [closing, setClosing] = React.useState(false);\n  const [touched, setTouched] = React.useState(false);\n\n  const shiftXPercentRef = React.useRef<number>(0);\n  const shiftXCurrentRef = React.useRef<number>(0);\n\n  const bodyElRef = React.useRef<HTMLDivElement | null>(null);\n  const innerElRef = React.useRef<HTMLDivElement | null>(null);\n\n  const animationFrameRef = React.useRef<ReturnType<\n    typeof requestAnimationFrame\n  > | null>(null);\n\n  const isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  const transitionFinishDurationFallback =\n    platform === ANDROID || platform === VKCOM ? 400 : 320;\n\n  const close = () => {\n    setClosing(true);\n    waitTransitionFinish(\n      innerElRef.current,\n      () => {\n        onClose();\n      },\n      transitionFinishDurationFallback\n    );\n  };\n\n  const handleActionClick: React.MouseEventHandler<HTMLElement> = (e) => {\n    close();\n\n    if (action && typeof onActionClick === \"function\") {\n      onActionClick(e);\n    }\n  };\n\n  const closeTimeout = useTimeout(close, duration);\n\n  const setBodyTransform = (percent: number) => {\n    if (animationFrameRef.current !== null) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = `translate3d(${percent}%, 0, 0)`;\n      }\n    });\n  };\n\n  const onTouchStart = closeTimeout.clear;\n\n  const onTouchMoveX = (event: TouchEvent) => {\n    const { shiftX, originalEvent } = event;\n    originalEvent.preventDefault();\n\n    if (!touched) {\n      setTouched(true);\n    }\n\n    shiftXPercentRef.current =\n      (shiftX / (bodyElRef.current?.offsetWidth ?? 0)) * 100;\n    shiftXCurrentRef.current = rubber(\n      shiftXPercentRef.current,\n      72,\n      1.2,\n      platform === ANDROID || platform === VKCOM\n    );\n\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n\n  const onTouchEnd = (e: TouchEvent) => {\n    let callback: VoidFunction | undefined;\n\n    if (touched) {\n      let shiftXCurrent = shiftXCurrentRef.current;\n      const expectTranslateY = (shiftXCurrent / e.duration) * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(\n          bodyElRef.current,\n          () => {\n            onClose();\n          },\n          transitionFinishDurationFallback\n        );\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(\n          bodyElRef.current,\n          () => {\n            onClose();\n          },\n          transitionFinishDurationFallback\n        );\n        setBodyTransform(120);\n      } else {\n        callback = () => {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n\n  React.useEffect(() => closeTimeout.set(), [closeTimeout]);\n\n  const resolvedLayout = after || isDesktop ? \"vertical\" : layout;\n\n  return (\n    <AppRootPortal>\n      <div\n        {...restProps}\n        vkuiClass={classNames(\n          getClassName(\"Snackbar\", platform),\n          `Snackbar--l-${resolvedLayout}`,\n          {\n            \"Snackbar--closing\": closing,\n            \"Snackbar--touched\": touched,\n            \"Snackbar--desktop\": isDesktop,\n          }\n        )}\n      >\n        <Touch\n          vkuiClass=\"Snackbar__in\"\n          getRootRef={innerElRef}\n          onStart={onTouchStart}\n          onMoveX={onTouchMoveX}\n          onEnd={onTouchEnd}\n        >\n          <div vkuiClass=\"Snackbar__body\" ref={bodyElRef}>\n            {before && <div vkuiClass=\"Snackbar__before\">{before}</div>}\n\n            <div vkuiClass=\"Snackbar__content\">\n              <Text weight=\"regular\" vkuiClass=\"Snackbar__content-text\">\n                {children}\n              </Text>\n\n              {action && (\n                <Button\n                  align=\"left\"\n                  hasHover={false}\n                  mode=\"tertiary\"\n                  size=\"s\"\n                  vkuiClass=\"Snackbar__action\"\n                  onClick={handleActionClick}\n                >\n                  {action}\n                </Button>\n              )}\n            </div>\n\n            {after && <div vkuiClass=\"Snackbar__after\">{after}</div>}\n          </div>\n        </Touch>\n      </div>\n    </AppRootPortal>\n  );\n};\n\nSnackbarComponent.displayName = \"Snackbar\";\n\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: \"horizontal\",\n};\n\nexport const Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true,\n});\n"]},"metadata":{},"sourceType":"module"}