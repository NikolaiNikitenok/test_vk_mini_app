{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { Keys, pressedKey } from \"../lib/accessibility\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\nexport var ENABLE_KEYBOARD_INPUT_EVENT_NAME = \"enableKeyboardInput\";\nexport var DISABLE_KEYBOARD_INPUT_EVENT_NAME = \"disableKeyboardInput\";\nexport function useKeyboardInputTracker() {\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isKeyboardInputActive = _React$useState2[0],\n      toggleKeyboardInput = _React$useState2[1];\n\n  var enableKeyboardInput = React.useCallback(function () {\n    toggleKeyboardInput(true);\n  }, []);\n  var handleKeydown = React.useCallback(function (e) {\n    if (pressedKey(e) === Keys.TAB) {\n      enableKeyboardInput();\n    }\n  }, [enableKeyboardInput]);\n  var disableKeyboardInput = React.useCallback(function () {\n    toggleKeyboardInput(false);\n  }, []);\n  var eventOptions = {\n    passive: true,\n    capture: true\n  };\n  useGlobalEventListener(document, \"keydown\", handleKeydown, eventOptions);\n  useGlobalEventListener(document, \"mousedown\", disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, \"touchstart\", disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, ENABLE_KEYBOARD_INPUT_EVENT_NAME, enableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, DISABLE_KEYBOARD_INPUT_EVENT_NAME, disableKeyboardInput, eventOptions);\n  return isKeyboardInputActive;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf;AACA,SAASC,MAAT;AACA,SAASC,sBAAT;AAEA,OAAO,IAAMC,gCAAgC,GAAG,qBAAzC;AACP,OAAO,IAAMC,iCAAiC,GAAG,sBAA1C;AAEP,OAAO,SAASC,uBAAT,GAA4C;AACjD,gBAAqBJ,MAAM,EAA3B;AAAA,MAAQK,QAAR,WAAQA,QAAR;;AAEA,wBACER,KAAK,CAACS,QAANT,CAAwB,KAAxBA,CADF;AAAA;AAAA,MAAOU,qBAAP;AAAA,MAA8BC,mBAA9B;;AAGA,MAAMC,mBAAmB,GAAGZ,KAAK,CAACa,WAANb,CAAkB,YAAM;AAClDW,uBAAmB,CAAC,IAAD,CAAnBA;AAD0B,KAEzB,EAFyBX,CAA5B;AAIA,MAAMc,aAAa,GAAGd,KAAK,CAACa,WAANb,CACpB,UAACe,CAAD,EAAsB;AACpB,QAAIb,UAAU,CAACa,CAAD,CAAVb,KAAkBD,IAAI,CAACe,GAA3B,EAAgC;AAC9BJ,yBAAmB;AACpB;AAJiB,KAMpB,CAACA,mBAAD,CANoBZ,CAAtB;AASA,MAAMiB,oBAAoB,GAAGjB,KAAK,CAACa,WAANb,CAAkB,YAAM;AACnDW,uBAAmB,CAAC,KAAD,CAAnBA;AAD2B,KAE1B,EAF0BX,CAA7B;AAIA,MAAMkB,YAAY,GAAG;AACnBC,WAAO,EAAE,IADU;AAEnBC,WAAO,EAAE;AAFU,GAArB;AAKAhB,wBAAsB,CAACI,QAAD,EAAW,SAAX,EAAsBM,aAAtB,EAAqCI,YAArC,CAAtBd;AACAA,wBAAsB,CACpBI,QADoB,EAEpB,WAFoB,EAGpBS,oBAHoB,EAIpBC,YAJoB,CAAtBd;AAMAA,wBAAsB,CACpBI,QADoB,EAEpB,YAFoB,EAGpBS,oBAHoB,EAIpBC,YAJoB,CAAtBd;AAMAA,wBAAsB,CACpBI,QADoB,EAEpBH,gCAFoB,EAGpBO,mBAHoB,EAIpBM,YAJoB,CAAtBd;AAMAA,wBAAsB,CACpBI,QADoB,EAEpBF,iCAFoB,EAGpBW,oBAHoB,EAIpBC,YAJoB,CAAtBd;AAOA,SAAOM,qBAAP;AACD","names":["React","Keys","pressedKey","useDOM","useGlobalEventListener","ENABLE_KEYBOARD_INPUT_EVENT_NAME","DISABLE_KEYBOARD_INPUT_EVENT_NAME","useKeyboardInputTracker","document","useState","isKeyboardInputActive","toggleKeyboardInput","enableKeyboardInput","useCallback","handleKeydown","e","TAB","disableKeyboardInput","eventOptions","passive","capture"],"sources":["../../src/hooks/useKeyboardInputTracker.ts"],"sourcesContent":["import * as React from \"react\";\nimport { Keys, pressedKey } from \"../lib/accessibility\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\nexport const ENABLE_KEYBOARD_INPUT_EVENT_NAME = \"enableKeyboardInput\";\nexport const DISABLE_KEYBOARD_INPUT_EVENT_NAME = \"disableKeyboardInput\";\n\nexport function useKeyboardInputTracker(): boolean {\n  const { document } = useDOM();\n\n  const [isKeyboardInputActive, toggleKeyboardInput] =\n    React.useState<boolean>(false);\n\n  const enableKeyboardInput = React.useCallback(() => {\n    toggleKeyboardInput(true);\n  }, []);\n\n  const handleKeydown = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (pressedKey(e) === Keys.TAB) {\n        enableKeyboardInput();\n      }\n    },\n    [enableKeyboardInput]\n  );\n\n  const disableKeyboardInput = React.useCallback(() => {\n    toggleKeyboardInput(false);\n  }, []);\n\n  const eventOptions = {\n    passive: true,\n    capture: true,\n  };\n\n  useGlobalEventListener(document, \"keydown\", handleKeydown, eventOptions);\n  useGlobalEventListener(\n    document,\n    \"mousedown\",\n    disableKeyboardInput,\n    eventOptions\n  );\n  useGlobalEventListener(\n    document,\n    \"touchstart\",\n    disableKeyboardInput,\n    eventOptions\n  );\n  useGlobalEventListener(\n    document,\n    ENABLE_KEYBOARD_INPUT_EVENT_NAME,\n    enableKeyboardInput,\n    eventOptions\n  );\n  useGlobalEventListener(\n    document,\n    DISABLE_KEYBOARD_INPUT_EVENT_NAME,\n    disableKeyboardInput,\n    eventOptions\n  );\n\n  return isKeyboardInputActive;\n}\n"]},"metadata":{},"sourceType":"module"}