{"ast":null,"code":"//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0); // -----------------------\n\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n\n  return value;\n}\n\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n\n  return value.toString();\n} // @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\r\n *  A **FeeData** wraps all the fee-related values associated with\r\n *  the network.\r\n */\n\n\nexport class FeeData {\n  /**\r\n   *  The gas price for legacy networks.\r\n   */\n  gasPrice;\n  /**\r\n   *  The maximum fee to pay per gas.\r\n   *\r\n   *  The base fee per gas is defined by the network and based on\r\n   *  congestion, increasing the cost during times of heavy load\r\n   *  and lowering when less busy.\r\n   *\r\n   *  The actual fee per gas will be the base fee for the block\r\n   *  and the priority fee, up to the max fee per gas.\r\n   *\r\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n   */\n\n  maxFeePerGas;\n  /**\r\n   *  The additional amout to pay per gas to encourage a validator\r\n   *  to include the transaction.\r\n   *\r\n   *  The purpose of this is to compensate the validator for the\r\n   *  adjusted risk for including a given transaction.\r\n   *\r\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n   */\n\n  maxPriorityFeePerGas;\n  /**\r\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\r\n   *  %%maxPriorityFeePerGas%%.\r\n   */\n\n  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    defineProperties(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\r\n   *  Returns a JSON-friendly value.\r\n   */\n\n\n  toJSON() {\n    const {\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = this;\n    return {\n      _type: \"FeeData\",\n      gasPrice: toJson(gasPrice),\n      maxFeePerGas: toJson(maxFeePerGas),\n      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n    };\n  }\n\n}\n;\nexport function copyRequest(req) {\n  const result = {}; // These could be addresses, ENS names or Addressables\n\n  if (req.to) {\n    result.to = req.to;\n  }\n\n  if (req.from) {\n    result.from = req.from;\n  }\n\n  if (req.data) {\n    result.data = hexlify(req.data);\n  }\n\n  const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas, maxPriorityFeePerGas,value\".split(/,/);\n\n  for (const key of bigIntKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n\n    result[key] = getBigInt(req[key], `request.${key}`);\n  }\n\n  const numberKeys = \"type,nonce\".split(/,/);\n\n  for (const key of numberKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n\n    result[key] = getNumber(req[key], `request.${key}`);\n  }\n\n  if (req.accessList) {\n    result.accessList = accessListify(req.accessList);\n  }\n\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipReadEnabled = !!req.enableCcipRead;\n  }\n\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n\n  return result;\n}\n/**\r\n *  A **Block** represents the data associated with a full block on\r\n *  Ethereum.\r\n */\n\nexport class Block {\n  /**\r\n   *  The provider connected to the block used to fetch additional details\r\n   *  if necessary.\r\n   */\n  provider;\n  /**\r\n   *  The block number, sometimes called the block height. This is a\r\n   *  sequential number that is one higher than the parent block.\r\n   */\n\n  number;\n  /**\r\n   *  The block hash.\r\n   */\n\n  hash;\n  /**\r\n   *  The timestamp for this block, which is the number of seconds since\r\n   *  epoch that this block was included.\r\n   */\n\n  timestamp;\n  /**\r\n   *  The block hash of the parent block.\r\n   */\n\n  parentHash;\n  /**\r\n   *  The nonce.\r\n   *\r\n   *  On legacy networks, this is the random number inserted which\r\n   *  permitted the difficulty target to be reached.\r\n   */\n\n  nonce;\n  /**\r\n   *  The difficulty target.\r\n   *\r\n   *  On legacy networks, this is the proof-of-work target required\r\n   *  for a block to meet the protocol rules to be included.\r\n   *\r\n   *  On modern networks, this is a random number arrived at using\r\n   *  randao.  @TODO: Find links?\r\n   */\n\n  difficulty;\n  /**\r\n   *  The total gas limit for this block.\r\n   */\n\n  gasLimit;\n  /**\r\n   *  The total gas used in this block.\r\n   */\n\n  gasUsed;\n  /**\r\n   *  The miner coinbase address, wihch receives any subsidies for\r\n   *  including this block.\r\n   */\n\n  miner;\n  /**\r\n   *  Any extra data the validator wished to include.\r\n   */\n\n  extraData;\n  /**\r\n   *  The base fee per gas that all transactions in this block were\r\n   *  charged.\r\n   *\r\n   *  This adjusts after each block, depending on how congested the network\r\n   *  is.\r\n   */\n\n  baseFeePerGas;\n  #transactions;\n  /**\r\n   *  Create a new **Block** object.\r\n   *\r\n   *  This should generally not be necessary as the unless implementing a\r\n   *  low-level library.\r\n   */\n\n  constructor(block, provider) {\n    this.#transactions = block.transactions.map(tx => {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n\n      return tx;\n    });\n    defineProperties(this, {\n      provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\r\n   *  Returns the list of transaction hashes.\r\n   */\n\n\n  get transactions() {\n    return this.#transactions.map(tx => {\n      if (typeof tx === \"string\") {\n        return tx;\n      }\n\n      return tx.hash;\n    });\n  }\n  /**\r\n   *  Returns the complete transactions for blocks which\r\n   *  prefetched them, by passing ``true`` to %%prefetchTxs%%\r\n   *  into [[provider_getBlock]].\r\n   */\n\n\n  get prefetchedTransactions() {\n    const txs = this.#transactions.slice(); // Doesn't matter...\n\n    if (txs.length === 0) {\n      return [];\n    } // Make sure we prefetched the transactions\n\n\n    assert(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"transactionResponses()\"\n    });\n    return txs;\n  }\n  /**\r\n   *  Returns a JSON-friendly value.\r\n   */\n\n\n  toJSON() {\n    const {\n      baseFeePerGas,\n      difficulty,\n      extraData,\n      gasLimit,\n      gasUsed,\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    } = this;\n    return {\n      _type: \"Block\",\n      baseFeePerGas: toJson(baseFeePerGas),\n      difficulty: toJson(difficulty),\n      extraData,\n      gasLimit: toJson(gasLimit),\n      gasUsed: toJson(gasUsed),\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    };\n  }\n\n  [Symbol.iterator]() {\n    let index = 0;\n    const txs = this.transactions;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: txs[index++],\n            done: false\n          };\n        }\n\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\r\n   *  The number of transactions in this block.\r\n   */\n\n\n  get length() {\n    return this.#transactions.length;\n  }\n  /**\r\n   *  The [[link-js-date]] this block was included at.\r\n   */\n\n\n  get date() {\n    if (this.timestamp == null) {\n      return null;\n    }\n\n    return new Date(this.timestamp * 1000);\n  }\n  /**\r\n   *  Get the transaction at %%indexe%% within this block.\r\n   */\n\n\n  async getTransaction(indexOrHash) {\n    // Find the internal value by its index or hash\n    let tx = undefined;\n\n    if (typeof indexOrHash === \"number\") {\n      tx = this.#transactions[indexOrHash];\n    } else {\n      const hash = indexOrHash.toLowerCase();\n\n      for (const v of this.#transactions) {\n        if (typeof v === \"string\") {\n          if (v !== hash) {\n            continue;\n          }\n\n          tx = v;\n          break;\n        } else {\n          if (v.hash === hash) {\n            continue;\n          }\n\n          tx = v;\n          break;\n        }\n      }\n    }\n\n    if (tx == null) {\n      throw new Error(\"no such tx\");\n    }\n\n    if (typeof tx === \"string\") {\n      return await this.provider.getTransaction(tx);\n    } else {\n      return tx;\n    }\n  }\n\n  getPrefetchedTransaction(indexOrHash) {\n    const txs = this.prefetchedTransactions;\n\n    if (typeof indexOrHash === \"number\") {\n      return txs[indexOrHash];\n    }\n\n    indexOrHash = indexOrHash.toLowerCase();\n\n    for (const tx of txs) {\n      if (tx.hash === indexOrHash) {\n        return tx;\n      }\n    }\n\n    assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n  }\n  /**\r\n   *  Has this block been mined.\r\n   *\r\n   *  If true, the block has been typed-gaurded that all mined\r\n   *  properties are non-null.\r\n   */\n\n\n  isMined() {\n    return !!this.hash;\n  }\n  /**\r\n   *\r\n   */\n\n\n  isLondon() {\n    return !!this.baseFeePerGas;\n  }\n\n  orphanedEvent() {\n    if (!this.isMined()) {\n      throw new Error(\"\");\n    }\n\n    return createOrphanedBlockFilter(this);\n  }\n\n} //////////////////////\n// Log\n\nexport class Log {\n  provider;\n  transactionHash;\n  blockHash;\n  blockNumber;\n  removed;\n  address;\n  data;\n  topics;\n  index;\n  transactionIndex;\n\n  constructor(log, provider) {\n    this.provider = provider;\n    const topics = Object.freeze(log.topics.slice());\n    defineProperties(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n\n  toJSON() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    } = this;\n    return {\n      _type: \"log\",\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    };\n  }\n\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return block;\n  }\n\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.transactionHash);\n    assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return tx;\n  }\n\n  async getTransactionReceipt() {\n    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n    assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n    return receipt;\n  }\n\n  removedEvent() {\n    return createRemovedLogFilter(this);\n  }\n\n} //////////////////////\n// Transaction Receipt\n\n/*\r\nexport interface LegacyTransactionReceipt {\r\n    byzantium: false;\r\n    status: null;\r\n    root: string;\r\n}\r\n\r\nexport interface ByzantiumTransactionReceipt {\r\n    byzantium: true;\r\n    status: number;\r\n    root: null;\r\n}\r\n*/\n\nexport class TransactionReceipt {\n  provider;\n  to;\n  from;\n  contractAddress;\n  hash;\n  index;\n  blockHash;\n  blockNumber;\n  logsBloom;\n  gasUsed;\n  cumulativeGasUsed;\n  gasPrice;\n  type; //readonly byzantium!: boolean;\n\n  status;\n  root;\n  #logs;\n\n  constructor(tx, provider) {\n    this.#logs = Object.freeze(tx.logs.map(log => {\n      return new Log(log, provider);\n    }));\n    defineProperties(this, {\n      provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice: tx.effectiveGasPrice || tx.gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n\n  get logs() {\n    return this.#logs;\n  }\n\n  toJSON() {\n    const {\n      to,\n      from,\n      contractAddress,\n      hash,\n      index,\n      blockHash,\n      blockNumber,\n      logsBloom,\n      logs,\n      //byzantium, \n      status,\n      root\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      blockHash,\n      blockNumber,\n      //byzantium, \n      contractAddress,\n      cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n      from,\n      gasPrice: toJson(this.gasPrice),\n      gasUsed: toJson(this.gasUsed),\n      hash,\n      index,\n      logs,\n      logsBloom,\n      root,\n      status,\n      to\n    };\n  }\n\n  get length() {\n    return this.logs.length;\n  }\n\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: this.logs[index++],\n            done: false\n          };\n        }\n\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n\n  get fee() {\n    return this.gasUsed * this.gasPrice;\n  }\n\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n\n    return block;\n  }\n\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.hash);\n\n    if (tx == null) {\n      throw new Error(\"TODO\");\n    }\n\n    return tx;\n  }\n\n  async getResult() {\n    return await this.provider.getTransactionResult(this.hash);\n  }\n\n  async confirmations() {\n    return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n  }\n\n  removedEvent() {\n    return createRemovedTransactionFilter(this);\n  }\n\n  reorderedEvent(other) {\n    assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"reorderedEvent(other)\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n\n}\n/*\r\nexport type ReplacementDetectionSetup = {\r\n    to: string;\r\n    from: string;\r\n    value: bigint;\r\n    data: string;\r\n    nonce: number;\r\n    block: number;\r\n};\r\n*/\n\nexport class TransactionResponse {\n  provider;\n  blockNumber;\n  blockHash;\n  index;\n  hash;\n  type;\n  to;\n  from;\n  nonce;\n  gasLimit;\n  gasPrice;\n  maxPriorityFeePerGas;\n  maxFeePerGas;\n  data;\n  value;\n  chainId;\n  signature;\n  accessList;\n  #startBlock;\n\n  constructor(tx, provider) {\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    this.#startBlock = -1;\n  }\n\n  toJSON() {\n    const {\n      blockNumber,\n      blockHash,\n      index,\n      hash,\n      type,\n      to,\n      from,\n      nonce,\n      data,\n      signature,\n      accessList\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      accessList,\n      blockNumber,\n      blockHash,\n      chainId: toJson(this.chainId),\n      data,\n      from,\n      gasLimit: toJson(this.gasLimit),\n      gasPrice: toJson(this.gasPrice),\n      hash,\n      maxFeePerGas: toJson(this.maxFeePerGas),\n      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n      nonce,\n      signature,\n      to,\n      index,\n      type,\n      value: toJson(this.value)\n    };\n  }\n\n  async getBlock() {\n    let blockNumber = this.blockNumber;\n\n    if (blockNumber == null) {\n      const tx = await this.getTransaction();\n\n      if (tx) {\n        blockNumber = tx.blockNumber;\n      }\n    }\n\n    if (blockNumber == null) {\n      return null;\n    }\n\n    const block = this.provider.getBlock(blockNumber);\n\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n\n    return block;\n  }\n\n  async getTransaction() {\n    return this.provider.getTransaction(this.hash);\n  }\n\n  async wait(_confirms, _timeout) {\n    const confirms = _confirms == null ? 1 : _confirms;\n    const timeout = _timeout == null ? 0 : _timeout;\n    let startBlock = this.#startBlock;\n    let nextScan = -1;\n    let stopScanning = startBlock === -1 ? true : false;\n\n    const checkReplacement = async () => {\n      // Get the current transaction count for this sender\n      if (stopScanning) {\n        return null;\n      }\n\n      const {\n        blockNumber,\n        nonce\n      } = await resolveProperties({\n        blockNumber: this.provider.getBlockNumber(),\n        nonce: this.provider.getTransactionCount(this.from)\n      }); // No transaction or our nonce has not been mined yet; but we\n      // can start scanning later when we do start\n\n      if (nonce < this.nonce) {\n        startBlock = blockNumber;\n        return;\n      } // We were mined; no replacement\n\n\n      if (stopScanning) {\n        return null;\n      }\n\n      const mined = await this.getTransaction();\n\n      if (mined && mined.blockNumber != null) {\n        return;\n      } // We were replaced; start scanning for that transaction\n      // Starting to scan; look back a few extra blocks for safety\n\n\n      if (nextScan === -1) {\n        nextScan = startBlock - 3;\n\n        if (nextScan < this.#startBlock) {\n          nextScan = this.#startBlock;\n        }\n      }\n\n      while (nextScan <= blockNumber) {\n        // Get the next block to scan\n        if (stopScanning) {\n          return null;\n        }\n\n        const block = await this.provider.getBlock(nextScan, true); // This should not happen; but we'll try again shortly\n\n        if (block == null) {\n          return;\n        } // We were mined; no replacement\n\n\n        for (const hash of block) {\n          if (hash === this.hash) {\n            return;\n          }\n        } // Search for the transaction that replaced us\n\n\n        for (let i = 0; i < block.length; i++) {\n          const tx = await block.getTransaction(i);\n\n          if (tx.from === this.from && tx.nonce === this.nonce) {\n            // Get the receipt\n            if (stopScanning) {\n              return null;\n            }\n\n            const receipt = await this.provider.getTransactionReceipt(tx.hash); // This should not happen; but we'll try again shortly\n\n            if (receipt == null) {\n              return;\n            } // We will retry this on the next block (this case could be optimized)\n\n\n            if (blockNumber - receipt.blockNumber + 1 < confirms) {\n              return;\n            } // The reason we were replaced\n\n\n            let reason = \"replaced\";\n\n            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n              reason = \"repriced\";\n            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n              reason = \"cancelled\";\n            }\n\n            assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n              reason,\n              replacement: tx.replaceableTransaction(startBlock),\n              hash: tx.hash,\n              receipt\n            });\n          }\n        }\n\n        nextScan++;\n      }\n\n      return;\n    };\n\n    const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n    if (receipt) {\n      if ((await receipt.confirmations()) >= confirms) {\n        return receipt;\n      }\n    } else {\n      // Check for a replacement; throws if a replacement was found\n      await checkReplacement(); // Allow null only when the confirms is 0\n\n      if (confirms === 0) {\n        return null;\n      }\n    }\n\n    const waiter = new Promise((resolve, reject) => {\n      // List of things to cancel when we have a result (one way or the other)\n      const cancellers = [];\n\n      const cancel = () => {\n        cancellers.forEach(c => c());\n      }; // On cancel, stop scanning for replacements\n\n\n      cancellers.push(() => {\n        stopScanning = true;\n      }); // Set up any timeout requested\n\n      if (timeout > 0) {\n        const timer = setTimeout(() => {\n          cancel();\n          reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n        }, timeout);\n        cancellers.push(() => {\n          clearTimeout(timer);\n        });\n      }\n\n      const txListener = async receipt => {\n        // Done; return it!\n        if ((await receipt.confirmations()) >= confirms) {\n          cancel();\n          resolve(receipt);\n        }\n      };\n\n      cancellers.push(() => {\n        this.provider.off(this.hash, txListener);\n      });\n      this.provider.on(this.hash, txListener); // We support replacement detection; start checking\n\n      if (startBlock >= 0) {\n        const replaceListener = async () => {\n          try {\n            // Check for a replacement; this throws only if one is found\n            await checkReplacement();\n          } catch (error) {\n            // We were replaced (with enough confirms); re-throw the error\n            if (isError(error, \"TRANSACTION_REPLACED\")) {\n              cancel();\n              reject(error);\n              return;\n            }\n          } // Rescheudle a check on the next block\n\n\n          if (!stopScanning) {\n            this.provider.once(\"block\", replaceListener);\n          }\n        };\n\n        cancellers.push(() => {\n          this.provider.off(\"block\", replaceListener);\n        });\n        this.provider.once(\"block\", replaceListener);\n      }\n    });\n    return await waiter;\n  }\n\n  isMined() {\n    return this.blockHash != null;\n  }\n\n  isLegacy() {\n    return this.type === 0;\n  }\n\n  isBerlin() {\n    return this.type === 1;\n  }\n\n  isLondon() {\n    return this.type === 2;\n  }\n\n  removedEvent() {\n    assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createRemovedTransactionFilter(this);\n  }\n\n  reorderedEvent(other) {\n    assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n  /**\r\n   *  Returns a new TransactionResponse instance which has the ability to\r\n   *  detect (and throw an error) if the transaction is replaced, which\r\n   *  will begin scanning at %%startBlock%%.\r\n   *\r\n   *  This should generally not be used by developers and is intended\r\n   *  primarily for internal use. Setting an incorrect %%startBlock%% can\r\n   *  have devastating performance consequences if used incorrectly.\r\n   */\n\n\n  replaceableTransaction(startBlock) {\n    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n    const tx = new TransactionResponse(this, this.provider);\n    tx.#startBlock = startBlock;\n    return tx;\n  }\n\n}\n\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\n\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx,\n    other\n  };\n}\n\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx\n  };\n}\n\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SACIA,gBADJ,EACsBC,SADtB,EACiCC,SADjC,EAC4CC,OAD5C,EACqDC,iBADrD,EAEIC,MAFJ,EAEYC,cAFZ,EAE4BC,OAF5B,EAEqCC,SAFrC,QAGO,mBAHP;AAIA,SAASC,aAAT,QAA8B,yBAA9B;AAWA,MAAMC,IAAI,GAAGC,MAAM,CAAC,CAAD,CAAnB,C,CASA;;AAEA,SAASC,QAAT,CAAqBC,KAArB,EAAgD;AAC5C,MAAIA,KAAK,IAAI,IAAb,EAAmB;AAAE,WAAO,IAAP;AAAc;;AACnC,SAAOA,KAAP;AACH;;AAED,SAASC,MAAT,CAAgBD,KAAhB,EAAoC;AAChC,MAAIA,KAAK,IAAI,IAAb,EAAmB;AAAE,WAAO,IAAP;AAAc;;AACnC,SAAOA,KAAK,CAACE,QAAN,EAAP;AACH,C,CAED;;AAEA;;;;;;AAIA,OAAM,MAAOC,OAAP,CAAc;AAChB;;;AAGSC,UAAQ;AAEjB;;;;;;;;;;;;;AAYSC,cAAY;AAErB;;;;;;;;;;AASSC,sBAAoB;AAE7B;;;;;AAIAC,cAAYH,QAAZ,EAAsCC,YAAtC,EAAoEC,oBAApE,EAAwG;AACpGnB,oBAAgB,CAAU,IAAV,EAAgB;AAC5BiB,cAAQ,EAAEL,QAAQ,CAACK,QAAD,CADU;AAE5BC,kBAAY,EAAEN,QAAQ,CAACM,YAAD,CAFM;AAG5BC,0BAAoB,EAAEP,QAAQ,CAACO,oBAAD;AAHF,KAAhB,CAAhB;AAKH;AAED;;;;;AAGAE,QAAM;AACF,UAAM;AACFJ,cADE;AACQC,kBADR;AACsBC;AADtB,QAEF,IAFJ;AAGA,WAAO;AACHG,WAAK,EAAE,SADJ;AAEHL,cAAQ,EAAEH,MAAM,CAACG,QAAD,CAFb;AAGHC,kBAAY,EAAEJ,MAAM,CAACI,YAAD,CAHjB;AAIHC,0BAAoB,EAAEL,MAAM,CAACK,oBAAD;AAJzB,KAAP;AAMH;;AAxDe;AAwFnB;AA4BD,OAAM,SAAUI,WAAV,CAAsBC,GAAtB,EAA6C;AAC/C,QAAMC,MAAM,GAAQ,EAApB,CAD+C,CAG/C;;AACA,MAAID,GAAG,CAACE,EAAR,EAAY;AAAED,UAAM,CAACC,EAAP,GAAYF,GAAG,CAACE,EAAhB;AAAqB;;AACnC,MAAIF,GAAG,CAACG,IAAR,EAAc;AAAEF,UAAM,CAACE,IAAP,GAAcH,GAAG,CAACG,IAAlB;AAAyB;;AAEzC,MAAIH,GAAG,CAACI,IAAR,EAAc;AAAEH,UAAM,CAACG,IAAP,GAAczB,OAAO,CAACqB,GAAG,CAACI,IAAL,CAArB;AAAkC;;AAElD,QAAMC,UAAU,GAAG,qEAAqEC,KAArE,CAA2E,GAA3E,CAAnB;;AACA,OAAK,MAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAC1B,QAAI,EAAEE,GAAG,IAAIP,GAAT,KAAuBA,GAAI,CAACO,GAAD,CAAJ,IAAa,IAAxC,EAA8C;AAAE;AAAW;;AAC3DN,UAAM,CAACM,GAAD,CAAN,GAAc9B,SAAS,CAAOuB,GAAI,CAACO,GAAD,CAAX,EAAkB,WAAYA,GAAI,EAAlC,CAAvB;AACH;;AAED,QAAMC,UAAU,GAAG,aAAaF,KAAb,CAAmB,GAAnB,CAAnB;;AACA,OAAK,MAAMC,GAAX,IAAkBC,UAAlB,EAA8B;AAC1B,QAAI,EAAED,GAAG,IAAIP,GAAT,KAAuBA,GAAI,CAACO,GAAD,CAAJ,IAAa,IAAxC,EAA8C;AAAE;AAAW;;AAC3DN,UAAM,CAACM,GAAD,CAAN,GAAc7B,SAAS,CAAOsB,GAAI,CAACO,GAAD,CAAX,EAAkB,WAAYA,GAAI,EAAlC,CAAvB;AACH;;AAED,MAAIP,GAAG,CAACS,UAAR,EAAoB;AAChBR,UAAM,CAACQ,UAAP,GAAoBxB,aAAa,CAACe,GAAG,CAACS,UAAL,CAAjC;AACH;;AAED,MAAI,cAAcT,GAAlB,EAAuB;AAAEC,UAAM,CAACS,QAAP,GAAkBV,GAAG,CAACU,QAAtB;AAAiC;;AAE1D,MAAI,oBAAoBV,GAAxB,EAA6B;AACzBC,UAAM,CAACU,qBAAP,GAA+B,CAAC,CAACX,GAAG,CAACY,cAArC;AACH;;AAED,MAAI,gBAAgBZ,GAApB,EAAyB;AACrBC,UAAM,CAACY,UAAP,GAAoBb,GAAG,CAACa,UAAxB;AACH;;AAED,SAAOZ,MAAP;AACH;AAaD;;;;;AAIA,OAAM,MAAOa,KAAP,CAAY;AACd;;;;AAISC,UAAQ;AAEjB;;;;;AAISC,QAAM;AAEf;;;;AAGSC,MAAI;AAEb;;;;;AAISC,WAAS;AAElB;;;;AAGSC,YAAU;AAEnB;;;;;;;AAMSC,OAAK;AAEd;;;;;;;;;;AASSC,YAAU;AAGnB;;;;AAGSC,UAAQ;AAEjB;;;;AAGSC,SAAO;AAEhB;;;;;AAISC,OAAK;AAEd;;;;AAGSC,WAAS;AAElB;;;;;;;;AAOSC,eAAa;AAEb;AAET;;;;;;;AAMA9B,cAAY+B,KAAZ,EAAgCZ,QAAhC,EAAkD;AAE9C,SAAK,aAAL,GAAqBY,KAAK,CAACC,YAAN,CAAmBC,GAAnB,CAAwBC,EAAD,IAAO;AAC/C,UAAI,OAAOA,EAAP,KAAe,QAAnB,EAA6B;AACzB,eAAO,IAAIC,mBAAJ,CAAwBD,EAAxB,EAA4Bf,QAA5B,CAAP;AACH;;AACD,aAAOe,EAAP;AACH,KALoB,CAArB;AAOAtD,oBAAgB,CAAQ,IAAR,EAAc;AAC1BuC,cAD0B;AAG1BE,UAAI,EAAE7B,QAAQ,CAACuC,KAAK,CAACV,IAAP,CAHY;AAK1BD,YAAM,EAAEW,KAAK,CAACX,MALY;AAM1BE,eAAS,EAAES,KAAK,CAACT,SANS;AAQ1BC,gBAAU,EAAEQ,KAAK,CAACR,UARQ;AAU1BC,WAAK,EAAEO,KAAK,CAACP,KAVa;AAW1BC,gBAAU,EAAEM,KAAK,CAACN,UAXQ;AAa1BC,cAAQ,EAAEK,KAAK,CAACL,QAbU;AAc1BC,aAAO,EAAEI,KAAK,CAACJ,OAdW;AAe1BC,WAAK,EAAEG,KAAK,CAACH,KAfa;AAgB1BC,eAAS,EAAEE,KAAK,CAACF,SAhBS;AAkB1BC,mBAAa,EAAEtC,QAAQ,CAACuC,KAAK,CAACD,aAAP;AAlBG,KAAd,CAAhB;AAoBH;AAED;;;;;AAGgB,MAAZE,YAAY;AACZ,WAAO,KAAK,aAAL,CAAmBC,GAAnB,CAAwBC,EAAD,IAAO;AACjC,UAAI,OAAOA,EAAP,KAAe,QAAnB,EAA6B;AAAE,eAAOA,EAAP;AAAY;;AAC3C,aAAOA,EAAE,CAACb,IAAV;AACH,KAHM,CAAP;AAIH;AAED;;;;;;;AAK0B,MAAtBe,sBAAsB;AACtB,UAAMC,GAAG,GAAG,KAAK,aAAL,CAAmBC,KAAnB,EAAZ,CADsB,CAGtB;;AACA,QAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AAAE,aAAO,EAAP;AAAa,KAJf,CAMtB;;;AACAtD,UAAM,CAAC,OAAOoD,GAAG,CAAC,CAAD,CAAV,KAAmB,QAApB,EAA8B,qDAA9B,EAAqF,uBAArF,EAA8G;AAChHG,eAAS,EAAE;AADqG,KAA9G,CAAN;AAIA,WAAmCH,GAAnC;AACH;AAED;;;;;AAGApC,QAAM;AACF,UAAM;AACF6B,mBADE;AACaL,gBADb;AACyBI,eADzB;AACoCH,cADpC;AAC8CC,aAD9C;AACuDN,UADvD;AAEFO,WAFE;AAEKJ,WAFL;AAEYJ,YAFZ;AAEoBG,gBAFpB;AAEgCD,eAFhC;AAE2CU;AAF3C,QAGF,IAHJ;AAKA,WAAO;AACH9B,WAAK,EAAE,OADJ;AAEH4B,mBAAa,EAAEpC,MAAM,CAACoC,aAAD,CAFlB;AAGHL,gBAAU,EAAE/B,MAAM,CAAC+B,UAAD,CAHf;AAIHI,eAJG;AAKHH,cAAQ,EAAEhC,MAAM,CAACgC,QAAD,CALb;AAMHC,aAAO,EAAEjC,MAAM,CAACiC,OAAD,CANZ;AAOHN,UAPG;AAOGO,WAPH;AAOUJ,WAPV;AAOiBJ,YAPjB;AAOyBG,gBAPzB;AAOqCD,eAPrC;AAQHU;AARG,KAAP;AAUH;;AAEe,GAAfS,MAAM,CAACC,QAAQ,IAAC;AACb,QAAIC,KAAK,GAAG,CAAZ;AACA,UAAMN,GAAG,GAAG,KAAKL,YAAjB;AACA,WAAO;AACHY,UAAI,EAAE,MAAK;AACP,YAAID,KAAK,GAAG,KAAKJ,MAAjB,EAAyB;AACrB,iBAAO;AACH9C,iBAAK,EAAE4C,GAAG,CAACM,KAAK,EAAN,CADP;AACkBE,gBAAI,EAAE;AADxB,WAAP;AAGH;;AACD,eAAO;AAAEpD,eAAK,EAAEqD,SAAT;AAAoBD,cAAI,EAAE;AAA1B,SAAP;AACH;AARE,KAAP;AAUH;AAED;;;;;AAGU,MAANN,MAAM;AAAa,WAAO,KAAK,aAAL,CAAmBA,MAA1B;AAAmC;AAE1D;;;;;AAGQ,MAAJQ,IAAI;AACJ,QAAI,KAAKzB,SAAL,IAAkB,IAAtB,EAA4B;AAAE,aAAO,IAAP;AAAc;;AAC5C,WAAO,IAAI0B,IAAJ,CAAS,KAAK1B,SAAL,GAAiB,IAA1B,CAAP;AACH;AAED;;;;;AAGoB,QAAd2B,cAAc,CAACC,WAAD,EAA6B;AAC7C;AACA,QAAIhB,EAAE,GAA6CY,SAAnD;;AACA,QAAI,OAAOI,WAAP,KAAwB,QAA5B,EAAsC;AAClChB,QAAE,GAAG,KAAK,aAAL,CAAmBgB,WAAnB,CAAL;AAEH,KAHD,MAGO;AACH,YAAM7B,IAAI,GAAG6B,WAAW,CAACC,WAAZ,EAAb;;AACA,WAAK,MAAMC,CAAX,IAAgB,KAAK,aAArB,EAAoC;AAChC,YAAI,OAAOA,CAAP,KAAc,QAAlB,EAA4B;AACxB,cAAIA,CAAC,KAAK/B,IAAV,EAAgB;AAAE;AAAW;;AAC7Ba,YAAE,GAAGkB,CAAL;AACA;AACH,SAJD,MAIO;AACH,cAAIA,CAAC,CAAC/B,IAAF,KAAWA,IAAf,EAAqB;AAAE;AAAW;;AAClCa,YAAE,GAAGkB,CAAL;AACA;AACH;AACJ;AACJ;;AACD,QAAIlB,EAAE,IAAI,IAAV,EAAgB;AAAE,YAAM,IAAImB,KAAJ,CAAU,YAAV,CAAN;AAAgC;;AAElD,QAAI,OAAOnB,EAAP,KAAe,QAAnB,EAA6B;AACzB,aAA6B,MAAM,KAAKf,QAAL,CAAc8B,cAAd,CAA6Bf,EAA7B,CAAnC;AACH,KAFD,MAEO;AACH,aAAOA,EAAP;AACH;AACJ;;AAEDoB,0BAAwB,CAACJ,WAAD,EAA6B;AACjD,UAAMb,GAAG,GAAG,KAAKD,sBAAjB;;AACA,QAAI,OAAOc,WAAP,KAAwB,QAA5B,EAAsC;AAClC,aAAOb,GAAG,CAACa,WAAD,CAAV;AACH;;AAEDA,eAAW,GAAGA,WAAW,CAACC,WAAZ,EAAd;;AACA,SAAK,MAAMjB,EAAX,IAAiBG,GAAjB,EAAsB;AAClB,UAAIH,EAAE,CAACb,IAAH,KAAY6B,WAAhB,EAA6B;AAAE,eAAOhB,EAAP;AAAY;AAC9C;;AAEDhD,kBAAc,CAAC,KAAD,EAAQ,yBAAR,EAAmC,aAAnC,EAAkDgE,WAAlD,CAAd;AACH;AAED;;;;;;;;AAMAK,SAAO;AAAyB,WAAO,CAAC,CAAC,KAAKlC,IAAd;AAAqB;AAErD;;;;;AAGAmC,UAAQ;AACJ,WAAO,CAAC,CAAC,KAAK1B,aAAd;AACH;;AAED2B,eAAa;AACT,QAAI,CAAC,KAAKF,OAAL,EAAL,EAAqB;AAAE,YAAM,IAAIF,KAAJ,CAAU,EAAV,CAAN;AAAsB;;AAC7C,WAAOK,yBAAyB,CAAC,IAAD,CAAhC;AACH;;AApQa,C,CAuQlB;AACA;;AAEA,OAAM,MAAOC,GAAP,CAAU;AACHxC,UAAQ;AAERyC,iBAAe;AACfC,WAAS;AACTC,aAAW;AAEXC,SAAO;AAEPC,SAAO;AACPxD,MAAI;AAEJyD,QAAM;AAENtB,OAAK;AACLuB,kBAAgB;;AAGzBlE,cAAYmE,GAAZ,EAA4BhD,QAA5B,EAA8C;AAC1C,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,UAAM8C,MAAM,GAAGG,MAAM,CAACC,MAAP,CAAcF,GAAG,CAACF,MAAJ,CAAW3B,KAAX,EAAd,CAAf;AACA1D,oBAAgB,CAAM,IAAN,EAAY;AACxBgF,qBAAe,EAAEO,GAAG,CAACP,eADG;AAExBC,eAAS,EAAEM,GAAG,CAACN,SAFS;AAGxBC,iBAAW,EAAEK,GAAG,CAACL,WAHO;AAKxBC,aAAO,EAAEI,GAAG,CAACJ,OALW;AAOxBC,aAAO,EAAEG,GAAG,CAACH,OAPW;AAQxBxD,UAAI,EAAE2D,GAAG,CAAC3D,IARc;AAUxByD,YAVwB;AAYxBtB,WAAK,EAAEwB,GAAG,CAACxB,KAZa;AAaxBuB,sBAAgB,EAAEC,GAAG,CAACD;AAbE,KAAZ,CAAhB;AAeH;;AAEDjE,QAAM;AACF,UAAM;AACF+D,aADE;AACOH,eADP;AACkBC,iBADlB;AAC+BtD,UAD/B;AACqCmC,WADrC;AAEFoB,aAFE;AAEOE,YAFP;AAEeL,qBAFf;AAEgCM;AAFhC,QAGF,IAHJ;AAKA,WAAO;AACHhE,WAAK,EAAE,KADJ;AAEH8D,aAFG;AAEMH,eAFN;AAEiBC,iBAFjB;AAE8BtD,UAF9B;AAEoCmC,WAFpC;AAGHoB,aAHG;AAGME,YAHN;AAGcL,qBAHd;AAG+BM;AAH/B,KAAP;AAKH;;AAEa,QAARI,QAAQ;AACV,UAAMvC,KAAK,GAAG,MAAM,KAAKZ,QAAL,CAAcmD,QAAd,CAAuB,KAAKT,SAA5B,CAApB;AACA5E,UAAM,CAAC,CAAC,CAAC8C,KAAH,EAAU,4BAAV,EAAwC,eAAxC,EAAyD,EAAzD,CAAN;AACA,WAAOA,KAAP;AACH;;AAEmB,QAAdkB,cAAc;AAChB,UAAMf,EAAE,GAAG,MAAM,KAAKf,QAAL,CAAc8B,cAAd,CAA6B,KAAKW,eAAlC,CAAjB;AACA3E,UAAM,CAAC,CAAC,CAACiD,EAAH,EAAO,4BAAP,EAAqC,eAArC,EAAsD,EAAtD,CAAN;AACA,WAAOA,EAAP;AACH;;AAE0B,QAArBqC,qBAAqB;AACvB,UAAMC,OAAO,GAAG,MAAM,KAAKrD,QAAL,CAAcoD,qBAAd,CAAoC,KAAKX,eAAzC,CAAtB;AACA3E,UAAM,CAAC,CAAC,CAACuF,OAAH,EAAY,oCAAZ,EAAkD,eAAlD,EAAmE,EAAnE,CAAN;AACA,WAAOA,OAAP;AACH;;AAEDC,cAAY;AACR,WAAOC,sBAAsB,CAAC,IAAD,CAA7B;AACH;;AAxEW,C,CA2EhB;AACA;;AAEA;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,kBAAP,CAAyB;AAClBxD,UAAQ;AAERb,IAAE;AACFC,MAAI;AACJqE,iBAAe;AAEfvD,MAAI;AACJsB,OAAK;AAELkB,WAAS;AACTC,aAAW;AAEXe,WAAS;AAETlD,SAAO;AACPmD,mBAAiB;AACjBjF,UAAQ;AAERkF,MAAI,CAnBc,CAoB3B;;AACSC,QAAM;AACNC,MAAI;AAEJ;;AAETjF,cAAYkC,EAAZ,EAA0Cf,QAA1C,EAA4D;AACxD,SAAK,KAAL,GAAaiD,MAAM,CAACC,MAAP,CAAcnC,EAAE,CAACgD,IAAH,CAAQjD,GAAR,CAAakC,GAAD,IAAQ;AAC3C,aAAO,IAAIR,GAAJ,CAAQQ,GAAR,EAAahD,QAAb,CAAP;AACH,KAF0B,CAAd,CAAb;AAIAvC,oBAAgB,CAAqB,IAArB,EAA2B;AACvCuC,cADuC;AAGvCb,QAAE,EAAE4B,EAAE,CAAC5B,EAHgC;AAIvCC,UAAI,EAAE2B,EAAE,CAAC3B,IAJ8B;AAKvCqE,qBAAe,EAAE1C,EAAE,CAAC0C,eALmB;AAOvCvD,UAAI,EAAEa,EAAE,CAACb,IAP8B;AAQvCsB,WAAK,EAAET,EAAE,CAACS,KAR6B;AAUvCkB,eAAS,EAAE3B,EAAE,CAAC2B,SAVyB;AAWvCC,iBAAW,EAAE5B,EAAE,CAAC4B,WAXuB;AAavCe,eAAS,EAAE3C,EAAE,CAAC2C,SAbyB;AAevClD,aAAO,EAAEO,EAAE,CAACP,OAf2B;AAgBvCmD,uBAAiB,EAAE5C,EAAE,CAAC4C,iBAhBiB;AAiBvCjF,cAAQ,EAAIqC,EAAE,CAACiD,iBAAH,IAAwBjD,EAAE,CAACrC,QAjBA;AAmBvCkF,UAAI,EAAE7C,EAAE,CAAC6C,IAnB8B;AAoBvC;AACAC,YAAM,EAAE9C,EAAE,CAAC8C,MArB4B;AAsBvCC,UAAI,EAAE/C,EAAE,CAAC+C;AAtB8B,KAA3B,CAAhB;AAwBH;;AAEO,MAAJC,IAAI;AAAyB,WAAO,KAAK,KAAZ;AAAoB;;AAErDjF,QAAM;AACF,UAAM;AACFK,QADE;AACEC,UADF;AACQqE,qBADR;AACyBvD,UADzB;AAC+BsB,WAD/B;AACsCkB,eADtC;AACiDC,iBADjD;AAC8De,eAD9D;AAEFK,UAFE;AAEI;AACNF,YAHE;AAGMC;AAHN,QAIF,IAJJ;AAMA,WAAO;AACH/E,WAAK,EAAE,oBADJ;AAEH2D,eAFG;AAEQC,iBAFR;AAGH;AACAc,qBAJG;AAKHE,uBAAiB,EAAEpF,MAAM,CAAC,KAAKoF,iBAAN,CALtB;AAMHvE,UANG;AAOHV,cAAQ,EAAEH,MAAM,CAAC,KAAKG,QAAN,CAPb;AAQH8B,aAAO,EAAEjC,MAAM,CAAC,KAAKiC,OAAN,CARZ;AASHN,UATG;AASGsB,WATH;AASUuC,UATV;AASgBL,eAThB;AAS2BI,UAT3B;AASiCD,YATjC;AASyC1E;AATzC,KAAP;AAWH;;AAES,MAANiC,MAAM;AAAa,WAAO,KAAK2C,IAAL,CAAU3C,MAAjB;AAA0B;;AAEjC,GAAfE,MAAM,CAACC,QAAQ,IAAC;AACb,QAAIC,KAAK,GAAG,CAAZ;AACA,WAAO;AACHC,UAAI,EAAE,MAAK;AACP,YAAID,KAAK,GAAG,KAAKJ,MAAjB,EAAyB;AACrB,iBAAO;AAAE9C,iBAAK,EAAE,KAAKyF,IAAL,CAAUvC,KAAK,EAAf,CAAT;AAA6BE,gBAAI,EAAE;AAAnC,WAAP;AACH;;AACD,eAAO;AAAEpD,eAAK,EAAEqD,SAAT;AAAoBD,cAAI,EAAE;AAA1B,SAAP;AACH;AANE,KAAP;AAQH;;AAEM,MAAHuC,GAAG;AACH,WAAO,KAAKzD,OAAL,GAAe,KAAK9B,QAA3B;AACH;;AAEa,QAARyE,QAAQ;AACV,UAAMvC,KAAK,GAAG,MAAM,KAAKZ,QAAL,CAAcmD,QAAd,CAAuB,KAAKT,SAA5B,CAApB;;AACA,QAAI9B,KAAK,IAAI,IAAb,EAAmB;AAAE,YAAM,IAAIsB,KAAJ,CAAU,MAAV,CAAN;AAA0B;;AAC/C,WAAOtB,KAAP;AACH;;AAEmB,QAAdkB,cAAc;AAChB,UAAMf,EAAE,GAAG,MAAM,KAAKf,QAAL,CAAc8B,cAAd,CAA6B,KAAK5B,IAAlC,CAAjB;;AACA,QAAIa,EAAE,IAAI,IAAV,EAAgB;AAAE,YAAM,IAAImB,KAAJ,CAAU,MAAV,CAAN;AAA0B;;AAC5C,WAAOnB,EAAP;AACH;;AAEc,QAATmD,SAAS;AACX,WAAgB,MAAM,KAAKlE,QAAL,CAAcmE,oBAAd,CAAmC,KAAKjE,IAAxC,CAAtB;AACH;;AAEkB,QAAbkE,aAAa;AACf,WAAO,CAAC,MAAM,KAAKpE,QAAL,CAAcqE,cAAd,EAAP,IAAyC,KAAK1B,WAA9C,GAA4D,CAAnE;AACH;;AAEDW,cAAY;AACR,WAAOgB,8BAA8B,CAAC,IAAD,CAArC;AACH;;AAEDC,gBAAc,CAACC,KAAD,EAA4B;AACtC1G,UAAM,CAAC,CAAC0G,KAAD,IAAUA,KAAK,CAACpC,OAAN,EAAX,EAA4B,+CAA5B,EACF,uBADE,EACuB;AAAEf,eAAS,EAAE;AAAb,KADvB,CAAN;AAEA,WAAOoD,gCAAgC,CAAC,IAAD,EAAOD,KAAP,CAAvC;AACH;;AA7H0B;AA0I/B;;;;;;;;;;;AAUA,OAAM,MAAOxD,mBAAP,CAA0B;AACnBhB,UAAQ;AAER2C,aAAW;AACXD,WAAS;AAETlB,OAAK;AAELtB,MAAI;AAEJ0D,MAAI;AAEJzE,IAAE;AACFC,MAAI;AAEJiB,OAAK;AAELE,UAAQ;AAER7B,UAAQ;AAERE,sBAAoB;AACpBD,cAAY;AAEZU,MAAI;AACJf,OAAK;AACLoG,SAAO;AAEPC,WAAS;AAETjF,YAAU;AAEnB;;AAEAb,cAAYkC,EAAZ,EAA2Cf,QAA3C,EAA6D;AACzD,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,SAAK2C,WAAL,GAAoB5B,EAAE,CAAC4B,WAAH,IAAkB,IAAnB,GAA2B5B,EAAE,CAAC4B,WAA9B,GAA2C,IAA9D;AACA,SAAKD,SAAL,GAAkB3B,EAAE,CAAC2B,SAAH,IAAgB,IAAjB,GAAyB3B,EAAE,CAAC2B,SAA5B,GAAuC,IAAxD;AAEA,SAAKxC,IAAL,GAAYa,EAAE,CAACb,IAAf;AACA,SAAKsB,KAAL,GAAaT,EAAE,CAACS,KAAhB;AAEA,SAAKoC,IAAL,GAAY7C,EAAE,CAAC6C,IAAf;AAEA,SAAKxE,IAAL,GAAY2B,EAAE,CAAC3B,IAAf;AACA,SAAKD,EAAL,GAAU4B,EAAE,CAAC5B,EAAH,IAAS,IAAnB;AAEA,SAAKoB,QAAL,GAAgBQ,EAAE,CAACR,QAAnB;AACA,SAAKF,KAAL,GAAaU,EAAE,CAACV,KAAhB;AACA,SAAKhB,IAAL,GAAY0B,EAAE,CAAC1B,IAAf;AACA,SAAKf,KAAL,GAAayC,EAAE,CAACzC,KAAhB;AAEA,SAAKI,QAAL,GAAgBqC,EAAE,CAACrC,QAAnB;AACA,SAAKE,oBAAL,GAA6BmC,EAAE,CAACnC,oBAAH,IAA2B,IAA5B,GAAoCmC,EAAE,CAACnC,oBAAvC,GAA6D,IAAzF;AACA,SAAKD,YAAL,GAAqBoC,EAAE,CAACpC,YAAH,IAAmB,IAApB,GAA4BoC,EAAE,CAACpC,YAA/B,GAA6C,IAAjE;AAEA,SAAK+F,OAAL,GAAe3D,EAAE,CAAC2D,OAAlB;AACA,SAAKC,SAAL,GAAiB5D,EAAE,CAAC4D,SAApB;AAEA,SAAKjF,UAAL,GAAmBqB,EAAE,CAACrB,UAAH,IAAiB,IAAlB,GAA0BqB,EAAE,CAACrB,UAA7B,GAAyC,IAA3D;AAEA,SAAK,WAAL,GAAmB,CAAC,CAApB;AACH;;AAEDZ,QAAM;AACF,UAAM;AACF6D,iBADE;AACWD,eADX;AACsBlB,WADtB;AAC6BtB,UAD7B;AACmC0D,UADnC;AACyCzE,QADzC;AAC6CC,UAD7C;AACmDiB,WADnD;AAEFhB,UAFE;AAEIsF,eAFJ;AAEejF;AAFf,QAGF,IAHJ;AAKA,WAAO;AACHX,WAAK,EAAE,oBADJ;AAEHW,gBAFG;AAESiD,iBAFT;AAEsBD,eAFtB;AAGHgC,aAAO,EAAEnG,MAAM,CAAC,KAAKmG,OAAN,CAHZ;AAIHrF,UAJG;AAIGD,UAJH;AAKHmB,cAAQ,EAAEhC,MAAM,CAAC,KAAKgC,QAAN,CALb;AAMH7B,cAAQ,EAAEH,MAAM,CAAC,KAAKG,QAAN,CANb;AAOHwB,UAPG;AAQHvB,kBAAY,EAAEJ,MAAM,CAAC,KAAKI,YAAN,CARjB;AASHC,0BAAoB,EAAEL,MAAM,CAAC,KAAKK,oBAAN,CATzB;AAUHyB,WAVG;AAUIsE,eAVJ;AAUexF,QAVf;AAUmBqC,WAVnB;AAU0BoC,UAV1B;AAWHtF,WAAK,EAAEC,MAAM,CAAC,KAAKD,KAAN;AAXV,KAAP;AAaH;;AAEa,QAAR6E,QAAQ;AACV,QAAIR,WAAW,GAAG,KAAKA,WAAvB;;AACA,QAAIA,WAAW,IAAI,IAAnB,EAAyB;AACrB,YAAM5B,EAAE,GAAG,MAAM,KAAKe,cAAL,EAAjB;;AACA,UAAIf,EAAJ,EAAQ;AAAE4B,mBAAW,GAAG5B,EAAE,CAAC4B,WAAjB;AAA+B;AAC5C;;AACD,QAAIA,WAAW,IAAI,IAAnB,EAAyB;AAAE,aAAO,IAAP;AAAc;;AACzC,UAAM/B,KAAK,GAAG,KAAKZ,QAAL,CAAcmD,QAAd,CAAuBR,WAAvB,CAAd;;AACA,QAAI/B,KAAK,IAAI,IAAb,EAAmB;AAAE,YAAM,IAAIsB,KAAJ,CAAU,MAAV,CAAN;AAA0B;;AAC/C,WAAOtB,KAAP;AACH;;AAEmB,QAAdkB,cAAc;AAChB,WAAO,KAAK9B,QAAL,CAAc8B,cAAd,CAA6B,KAAK5B,IAAlC,CAAP;AACH;;AAES,QAAJ0E,IAAI,CAACC,SAAD,EAAqBC,QAArB,EAAsC;AAC5C,UAAMC,QAAQ,GAAIF,SAAS,IAAI,IAAd,GAAsB,CAAtB,GAAyBA,SAA1C;AACA,UAAMG,OAAO,GAAIF,QAAQ,IAAI,IAAb,GAAqB,CAArB,GAAwBA,QAAxC;AAEA,QAAIG,UAAU,GAAG,KAAK,WAAtB;AACA,QAAIC,QAAQ,GAAG,CAAC,CAAhB;AACA,QAAIC,YAAY,GAAIF,UAAU,KAAK,CAAC,CAAjB,GAAsB,IAAtB,GAA4B,KAA/C;;AACA,UAAMG,gBAAgB,GAAG,YAAW;AAChC;AACA,UAAID,YAAJ,EAAkB;AAAE,eAAO,IAAP;AAAc;;AAClC,YAAM;AAAExC,mBAAF;AAAetC;AAAf,UAAyB,MAAMxC,iBAAiB,CAAC;AACnD8E,mBAAW,EAAE,KAAK3C,QAAL,CAAcqE,cAAd,EADsC;AAEnDhE,aAAK,EAAE,KAAKL,QAAL,CAAcqF,mBAAd,CAAkC,KAAKjG,IAAvC;AAF4C,OAAD,CAAtD,CAHgC,CAQhC;AACA;;AACA,UAAIiB,KAAK,GAAG,KAAKA,KAAjB,EAAwB;AACpB4E,kBAAU,GAAGtC,WAAb;AACA;AACH,OAb+B,CAehC;;;AACA,UAAIwC,YAAJ,EAAkB;AAAE,eAAO,IAAP;AAAc;;AAClC,YAAMG,KAAK,GAAG,MAAM,KAAKxD,cAAL,EAApB;;AACA,UAAIwD,KAAK,IAAIA,KAAK,CAAC3C,WAAN,IAAqB,IAAlC,EAAwC;AAAE;AAAS,OAlBnB,CAoBhC;AAEA;;;AACA,UAAIuC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACjBA,gBAAQ,GAAGD,UAAU,GAAG,CAAxB;;AACA,YAAIC,QAAQ,GAAG,KAAK,WAApB,EAAiC;AAAEA,kBAAQ,GAAG,KAAK,WAAhB;AAA8B;AACpE;;AAED,aAAOA,QAAQ,IAAIvC,WAAnB,EAAgC;AAC5B;AACA,YAAIwC,YAAJ,EAAkB;AAAE,iBAAO,IAAP;AAAc;;AAClC,cAAMvE,KAAK,GAAG,MAAM,KAAKZ,QAAL,CAAcmD,QAAd,CAAuB+B,QAAvB,EAAiC,IAAjC,CAApB,CAH4B,CAK5B;;AACA,YAAItE,KAAK,IAAI,IAAb,EAAmB;AAAE;AAAS,SANF,CAQ5B;;;AACA,aAAK,MAAMV,IAAX,IAAmBU,KAAnB,EAA0B;AACtB,cAAIV,IAAI,KAAK,KAAKA,IAAlB,EAAwB;AAAE;AAAS;AACtC,SAX2B,CAa5B;;;AACA,aAAK,IAAIqF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3E,KAAK,CAACQ,MAA1B,EAAkCmE,CAAC,EAAnC,EAAuC;AACnC,gBAAMxE,EAAE,GAAwB,MAAMH,KAAK,CAACkB,cAAN,CAAqByD,CAArB,CAAtC;;AAEA,cAAIxE,EAAE,CAAC3B,IAAH,KAAY,KAAKA,IAAjB,IAAyB2B,EAAE,CAACV,KAAH,KAAa,KAAKA,KAA/C,EAAsD;AAClD;AACA,gBAAI8E,YAAJ,EAAkB;AAAE,qBAAO,IAAP;AAAc;;AAClC,kBAAM9B,OAAO,GAAG,MAAM,KAAKrD,QAAL,CAAcoD,qBAAd,CAAoCrC,EAAE,CAACb,IAAvC,CAAtB,CAHkD,CAKlD;;AACA,gBAAImD,OAAO,IAAI,IAAf,EAAqB;AAAE;AAAS,aANkB,CAQlD;;;AACA,gBAAKV,WAAW,GAAGU,OAAO,CAACV,WAAtB,GAAoC,CAArC,GAA0CoC,QAA9C,EAAwD;AAAE;AAAS,aATjB,CAWlD;;;AACA,gBAAIS,MAAM,GAA0C,UAApD;;AACA,gBAAIzE,EAAE,CAAC1B,IAAH,KAAY,KAAKA,IAAjB,IAAyB0B,EAAE,CAAC5B,EAAH,KAAU,KAAKA,EAAxC,IAA8C4B,EAAE,CAACzC,KAAH,KAAa,KAAKA,KAApE,EAA2E;AACvEkH,oBAAM,GAAG,UAAT;AACH,aAFD,MAEQ,IAAIzE,EAAE,CAAC1B,IAAH,KAAY,IAAZ,IAAoB0B,EAAE,CAAC3B,IAAH,KAAY2B,EAAE,CAAC5B,EAAnC,IAAyC4B,EAAE,CAACzC,KAAH,KAAaH,IAA1D,EAAgE;AACpEqH,oBAAM,GAAG,WAAT;AACH;;AAED1H,kBAAM,CAAC,KAAD,EAAQ,0BAAR,EAAoC,sBAApC,EAA4D;AAC9D2H,uBAAS,EAAGD,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,WADc;AAE9DA,oBAF8D;AAG9DE,yBAAW,EAAE3E,EAAE,CAAC4E,sBAAH,CAA0BV,UAA1B,CAHiD;AAI9D/E,kBAAI,EAAEa,EAAE,CAACb,IAJqD;AAK9DmD;AAL8D,aAA5D,CAAN;AAOH;AACJ;;AAED6B,gBAAQ;AACX;;AACD;AACH,KA7ED;;AA+EA,UAAM7B,OAAO,GAAG,MAAM,KAAKrD,QAAL,CAAcoD,qBAAd,CAAoC,KAAKlD,IAAzC,CAAtB;;AAEA,QAAImD,OAAJ,EAAa;AACT,UAAI,CAAC,MAAMA,OAAO,CAACe,aAAR,EAAP,KAAmCW,QAAvC,EAAiD;AAAE,eAAO1B,OAAP;AAAiB;AAEvE,KAHD,MAGO;AACH;AACA,YAAM+B,gBAAgB,EAAtB,CAFG,CAIH;;AACA,UAAIL,QAAQ,KAAK,CAAjB,EAAoB;AAAE,eAAO,IAAP;AAAc;AACvC;;AAED,UAAMa,MAAM,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AAC3C;AACA,YAAMC,UAAU,GAAsB,EAAtC;;AACA,YAAMC,MAAM,GAAG,MAAK;AAAGD,kBAAU,CAACE,OAAX,CAAoBC,CAAD,IAAOA,CAAC,EAA3B;AAAiC,OAAxD,CAH2C,CAK3C;;;AACAH,gBAAU,CAACI,IAAX,CAAgB,MAAK;AAAGjB,oBAAY,GAAG,IAAf;AAAsB,OAA9C,EAN2C,CAQ3C;;AACA,UAAIH,OAAO,GAAG,CAAd,EAAiB;AACb,cAAMqB,KAAK,GAAGC,UAAU,CAAC,MAAK;AAC1BL,gBAAM;AACNF,gBAAM,CAAC9H,SAAS,CAAC,8BAAD,EAAiC,SAAjC,CAAV,CAAN;AACH,SAHuB,EAGrB+G,OAHqB,CAAxB;AAIAgB,kBAAU,CAACI,IAAX,CAAgB,MAAK;AAAGG,sBAAY,CAACF,KAAD,CAAZ;AAAsB,SAA9C;AACH;;AAED,YAAMG,UAAU,GAAG,MAAOnD,OAAP,IAAsC;AACrD;AACA,YAAI,CAAC,MAAMA,OAAO,CAACe,aAAR,EAAP,KAAmCW,QAAvC,EAAiD;AAC7CkB,gBAAM;AACNH,iBAAO,CAACzC,OAAD,CAAP;AACH;AAEJ,OAPD;;AAQA2C,gBAAU,CAACI,IAAX,CAAgB,MAAK;AAAG,aAAKpG,QAAL,CAAcyG,GAAd,CAAkB,KAAKvG,IAAvB,EAA6BsG,UAA7B;AAA2C,OAAnE;AACA,WAAKxG,QAAL,CAAc0G,EAAd,CAAiB,KAAKxG,IAAtB,EAA4BsG,UAA5B,EA1B2C,CA2B3C;;AACA,UAAIvB,UAAU,IAAI,CAAlB,EAAqB;AACjB,cAAM0B,eAAe,GAAG,YAAW;AAC/B,cAAI;AACA;AACA,kBAAMvB,gBAAgB,EAAtB;AAEH,WAJD,CAIE,OAAOwB,KAAP,EAAc;AACZ;AACA,gBAAI5I,OAAO,CAAC4I,KAAD,EAAQ,sBAAR,CAAX,EAA4C;AACxCX,oBAAM;AACNF,oBAAM,CAACa,KAAD,CAAN;AACA;AACH;AACJ,WAZ8B,CAc/B;;;AACA,cAAI,CAACzB,YAAL,EAAmB;AACf,iBAAKnF,QAAL,CAAc6G,IAAd,CAAmB,OAAnB,EAA4BF,eAA5B;AACH;AACJ,SAlBD;;AAmBAX,kBAAU,CAACI,IAAX,CAAgB,MAAK;AAAG,eAAKpG,QAAL,CAAcyG,GAAd,CAAkB,OAAlB,EAA2BE,eAA3B;AAA8C,SAAtE;AACA,aAAK3G,QAAL,CAAc6G,IAAd,CAAmB,OAAnB,EAA4BF,eAA5B;AACH;AACJ,KAnDc,CAAf;AAqDA,WAAO,MAAmCf,MAA1C;AACH;;AAEDxD,SAAO;AACH,WAAQ,KAAKM,SAAL,IAAkB,IAA1B;AACH;;AAEDoE,UAAQ;AACJ,WAAQ,KAAKlD,IAAL,KAAc,CAAtB;AACH;;AAEDmD,UAAQ;AACJ,WAAQ,KAAKnD,IAAL,KAAc,CAAtB;AACH;;AAEDvB,UAAQ;AACJ,WAAQ,KAAKuB,IAAL,KAAc,CAAtB;AACH;;AAEDN,cAAY;AACRxF,UAAM,CAAC,KAAKsE,OAAL,EAAD,EAAiB,uCAAjB,EACF,uBADE,EACuB;AAAEf,eAAS,EAAE;AAAb,KADvB,CAAN;AAEA,WAAOiD,8BAA8B,CAAC,IAAD,CAArC;AACH;;AAEDC,gBAAc,CAACC,KAAD,EAA4B;AACtC1G,UAAM,CAAC,KAAKsE,OAAL,EAAD,EAAiB,uCAAjB,EACF,uBADE,EACuB;AAAEf,eAAS,EAAE;AAAb,KADvB,CAAN;AAGAvD,UAAM,CAAC,CAAC0G,KAAD,IAAUA,KAAK,CAACpC,OAAN,EAAX,EAA4B,+CAA5B,EACF,uBADE,EACuB;AAAEf,eAAS,EAAE;AAAb,KADvB,CAAN;AAGA,WAAOoD,gCAAgC,CAAC,IAAD,EAAOD,KAAP,CAAvC;AACH;AAED;;;;;;;;;;;AASAmB,wBAAsB,CAACV,UAAD,EAAmB;AACrClH,kBAAc,CAACiJ,MAAM,CAACC,SAAP,CAAiBhC,UAAjB,KAAgCA,UAAU,IAAI,CAA/C,EAAkD,oBAAlD,EAAwE,YAAxE,EAAsFA,UAAtF,CAAd;AACA,UAAMlE,EAAE,GAAG,IAAIC,mBAAJ,CAAwB,IAAxB,EAA8B,KAAKhB,QAAnC,CAAX;AACAe,MAAE,CAAC,WAAH,GAAiBkE,UAAjB;AACA,WAAOlE,EAAP;AACH;;AA/S2B;;AA+UhC,SAASwB,yBAAT,CAAmC3B,KAAnC,EAA0E;AACtE,SAAO;AAAEsG,UAAM,EAAE,YAAV;AAAwBhH,QAAI,EAAEU,KAAK,CAACV,IAApC;AAA0CD,UAAM,EAAEW,KAAK,CAACX;AAAxD,GAAP;AACH;;AAED,SAASwE,gCAAT,CAA0C1D,EAA1C,EAAwGyD,KAAxG,EAAwK;AACpK,SAAO;AAAE0C,UAAM,EAAE,qBAAV;AAAiCnG,MAAjC;AAAqCyD;AAArC,GAAP;AACH;;AAED,SAASF,8BAAT,CAAwCvD,EAAxC,EAAoG;AAChG,SAAO;AAAEmG,UAAM,EAAE,kBAAV;AAA8BnG;AAA9B,GAAP;AACH;;AAED,SAASwC,sBAAT,CAAgCP,GAAhC,EAAqL;AACjL,SAAO;AAAEkE,UAAM,EAAE,UAAV;AAAsBlE,OAAG,EAAE;AAC9BP,qBAAe,EAAEO,GAAG,CAACP,eADS;AAE9BC,eAAS,EAAEM,GAAG,CAACN,SAFe;AAG9BC,iBAAW,EAAEK,GAAG,CAACL,WAHa;AAI9BE,aAAO,EAAEG,GAAG,CAACH,OAJiB;AAK9BxD,UAAI,EAAE2D,GAAG,CAAC3D,IALoB;AAM9ByD,YAAM,EAAEG,MAAM,CAACC,MAAP,CAAcF,GAAG,CAACF,MAAJ,CAAW3B,KAAX,EAAd,CANsB;AAO9BK,WAAK,EAAEwB,GAAG,CAACxB;AAPmB;AAA3B,GAAP;AASH","names":["defineProperties","getBigInt","getNumber","hexlify","resolveProperties","assert","assertArgument","isError","makeError","accessListify","BN_0","BigInt","getValue","value","toJson","toString","FeeData","gasPrice","maxFeePerGas","maxPriorityFeePerGas","constructor","toJSON","_type","copyRequest","req","result","to","from","data","bigIntKeys","split","key","numberKeys","accessList","blockTag","enableCcipReadEnabled","enableCcipRead","customData","Block","provider","number","hash","timestamp","parentHash","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","block","transactions","map","tx","TransactionResponse","prefetchedTransactions","txs","slice","length","operation","Symbol","iterator","index","next","done","undefined","date","Date","getTransaction","indexOrHash","toLowerCase","v","Error","getPrefetchedTransaction","isMined","isLondon","orphanedEvent","createOrphanedBlockFilter","Log","transactionHash","blockHash","blockNumber","removed","address","topics","transactionIndex","log","Object","freeze","getBlock","getTransactionReceipt","receipt","removedEvent","createRemovedLogFilter","TransactionReceipt","contractAddress","logsBloom","cumulativeGasUsed","type","status","root","logs","effectiveGasPrice","fee","getResult","getTransactionResult","confirmations","getBlockNumber","createRemovedTransactionFilter","reorderedEvent","other","createReorderedTransactionFilter","chainId","signature","wait","_confirms","_timeout","confirms","timeout","startBlock","nextScan","stopScanning","checkReplacement","getTransactionCount","mined","i","reason","cancelled","replacement","replaceableTransaction","waiter","Promise","resolve","reject","cancellers","cancel","forEach","c","push","timer","setTimeout","clearTimeout","txListener","off","on","replaceListener","error","once","isLegacy","isBerlin","Number","isInteger","orphan"],"sourceRoot":"","sources":["../../src.ts/providers/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}