{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ripemd160 = exports.RIPEMD160 = void 0;\n\nconst _sha2_js_1 = require(\"./_sha2.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n\n\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({\n  length: 16\n}, (_, i) => i);\nconst Pi = Id.map(i => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\n\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map(k => Rho[k]));\n\nconst shifts = [[11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8], [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7], [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9], [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6], [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]].map(i => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map(j => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map(j => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]); // The rotate left (circular left shift) operation for uint32\n\nconst rotl = (word, shift) => word << shift | word >>> 32 - shift; // It's called f() in spec.\n\n\nfunction f(group, x, y, z) {\n  if (group === 0) return x ^ y ^ z;else if (group === 1) return x & y | ~x & z;else if (group === 2) return (x | ~y) ^ z;else if (group === 3) return x & z | y & ~z;else return x ^ (y | ~z);\n} // Temporary buffer, not used to store anything between runs\n\n\nconst BUF = new Uint32Array(16);\n\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n  constructor() {\n    super(64, 20, 8, true);\n    this.h0 = 0x67452301 | 0;\n    this.h1 = 0xefcdab89 | 0;\n    this.h2 = 0x98badcfe | 0;\n    this.h3 = 0x10325476 | 0;\n    this.h4 = 0xc3d2e1f0 | 0;\n  }\n\n  get() {\n    const {\n      h0,\n      h1,\n      h2,\n      h3,\n      h4\n    } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n\n  set(h0, h1, h2, h3, h4) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n\n  process(view, offset) {\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true); // prettier-ignore\n\n\n    let al = this.h0 | 0,\n        ar = al,\n        bl = this.h1 | 0,\n        br = bl,\n        cl = this.h2 | 0,\n        cr = cl,\n        dl = this.h3 | 0,\n        dr = dl,\n        el = this.h4 | 0,\n        er = el; // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group],\n            hbr = Kr[group]; // prettier-ignore\n\n      const rl = idxL[group],\n            rr = idxR[group]; // prettier-ignore\n\n      const sl = shiftsL[group],\n            sr = shiftsR[group]; // prettier-ignore\n\n      for (let i = 0; i < 16; i++) {\n        const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      } // 2 loops are 10% faster\n\n\n      for (let i = 0; i < 16; i++) {\n        const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    } // Add the compressed chunk to the current hash value\n\n\n    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);\n  }\n\n  roundClean() {\n    BUF.fill(0);\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n\n}\n\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\n\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/test/node_modules/ethers/node_modules/@noble/hashes/ripemd160.js"],"names":["Object","defineProperty","exports","value","ripemd160","RIPEMD160","_sha2_js_1","require","utils_js_1","Rho","Uint8Array","Id","from","length","_","i","Pi","map","idxL","idxR","j","push","k","shifts","shiftsL","idx","shiftsR","Kl","Uint32Array","Kr","rotl","word","shift","f","group","x","y","z","BUF","SHA2","constructor","h0","h1","h2","h3","h4","get","set","process","view","offset","getUint32","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","roundClean","fill","destroy","destroyed","buffer","wrapConstructor"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());\n"]},"metadata":{},"sourceType":"script"}