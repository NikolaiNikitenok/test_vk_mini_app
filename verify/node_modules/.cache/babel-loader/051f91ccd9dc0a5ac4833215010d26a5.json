{"ast":null,"code":"import { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport { concat, defineProperties, getBytes, hexlify, assert, assertArgument } from \"../utils/index.js\";\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\"; // A = Arguments to the constructor\n// I = Interface of deployed contracts\n\nexport class ContractFactory {\n  interface;\n  bytecode;\n  runner;\n\n  constructor(abi, bytecode, runner) {\n    const iface = Interface.from(abi); // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n\n    if (bytecode instanceof Uint8Array) {\n      bytecode = hexlify(getBytes(bytecode));\n    } else {\n      if (typeof bytecode === \"object\") {\n        bytecode = bytecode.object;\n      }\n\n      if (bytecode.substring(0, 2) !== \"0x\") {\n        bytecode = \"0x\" + bytecode;\n      }\n\n      bytecode = hexlify(getBytes(bytecode));\n    }\n\n    defineProperties(this, {\n      bytecode,\n      interface: iface,\n      runner: runner || null\n    });\n  }\n\n  async getDeployTransaction() {\n    let overrides = {};\n    const fragment = this.interface.deploy;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n    }\n\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"incorrect number of arguments to constructor\");\n    }\n\n    const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n    const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n    return Object.assign({}, overrides, {\n      data\n    });\n  }\n\n  async deploy() {\n    const tx = await this.getDeployTransaction(...arguments);\n    assert(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const sentTx = await this.runner.sendTransaction(tx);\n    const address = getCreateAddress(sentTx);\n    return new BaseContract(address, this.interface, this.runner, sentTx);\n  }\n\n  connect(runner) {\n    return new ContractFactory(this.interface, this.bytecode, runner);\n  }\n\n  static fromSolidity(output, runner) {\n    assertArgument(output != null, \"bad compiler output\", \"output\", output);\n\n    if (typeof output === \"string\") {\n      output = JSON.parse(output);\n    }\n\n    const abi = output.abi;\n    let bytecode = \"\";\n\n    if (output.bytecode) {\n      bytecode = output.bytecode;\n    } else if (output.evm && output.evm.bytecode) {\n      bytecode = output.evm.bytecode;\n    }\n\n    return new this(abi, bytecode, runner);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Interface","getCreateAddress","concat","defineProperties","getBytes","hexlify","assert","assertArgument","BaseContract","copyOverrides","resolveArgs","ContractFactory","interface","bytecode","runner","constructor","abi","iface","from","Uint8Array","object","substring","getDeployTransaction","overrides","fragment","deploy","args","inputs","length","pop","Error","resolvedArgs","data","encodeDeploy","Object","assign","tx","sendTransaction","operation","sentTx","address","connect","fromSolidity","output","JSON","parse","evm"],"sourceRoot":"","sources":["../../src.ts/contract/factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}