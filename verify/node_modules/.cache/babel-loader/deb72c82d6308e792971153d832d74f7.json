{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"selected\", \"after\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport { VKCOM } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { TabsModeContext } from \"../Tabs/Tabs\";\nimport Headline from \"../Typography/Headline/Headline\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Text from \"../Typography/Text/Text\";\n\nvar TabsItem = function TabsItem(_ref) {\n  var children = _ref.children,\n      selected = _ref.selected,\n      after = _ref.after,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n  var mode = React.useContext(TabsModeContext);\n  var TypographyComponent = mode === \"buttons\" || mode === \"segmented\" ? Subhead : Headline;\n\n  if (platform === VKCOM) {\n    TypographyComponent = Text;\n  }\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName(\"TabsItem\", platform), {\n      \"TabsItem--selected\": selected\n    }),\n    hasActive: mode === \"segmented\",\n    activeMode: \"TabsItem--active\",\n    focusVisibleMode: mode === \"segmented\" ? \"outside\" : \"inside\"\n  }), createScopedElement(TypographyComponent, {\n    Component: \"span\",\n    vkuiClass: \"TabsItem__in\",\n    weight: \"medium\"\n  }, children), hasReactNode(after) && createScopedElement(\"div\", {\n    vkuiClass: \"TabsItem__after\"\n  }, after));\n};\n\nTabsItem.defaultProps = {\n  selected: false\n}; // eslint-disable-next-line import/no-default-export\n\nexport default TabsItem;","map":{"version":3,"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT;AACA,OAAOC,QAAP;AACA,SAASC,UAAT;AACA,SAASC,KAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,SAAoBC,eAApB;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;;AAQA,IAAMC,QAAiC,GAAG,SAApCA,QAAoC,OAKrB;AAAA,MAJnBC,QAImB,QAJnBA,QAImB;AAAA,MAHnBC,QAGmB,QAHnBA,QAGmB;AAAA,MAFnBC,KAEmB,QAFnBA,KAEmB;AAAA,MADhBC,SACgB;;AACnB,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,MAAMY,IAAuB,GAAGjB,KAAK,CAACkB,UAANlB,CAAiBO,eAAjBP,CAAhC;AAEA,MAAImB,mBAAmB,GACrBF,IAAI,KAAK,SAATA,IAAsBA,IAAI,KAAK,WAA/BA,GAA6CR,OAA7CQ,GAAuDT,QADzD;;AAGA,MAAIQ,QAAQ,KAAKZ,KAAjB,EAAwB;AACtBe,uBAAmB,GAAGT,IAAtBS;AACD;;AAED,SACEC,oBAAClB,QAAD,eACMa,SADN;AAEEM,aAAS,EAAElB,UAAU,CAACF,YAAY,CAAC,UAAD,EAAae,QAAb,CAAb,EAAqC;AACxD,4BAAsBH;AADkC,KAArC,CAFvB;AAKES,aAAS,EAAEL,IAAI,KAAK,WALtB;AAMEM,cAAU,EAAC,kBANb;AAOEC,oBAAgB,EAAEP,IAAI,KAAK,WAATA,GAAuB,SAAvBA,GAAmC;AAPvD,MASEG,oBAACD,mBAAD;AACEM,aAAS,EAAC,MADZ;AAEEJ,aAAS,EAAC,cAFZ;AAGEK,UAAM,EAAC;AAHT,KAKGd,QALH,CATF,EAgBGN,YAAY,CAACQ,KAAD,CAAZR,IAAuBc;AAAKC,aAAS,EAAC;AAAf,KAAkCP,KAAlC,CAhB1B,CADF;AAhBF;;AAsCAH,QAAQ,CAACgB,YAAThB,GAAwB;AACtBE,UAAQ,EAAE;AADY,CAAxBF,C,CAIA;;AACA,eAAeA,QAAf","names":["React","getClassName","Tappable","classNames","VKCOM","usePlatform","hasReactNode","TabsModeContext","Headline","Subhead","Text","TabsItem","children","selected","after","restProps","platform","mode","useContext","TypographyComponent","createScopedElement","vkuiClass","hasActive","activeMode","focusVisibleMode","Component","weight","defaultProps"],"sources":["../../../src/components/TabsItem/TabsItem.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport { VKCOM } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { TabsProps, TabsModeContext } from \"../Tabs/Tabs\";\nimport Headline from \"../Typography/Headline/Headline\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Text from \"../Typography/Text/Text\";\nimport \"./TabsItem.css\";\n\nexport interface TabsItemProps extends React.HTMLAttributes<HTMLElement> {\n  after?: React.ReactNode;\n  selected?: boolean;\n}\n\nconst TabsItem: React.FC<TabsItemProps> = ({\n  children,\n  selected,\n  after,\n  ...restProps\n}: TabsItemProps) => {\n  const platform = usePlatform();\n  const mode: TabsProps[\"mode\"] = React.useContext(TabsModeContext);\n\n  let TypographyComponent =\n    mode === \"buttons\" || mode === \"segmented\" ? Subhead : Headline;\n\n  if (platform === VKCOM) {\n    TypographyComponent = Text;\n  }\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={classNames(getClassName(\"TabsItem\", platform), {\n        \"TabsItem--selected\": selected,\n      })}\n      hasActive={mode === \"segmented\"}\n      activeMode=\"TabsItem--active\"\n      focusVisibleMode={mode === \"segmented\" ? \"outside\" : \"inside\"}\n    >\n      <TypographyComponent\n        Component=\"span\"\n        vkuiClass=\"TabsItem__in\"\n        weight=\"medium\"\n      >\n        {children}\n      </TypographyComponent>\n      {hasReactNode(after) && <div vkuiClass=\"TabsItem__after\">{after}</div>}\n    </Tappable>\n  );\n};\n\nTabsItem.defaultProps = {\n  selected: false,\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default TabsItem;\n"]},"metadata":{},"sourceType":"module"}