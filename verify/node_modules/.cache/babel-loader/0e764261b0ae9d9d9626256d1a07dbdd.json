{"ast":null,"code":"// Cipher Block Chaining\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _CBC_iv, _CBC_lastBlock;\n\nimport { ModeOfOperation } from \"./mode.js\";\nexport class CBC extends ModeOfOperation {\n  constructor(key, iv) {\n    super(\"ECC\", key, CBC);\n\n    _CBC_iv.set(this, void 0);\n\n    _CBC_lastBlock.set(this, void 0);\n\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n\n      __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\n    }\n\n    __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\n  }\n\n  get iv() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\"));\n  }\n\n  encrypt(plaintext) {\n    if (plaintext.length % 16) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n\n    const ciphertext = new Uint8Array(plaintext.length);\n\n    for (let i = 0; i < plaintext.length; i += 16) {\n      for (let j = 0; j < 16; j++) {\n        __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\n      }\n\n      __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\n\n      ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\n    }\n\n    return ciphertext;\n  }\n\n  decrypt(ciphertext) {\n    if (ciphertext.length % 16) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n\n    const plaintext = new Uint8Array(ciphertext.length);\n\n    for (let i = 0; i < ciphertext.length; i += 16) {\n      const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\n\n      for (let j = 0; j < 16; j++) {\n        plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\n        __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\n      }\n    }\n\n    return plaintext;\n  }\n\n}\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA,SAASA,eAAT,QAAgC,WAAhC;AAEA,OAAM,MAAOC,GAAP,SAAmBD,eAAnB,CAAkC;AAItCE,cAAYC,GAAZ,EAA6BC,EAA7B,EAA4C;AAC1C,UAAM,KAAN,EAAaD,GAAb,EAAkBF,GAAlB;;AAJFI;;AACAC;;AAKE,QAAIF,EAAJ,EAAQ;AACN,UAAIA,EAAE,CAACG,MAAH,GAAY,EAAhB,EAAoB;AAClB,cAAM,IAAIC,SAAJ,CAAc,oCAAd,CAAN;AACD;;AACDC,mCAAIJ,OAAJ,EAAW,IAAIK,UAAJ,CAAeN,EAAf,CAAX,EAA6B,GAA7B;AACD,KALD,MAKO;AACLK,mCAAIJ,OAAJ,EAAW,IAAIK,UAAJ,CAAe,EAAf,CAAX,EAA6B,GAA7B;AACD;;AAEDD,iCAAIH,cAAJ,EAAkB,KAAKF,EAAvB,EAAyB,GAAzB;AACD;;AAEK,MAAFA,EAAE;AAAiB,WAAO,IAAIM,UAAJ,CAAeC,6BAAIN,OAAJ,EAAI,GAAJ,CAAf,CAAP;AAAkC;;AAEzDO,SAAO,CAACC,SAAD,EAAsB;AAC3B,QAAIA,SAAS,CAACN,MAAV,GAAmB,EAAvB,EAA2B;AACzB,YAAM,IAAIC,SAAJ,CAAc,uDAAd,CAAN;AACD;;AAED,UAAMM,UAAU,GAAG,IAAIJ,UAAJ,CAAeG,SAAS,CAACN,MAAzB,CAAnB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACN,MAA9B,EAAsCQ,CAAC,IAAI,EAA3C,EAA+C;AAC7C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BL,qCAAIL,cAAJ,EAAI,GAAJ,EAAgBU,CAAhB,KAAsBH,SAAS,CAACE,CAAC,GAAGC,CAAL,CAA/B;AACD;;AAEDP,mCAAIH,cAAJ,EAAkB,KAAKW,GAAL,CAASL,OAAT,CAAiBD,6BAAIL,cAAJ,EAAI,GAAJ,CAAjB,CAAlB,EAAmD,GAAnD;;AACAQ,gBAAU,CAACI,GAAX,CAAeP,6BAAIL,cAAJ,EAAI,GAAJ,CAAf,EAAgCS,CAAhC;AACD;;AAED,WAAOD,UAAP;AACD;;AAEDK,SAAO,CAACL,UAAD,EAAuB;AAC5B,QAAIA,UAAU,CAACP,MAAX,GAAoB,EAAxB,EAA4B;AACxB,YAAM,IAAIC,SAAJ,CAAc,wDAAd,CAAN;AACH;;AAED,UAAMK,SAAS,GAAG,IAAIH,UAAJ,CAAeI,UAAU,CAACP,MAA1B,CAAlB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACP,MAA/B,EAAuCQ,CAAC,IAAI,EAA5C,EAAgD;AAC5C,YAAMK,KAAK,GAAG,KAAKH,GAAL,CAASE,OAAT,CAAiBL,UAAU,CAACO,QAAX,CAAoBN,CAApB,EAAuBA,CAAC,GAAG,EAA3B,CAAjB,CAAd;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BH,iBAAS,CAACE,CAAC,GAAGC,CAAL,CAAT,GAAmBI,KAAK,CAACJ,CAAD,CAAL,GAAWL,6BAAIL,cAAJ,EAAI,GAAJ,EAAgBU,CAAhB,CAA9B;AACAL,qCAAIL,cAAJ,EAAI,GAAJ,EAAgBU,CAAhB,IAAqBF,UAAU,CAACC,CAAC,GAAGC,CAAL,CAA/B;AACD;AACJ;;AAED,WAAOH,SAAP;AACD;;AAvDqC","names":["ModeOfOperation","CBC","constructor","key","iv","_CBC_iv","_CBC_lastBlock","length","TypeError","__classPrivateFieldSet","Uint8Array","__classPrivateFieldGet","encrypt","plaintext","ciphertext","i","j","aes","set","decrypt","block","subarray"],"sourceRoot":"","sources":["../src.ts/mode-cbc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}