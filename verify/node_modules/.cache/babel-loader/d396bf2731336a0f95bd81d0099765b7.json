{"ast":null,"code":"import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\n\nconst _ripemd160 = function (data) {\n  return noble_ripemd160(data);\n};\n\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\n\nexport function ripemd160(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\n\nripemd160.lock = function () {\n  locked = true;\n};\n\nripemd160.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"ripemd160 is locked\");\n  }\n\n  __ripemd160 = func;\n};\n\nObject.freeze(ripemd160);","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,IAAIC,eAAtB,QAA6C,yBAA7C;AAEA,SAASC,QAAT,EAAoBC,OAApB,QAAmC,mBAAnC;AAKA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,UAAU,GAAG,UAASC,IAAT,EAAyB;AACxC,SAAOL,eAAe,CAACK,IAAD,CAAtB;AACH,CAFD;;AAIA,IAAIC,WAAW,GAAoCF,UAAnD;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUL,SAAV,CAAoBQ,KAApB,EAAoC;AACtC,QAAMF,IAAI,GAAGJ,QAAQ,CAACM,KAAD,EAAQ,MAAR,CAArB;AACA,SAAOL,OAAO,CAACI,WAAW,CAACD,IAAD,CAAZ,CAAd;AACH;AACDN,SAAS,CAACS,CAAV,GAAcJ,UAAd;;AACAL,SAAS,CAACU,IAAV,GAAiB;AAAmBN,QAAM,GAAG,IAAT;AAAgB,CAApD;;AACAJ,SAAS,CAACW,QAAV,GAAqB,UAASC,IAAT,EAA8C;AAC/D,MAAIR,MAAJ,EAAY;AAAE,UAAM,IAAIS,SAAJ,CAAc,qBAAd,CAAN;AAA6C;;AAC3DN,aAAW,GAAGK,IAAd;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcf,SAAd","names":["ripemd160","noble_ripemd160","getBytes","hexlify","locked","_ripemd160","data","__ripemd160","_data","_","lock","register","func","TypeError","Object","freeze"],"sourceRoot":"","sources":["../../src.ts/crypto/ripemd160.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}