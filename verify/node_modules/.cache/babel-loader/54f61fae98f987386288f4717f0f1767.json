{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext } from 'react';\nimport { IconSettingsContext } from './IconSettings';\nvar svgStyle = {\n  display: 'block'\n};\n\nfunction iconClass(fragments, _ref) {\n  var classPrefix = _ref.classPrefix,\n      globalClasses = _ref.globalClasses;\n  var res = '';\n\n  for (var i = 0; i < fragments.length; i++) {\n    if (classPrefix) {\n      res += ' ' + (classPrefix + fragments[i]);\n    }\n\n    if (!classPrefix || globalClasses) {\n      res += ' ' + fragments[i];\n    }\n  }\n\n  return res;\n}\n\nexport var SvgIcon = function SvgIcon(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      viewBox = _ref2.viewBox,\n      id = _ref2.id,\n      className = _ref2.className,\n      style = _ref2.style,\n      fill = _ref2.fill,\n      getRootRef = _ref2.getRootRef,\n      Component = _ref2.Component,\n      restProps = _objectWithoutProperties(_ref2, [\"width\", \"height\", \"viewBox\", \"id\", \"className\", \"style\", \"fill\", \"getRootRef\", \"Component\"]);\n\n  var size = Math.max(width, height);\n  var iconSettings = useContext(IconSettingsContext);\n  var ownClass = iconClass(['Icon', \"Icon--\".concat(size), \"Icon--w-\".concat(width), \"Icon--h-\".concat(height), \"Icon--\".concat(id)], iconSettings);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"presentation\"\n  }, restProps, {\n    ref: getRootRef,\n    className: \"\".concat(ownClass, \" \").concat(className),\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      width: width,\n      height: height\n    })\n  }), /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: viewBox,\n    width: width,\n    height: height,\n    style: svgStyle\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#\".concat(id),\n    style: {\n      fill: 'currentColor',\n      color: fill\n    }\n  })));\n};\nSvgIcon.defaultProps = {\n  Component: 'div',\n  className: '',\n  style: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAyEC,UAAzE,QAA2F,OAA3F;AACA,SAAgCC,mBAAhC,QAA2D,gBAA3D;AAWA,IAAMC,QAAQ,GAAG;AAAEC,SAAO,EAAE;AAAX,CAAjB;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,QAA+F;AAAA,MAArDC,WAAqD,QAArDA,WAAqD;AAAA,MAAxCC,aAAwC,QAAxCA,aAAwC;AAC7F,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIH,WAAJ,EAAiB;AACfE,SAAG,IAAI,OAAOF,WAAW,GAAGD,SAAS,CAACI,CAAD,CAA9B,CAAPD;AACD;;AACD,QAAI,CAACF,WAAD,IAAgBC,aAApB,EAAmC;AACjCC,SAAG,IAAI,MAAMH,SAAS,CAACI,CAAD,CAAtBD;AACD;AACF;;AACD,SAAOA,GAAP;AACD;;AAED,OAAO,IAAMG,OAAyB,GAAG,SAA5BA,OAA4B,QAAiG;AAAA,MAA9FC,KAA8F,SAA9FA,KAA8F;AAAA,MAAvFC,MAAuF,SAAvFA,MAAuF;AAAA,MAA/EC,OAA+E,SAA/EA,OAA+E;AAAA,MAAtEC,EAAsE,SAAtEA,EAAsE;AAAA,MAAlEC,SAAkE,SAAlEA,SAAkE;AAAA,MAAvDC,KAAuD,SAAvDA,KAAuD;AAAA,MAAhDC,IAAgD,SAAhDA,IAAgD;AAAA,MAA1CC,UAA0C,SAA1CA,UAA0C;AAAA,MAA9BC,SAA8B,SAA9BA,SAA8B;AAAA,MAAhBC,SAAgB;;AACxI,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAALD,CAASX,KAATW,EAAgBV,MAAhBU,CAAb;AAEA,MAAME,YAAY,GAAGzB,UAAU,CAACC,mBAAD,CAA/B;AACA,MAAMyB,QAAQ,GAAGtB,SAAS,CAAC,CAAC,MAAD,kBAAkBkB,IAAlB,qBAAqCV,KAArC,qBAAyDC,MAAzD,mBAA4EE,EAA5E,EAAD,EAAoFU,YAApF,CAA1B;AAEA,sBACE1B,oBAACqB,SAAD;AACEO,QAAI,EAAC;AADP,KAEMN,SAFN;AAGEO,OAAG,EAAET,UAHP;AAIEH,aAAS,YAAKU,QAAL,cAAiBV,SAAjB,CAJX;AAKEC,SAAK,kCAAOA,KAAP;AAAcL,WAAK,EAALA,KAAd;AAAqBC,YAAM,EAANA;AAArB;AALP,mBAOEd;AAAKe,WAAO,EAAEA,OAAd;AAAuBF,SAAK,EAAEA,KAA9B;AAAqCC,UAAM,EAAEA,MAA7C;AAAqDI,SAAK,EAAEf;AAA5D,kBACEH;AAAK8B,aAAS,aAAMd,EAAN,CAAd;AAA0BE,SAAK,EAAE;AAAEC,UAAI,EAAE,cAAR;AAAwBY,WAAK,EAAEZ;AAA/B;AAAjC,IADF,CAPF,CADF;AANK;AAqBPP,OAAO,CAACoB,YAARpB,GAAuB;AACrBS,WAAS,EAAE,KADU;AAErBJ,WAAS,EAAE,EAFU;AAGrBC,OAAK,EAAE;AAHc,CAAvBN","names":["React","useContext","IconSettingsContext","svgStyle","display","iconClass","fragments","classPrefix","globalClasses","res","i","length","SvgIcon","width","height","viewBox","id","className","style","fill","getRootRef","Component","restProps","size","Math","max","iconSettings","ownClass","role","ref","xlinkHref","color","defaultProps"],"sources":["../../tmp/SvgIcon.tsx"],"sourcesContent":["import React, { ElementType, FC, HTMLAttributes, RefCallback, RefObject, useContext } from 'react';\nimport { IconSettingsInterface, IconSettingsContext } from './IconSettings';\n\ninterface SvgIconProps extends HTMLAttributes<HTMLDivElement> {\n  width?: number;\n  height?: number;\n  viewBox?: string;\n  fill?: string;\n  getRootRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement>;\n  Component?: ElementType,\n}\n\nconst svgStyle = { display: 'block' };\n\nfunction iconClass(fragments: string[], { classPrefix, globalClasses }: IconSettingsInterface) {\n  let res = '';\n  for (let i = 0; i < fragments.length; i++) {\n    if (classPrefix) {\n      res += ' ' + (classPrefix + fragments[i]);\n    }\n    if (!classPrefix || globalClasses) {\n      res += ' ' + fragments[i];\n    }\n  }\n  return res;\n}\n\nexport const SvgIcon: FC<SvgIconProps> = ({ width, height, viewBox, id, className, style, fill, getRootRef, Component, ...restProps }) => {\n  const size = Math.max(width, height);\n\n  const iconSettings = useContext(IconSettingsContext);\n  const ownClass = iconClass(['Icon', `Icon--${size}`, `Icon--w-${width}`, `Icon--h-${height}`, `Icon--${id}`], iconSettings);\n\n  return (\n    <Component\n      role=\"presentation\"\n      {...restProps}\n      ref={getRootRef}\n      className={`${ownClass} ${className}`}\n      style={{ ...style, width, height }}\n    >\n      <svg viewBox={viewBox} width={width} height={height} style={svgStyle}>\n        <use xlinkHref={`#${id}`} style={{ fill: 'currentColor', color: fill }} />\n      </svg>\n    </Component>\n  );\n};\n\nSvgIcon.defaultProps = {\n  Component: 'div',\n  className: '',\n  style: {},\n};\n"]},"metadata":{},"sourceType":"module"}