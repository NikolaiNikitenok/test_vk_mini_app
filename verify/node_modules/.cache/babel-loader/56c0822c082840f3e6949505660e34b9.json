{"ast":null,"code":"/**\n *  About networks\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\n\nconst Networks = new Map(); // @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n\nexport class Network {\n  #name;\n  #chainId;\n  #plugins;\n\n  constructor(name, chainId) {\n    this.#name = name;\n    this.#chainId = getBigInt(chainId);\n    this.#plugins = new Map();\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: this.chainId\n    };\n  }\n\n  get name() {\n    return this.#name;\n  }\n\n  set name(value) {\n    this.#name = value;\n  }\n\n  get chainId() {\n    return this.#chainId;\n  }\n\n  set chainId(value) {\n    this.#chainId = getBigInt(value, \"chainId\");\n  }\n\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n\n    this.#plugins.set(plugin.name, plugin.clone());\n    return this;\n  }\n\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  } // Gets a list of Plugins which match basename, ignoring any fragment\n\n\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n    let gas = costs.txBase;\n\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n\n    if (tx.accessList) {\n      const accessList = accessListify(tx.accessList);\n\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n\n\n  static from(network) {\n    injectCommonNetworks(); // Default network\n\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    } // Canonical name or chain ID\n\n\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n\n      if (networkFunc) {\n        return networkFunc();\n      }\n\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n\n      assertArgument(false, \"unknown network\", \"network\", network);\n    } // Clonable with network-like abilities\n\n\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone(); //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n\n      return clone;\n    } // Networkish\n\n\n    if (typeof network === \"object\") {\n      assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n      } //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n\n\n      return custom;\n    }\n\n    assertArgument(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n\n\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n\n    const existing = Networks.get(nameOrChainId);\n\n    if (existing) {\n      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n\n    Networks.set(nameOrChainId, networkFunc);\n  }\n\n} // See: https://chainlist.org\n\nlet injected = false;\n\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n\n  injected = true; /// Register popular Ethereum networks\n\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId); // We use 0 to disable ENS\n\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n\n      if (options.priorityFee) {//                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n\n\n      network.attachPlugin(new GasCostPlugin());\n      return network;\n    }; // Register the network by name and chain ID\n\n\n    Network.register(name, func);\n    Network.register(chainId, func);\n\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  }); // Polygon has a 35 gwei maxPriorityFee requirement\n\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"maticMumbai\", 80001, {\n    //        priorityFee: 35000000000,\n    etherscan: {\n      apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["accessListify","getBigInt","assertArgument","EnsPlugin","GasCostPlugin","Networks","Map","Network","constructor","name","chainId","toJSON","value","plugins","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","injected","registerEth","options","func","priorityFee","altNames","etherscan","apiKey","url"],"sourceRoot":"","sources":["../../src.ts/providers/network.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}