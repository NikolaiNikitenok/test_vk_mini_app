{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n/**\r\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\r\n *\r\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\r\n *  of %%message%% and computes the [[keccak256]] digest.\r\n *\r\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\r\n *  first. To compute the digest of a [[DataHexString]], it must be converted\r\n *  to [bytes](getBytes).\r\n *\r\n *  @example:\r\n *    hashMessage(\"Hello World\")\r\n *    //_result:\r\n *\r\n *    // Hashes the SIX (6) string characters, i.e.\r\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\r\n *    hashMessage(\"0x4243\")\r\n *    //_result:\r\n *\r\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\r\n *    hashMessage(getBytes(\"0x4243\"))\r\n *    //_result:\r\n *\r\n *    // ...which is equal to using data\r\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\r\n *    //_result:\r\n *\r\n */\n\nexport function hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = toUtf8Bytes(message);\n  }\n\n  return keccak256(concat([toUtf8Bytes(MessagePrefix), toUtf8Bytes(String(message.length)), message]));\n}\nexport function verifyMessage(message, sig) {\n  const digest = hashMessage(message);\n  return recoverAddress(digest, sig);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,mBAApC;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAM,SAAUC,WAAV,CAAsBC,OAAtB,EAAkD;AACpD,MAAI,OAAOA,OAAP,KAAoB,QAAxB,EAAkC;AAAEA,WAAO,GAAGF,WAAW,CAACE,OAAD,CAArB;AAAiC;;AACrE,SAAON,SAAS,CAACG,MAAM,CAAC,CACpBC,WAAW,CAACH,aAAD,CADS,EAEpBG,WAAW,CAACG,MAAM,CAACD,OAAO,CAACE,MAAT,CAAP,CAFS,EAGpBF,OAHoB,CAAD,CAAP,CAAhB;AAKH;AAED,OAAM,SAAUG,aAAV,CAAwBH,OAAxB,EAAsDI,GAAtD,EAAwE;AAC1E,QAAMC,MAAM,GAAGN,WAAW,CAACC,OAAD,CAA1B;AACA,SAAOJ,cAAc,CAACS,MAAD,EAASD,GAAT,CAArB;AACH","names":["keccak256","MessagePrefix","recoverAddress","concat","toUtf8Bytes","hashMessage","message","String","length","verifyMessage","sig","digest"],"sourceRoot":"","sources":["../../src.ts/hash/message.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}