{"ast":null,"code":"/**\r\n *  About ENS Resolver\r\n *\r\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\r\n */\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { dnsEncode, namehash } from \"../hash/index.js\";\nimport { hexlify, toBeHex, defineProperties, encodeBase58, assert, assertArgument, isError, FetchRequest } from \"../utils/index.js\"; // @TODO: This should use the fetch-data:ipfs gateway\n// Trim off the ipfs:// prefix and return the default gateway URL\n\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    assertArgument(false, \"unsupported IPFS format\", \"link\", link);\n  }\n\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\n\n;\n;\n/**\r\n *  A provider plugin super-class for processing multicoin address types.\r\n */\n\nexport class MulticoinProviderPlugin {\n  name;\n\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n\n  connect(proivder) {\n    return this;\n  }\n\n  supportsCoinType(coinType) {\n    return false;\n  }\n\n  async encodeAddress(coinType, address) {\n    throw new Error(\"unsupported coin\");\n  }\n\n  async decodeAddress(coinType, data) {\n    throw new Error(\"unsupported coin\");\n  }\n\n}\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\n/**\r\n *  A basic multicoin provider plugin.\r\n */\n\nexport class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\n  constructor() {\n    super(BasicMulticoinPluginId);\n  }\n\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n/**\r\n *  A connected object to a resolved ENS name resolver, which can be\r\n *  used to query additional details.\r\n */\n\nexport class EnsResolver {\n  /**\r\n   *  The connected provider.\r\n   */\n  provider;\n  /**\r\n   *  The address of the resolver.\r\n   */\n\n  address;\n  /**\r\n   *  The name this resovler was resolved against.\r\n   */\n\n  name; // For EIP-2544 names, the ancestor that provided the resolver\n\n  #supports2544;\n  #resolver;\n\n  constructor(provider, address, name) {\n    defineProperties(this, {\n      provider,\n      address,\n      name\n    });\n    this.#supports2544 = null;\n    this.#resolver = new Contract(address, [\"function supportsInterface(bytes4) view returns (bool)\", \"function resolve(bytes, bytes) view returns (bytes)\", \"function addr(bytes32) view returns (address)\", \"function addr(bytes32, uint) view returns (address)\", \"function text(bytes32, string) view returns (string)\", \"function contenthash() view returns (bytes)\"], provider);\n  }\n  /**\r\n   *  Resolves to true if the resolver supports wildcard resolution.\r\n   */\n\n\n  async supportsWildcard() {\n    if (this.#supports2544 == null) {\n      this.#supports2544 = (async () => {\n        try {\n          return await this.#resolver.supportsInterface(\"0x9061b923\");\n        } catch (error) {\n          // Wildcard resolvers must understand supportsInterface\n          // and return true.\n          if (isError(error, \"CALL_EXCEPTION\")) {\n            return false;\n          } // Let future attempts try again...\n\n\n          this.#supports2544 = null;\n          throw error;\n        }\n      })();\n    }\n\n    return await this.#supports2544;\n  }\n\n  async #fetch(funcName, params) {\n    params = (params || []).slice();\n    const iface = this.#resolver.interface; // The first parameters is always the nodehash\n\n    params.unshift(namehash(this.name));\n    let fragment = null;\n\n    if (await this.supportsWildcard()) {\n      fragment = iface.getFunction(funcName);\n      assert(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\n        info: {\n          funcName\n        }\n      });\n      params = [dnsEncode(this.name), iface.encodeFunctionData(fragment, params)];\n      funcName = \"resolve(bytes,bytes)\";\n    }\n\n    params.push({\n      ccipReadEnable: true\n    });\n\n    try {\n      const result = await this.#resolver[funcName](...params);\n\n      if (fragment) {\n        return iface.decodeFunctionResult(fragment, result)[0];\n      }\n\n      return result;\n    } catch (error) {\n      if (!isError(error, \"CALL_EXCEPTION\")) {\n        throw error;\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   *  Resolves to the address for %%coinType%% or null if the\r\n   *  provided %%coinType%% has not been configured.\r\n   */\n\n\n  async getAddress(coinType) {\n    if (coinType == null) {\n      coinType = 60;\n    }\n\n    if (coinType === 60) {\n      try {\n        const result = await this.#fetch(\"addr(bytes32)\"); // No address\n\n        if (result == null || result === ZeroAddress) {\n          return null;\n        }\n\n        return result;\n      } catch (error) {\n        if (isError(error, \"CALL_EXCEPTION\")) {\n          return null;\n        }\n\n        throw error;\n      }\n    }\n\n    let coinPlugin = null;\n\n    for (const plugin of this.provider.plugins) {\n      if (!(plugin instanceof MulticoinProviderPlugin)) {\n        continue;\n      }\n\n      if (plugin.supportsCoinType(coinType)) {\n        coinPlugin = plugin;\n        break;\n      }\n    }\n\n    if (coinPlugin == null) {\n      return null;\n    } // keccak256(\"addr(bytes32,uint256\")\n\n\n    const data = await this.#fetch(\"addr(bytes32,uint)\", [coinType]); // No address\n\n    if (data == null || data === \"0x\") {\n      return null;\n    } // Compute the address\n\n\n    const address = await coinPlugin.encodeAddress(coinType, data);\n\n    if (address != null) {\n      return address;\n    }\n\n    assert(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\n      operation: `getAddress(${coinType})`,\n      info: {\n        coinType,\n        data\n      }\n    });\n  }\n  /**\r\n   *  Resovles to the EIP-643 text record for %%key%%, or ``null``\r\n   *  if unconfigured.\r\n   */\n\n\n  async getText(key) {\n    const data = await this.#fetch(\"text(bytes32,string)\", [key]);\n\n    if (data == null || data === \"0x\") {\n      return null;\n    }\n\n    return data;\n  }\n  /**\r\n   *  Rsolves to the content-hash or ``null`` if unconfigured.\r\n   */\n\n\n  async getContentHash() {\n    // keccak256(\"contenthash()\")\n    const data = await this.#fetch(\"contenthash()\"); // No contenthash\n\n    if (data == null || data === \"0x\") {\n      return null;\n    } // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\n\n\n    const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n    if (ipfs) {\n      const scheme = ipfs[1] === \"e3010170\" ? \"ipfs\" : \"ipns\";\n      const length = parseInt(ipfs[4], 16);\n\n      if (ipfs[5].length === length * 2) {\n        return `${scheme}:/\\/${encodeBase58(\"0x\" + ipfs[2])}`;\n      }\n    } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n    const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n    if (swarm && swarm[1].length === 64) {\n      return `bzz:/\\/${swarm[1]}`;\n    }\n\n    assert(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\n      operation: \"getContentHash()\",\n      info: {\n        data\n      }\n    });\n  }\n  /**\r\n   *  Resolves to the avatar url or ``null`` if the avatar is either\r\n   *  unconfigured or incorrectly configured (e.g. references an NFT\r\n   *  not owned by the address).\r\n   *\r\n   *  If diagnosing issues with configurations, the [[_getAvatar]]\r\n   *  method may be useful.\r\n   */\n\n\n  async getAvatar() {\n    const avatar = await this._getAvatar();\n    return avatar.url;\n  }\n  /**\r\n   *  When resolving an avatar, there are many steps involved, such\r\n   *  fetching metadata and possibly validating ownership of an\r\n   *  NFT.\r\n   *\r\n   *  This method can be used to examine each step and the value it\r\n   *  was working from.\r\n   */\n\n\n  async _getAvatar() {\n    const linkage = [{\n      type: \"name\",\n      value: this.name\n    }];\n\n    try {\n      // test data for ricmoo.eth\n      //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n      const avatar = await this.getText(\"avatar\");\n\n      if (avatar == null) {\n        linkage.push({\n          type: \"!avatar\",\n          value: \"\"\n        });\n        return {\n          url: null,\n          linkage\n        };\n      }\n\n      linkage.push({\n        type: \"avatar\",\n        value: avatar\n      });\n\n      for (let i = 0; i < matchers.length; i++) {\n        const match = avatar.match(matchers[i]);\n\n        if (match == null) {\n          continue;\n        }\n\n        const scheme = match[1].toLowerCase();\n\n        switch (scheme) {\n          case \"https\":\n          case \"data\":\n            linkage.push({\n              type: \"url\",\n              value: avatar\n            });\n            return {\n              linkage,\n              url: avatar\n            };\n\n          case \"ipfs\":\n            {\n              const url = getIpfsLink(avatar);\n              linkage.push({\n                type: \"ipfs\",\n                value: avatar\n              });\n              linkage.push({\n                type: \"url\",\n                value: url\n              });\n              return {\n                linkage,\n                url\n              };\n            }\n\n          case \"erc721\":\n          case \"erc1155\":\n            {\n              // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n              const selector = scheme === \"erc721\" ? \"tokenURI(uint256)\" : \"uri(uint256)\";\n              linkage.push({\n                type: scheme,\n                value: avatar\n              }); // The owner of this name\n\n              const owner = await this.getAddress();\n\n              if (owner == null) {\n                linkage.push({\n                  type: \"!owner\",\n                  value: \"\"\n                });\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              const comps = (match[2] || \"\").split(\"/\");\n\n              if (comps.length !== 2) {\n                linkage.push({\n                  type: `!${scheme}caip`,\n                  value: match[2] || \"\"\n                });\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              const tokenId = comps[1];\n              const contract = new Contract(comps[0], [// ERC-721\n              \"function tokenURI(uint) view returns (string)\", \"function ownerOf(uint) view returns (address)\", // ERC-1155\n              \"function uri(uint) view returns (string)\", \"function balanceOf(address, uint256) view returns (uint)\"], this.provider); // Check that this account owns the token\n\n              if (scheme === \"erc721\") {\n                const tokenOwner = await contract.ownerOf(tokenId);\n\n                if (owner !== tokenOwner) {\n                  linkage.push({\n                    type: \"!owner\",\n                    value: tokenOwner\n                  });\n                  return {\n                    url: null,\n                    linkage\n                  };\n                }\n\n                linkage.push({\n                  type: \"owner\",\n                  value: tokenOwner\n                });\n              } else if (scheme === \"erc1155\") {\n                const balance = await contract.balanceOf(owner, tokenId);\n\n                if (!balance) {\n                  linkage.push({\n                    type: \"!balance\",\n                    value: \"0\"\n                  });\n                  return {\n                    url: null,\n                    linkage\n                  };\n                }\n\n                linkage.push({\n                  type: \"balance\",\n                  value: balance.toString()\n                });\n              } // Call the token contract for the metadata URL\n\n\n              let metadataUrl = await contract[selector](tokenId);\n\n              if (metadataUrl == null || metadataUrl === \"0x\") {\n                linkage.push({\n                  type: \"!metadata-url\",\n                  value: \"\"\n                });\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              linkage.push({\n                type: \"metadata-url-base\",\n                value: metadataUrl\n              }); // ERC-1155 allows a generic {id} in the URL\n\n              if (scheme === \"erc1155\") {\n                metadataUrl = metadataUrl.replace(\"{id}\", toBeHex(tokenId, 32).substring(2));\n                linkage.push({\n                  type: \"metadata-url-expanded\",\n                  value: metadataUrl\n                });\n              } // Transform IPFS metadata links\n\n\n              if (metadataUrl.match(/^ipfs:/i)) {\n                metadataUrl = getIpfsLink(metadataUrl);\n              }\n\n              linkage.push({\n                type: \"metadata-url\",\n                value: metadataUrl\n              }); // Get the token metadata\n\n              let metadata = {};\n              const response = await new FetchRequest(metadataUrl).send();\n              response.assertOk();\n\n              try {\n                metadata = response.bodyJson;\n              } catch (error) {\n                try {\n                  linkage.push({\n                    type: \"!metadata\",\n                    value: response.bodyText\n                  });\n                } catch (error) {\n                  const bytes = response.body;\n\n                  if (bytes) {\n                    linkage.push({\n                      type: \"!metadata\",\n                      value: hexlify(bytes)\n                    });\n                  }\n\n                  return {\n                    url: null,\n                    linkage\n                  };\n                }\n\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              if (!metadata) {\n                linkage.push({\n                  type: \"!metadata\",\n                  value: \"\"\n                });\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              linkage.push({\n                type: \"metadata\",\n                value: JSON.stringify(metadata)\n              }); // Pull the image URL out\n\n              let imageUrl = metadata.image;\n\n              if (typeof imageUrl !== \"string\") {\n                linkage.push({\n                  type: \"!imageUrl\",\n                  value: \"\"\n                });\n                return {\n                  url: null,\n                  linkage\n                };\n              }\n\n              if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {// Allow\n              } else {\n                // Transform IPFS link to gateway\n                const ipfs = imageUrl.match(matcherIpfs);\n\n                if (ipfs == null) {\n                  linkage.push({\n                    type: \"!imageUrl-ipfs\",\n                    value: imageUrl\n                  });\n                  return {\n                    url: null,\n                    linkage\n                  };\n                }\n\n                linkage.push({\n                  type: \"imageUrl-ipfs\",\n                  value: imageUrl\n                });\n                imageUrl = getIpfsLink(imageUrl);\n              }\n\n              linkage.push({\n                type: \"url\",\n                value: imageUrl\n              });\n              return {\n                linkage,\n                url: imageUrl\n              };\n            }\n        }\n      }\n    } catch (error) {}\n\n    return {\n      linkage,\n      url: null\n    };\n  }\n\n  static async getEnsAddress(provider) {\n    const network = await provider.getNetwork();\n    const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\"); // No ENS...\n\n    assert(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"getEnsAddress\",\n      info: {\n        network\n      }\n    });\n    return ensPlugin.address;\n  }\n\n  static async #getResolver(provider, name) {\n    const ensAddr = await EnsResolver.getEnsAddress(provider);\n\n    try {\n      const contract = new Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], provider);\n      const addr = await contract.resolver(namehash(name), {\n        enableCcipRead: true\n      });\n\n      if (addr === ZeroAddress) {\n        return null;\n      }\n\n      return addr;\n    } catch (error) {\n      // ENS registry cannot throw errors on resolver(bytes32),\n      // so probably a link error\n      throw error;\n    }\n\n    return null;\n  }\n  /**\r\n   *  Resolve to the ENS resolver for %%name%% using %%provider%% or\r\n   *  ``null`` if unconfigured.\r\n   */\n\n\n  static async fromName(provider, name) {\n    let currentName = name;\n\n    while (true) {\n      if (currentName === \"\" || currentName === \".\") {\n        return null;\n      } // Optimization since the eth node cannot change and does\n      // not have a wildcar resolver\n\n\n      if (name !== \"eth\" && currentName === \"eth\") {\n        return null;\n      } // Check the current node for a resolver\n\n\n      const addr = await EnsResolver.#getResolver(provider, currentName); // Found a resolver!\n\n      if (addr != null) {\n        const resolver = new EnsResolver(provider, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n\n        if (currentName !== name && !(await resolver.supportsWildcard())) {\n          return null;\n        }\n\n        return resolver;\n      } // Get the parent node\n\n\n      currentName = currentName.split(\".\").slice(1).join(\".\");\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ZeroAddress","Contract","dnsEncode","namehash","hexlify","toBeHex","defineProperties","encodeBase58","assert","assertArgument","isError","FetchRequest","getIpfsLink","link","match","substring","MulticoinProviderPlugin","name","constructor","connect","proivder","supportsCoinType","coinType","encodeAddress","address","Error","decodeAddress","data","BasicMulticoinPluginId","BasicMulticoinProviderPlugin","matcherIpfs","RegExp","matchers","EnsResolver","provider","supportsWildcard","supportsInterface","error","funcName","params","slice","iface","interface","unshift","fragment","getFunction","info","encodeFunctionData","push","ccipReadEnable","result","decodeFunctionResult","getAddress","coinPlugin","plugin","plugins","operation","getText","key","getContentHash","ipfs","scheme","length","parseInt","swarm","getAvatar","avatar","_getAvatar","url","linkage","type","value","i","toLowerCase","selector","owner","comps","split","tokenId","contract","tokenOwner","ownerOf","balance","balanceOf","toString","metadataUrl","replace","metadata","response","send","assertOk","bodyJson","bodyText","bytes","body","JSON","stringify","imageUrl","image","getEnsAddress","network","getNetwork","ensPlugin","getPlugin","ensAddr","addr","resolver","enableCcipRead","fromName","currentName","join"],"sourceRoot":"","sources":["../../src.ts/providers/ens-resolver.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}