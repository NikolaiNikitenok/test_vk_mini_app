{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"name\", \"options\", \"activeValue\", \"onSwitch\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { SliderSwitchButton } from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nvar warn = warnOnce(\"SliderSwitch\");\n/**\n * @deprecated Этот компонент устарел и будет удален в 5.0.0. Используйте [`SegmentedControl`](#/SegmentedControl).\n */\n\nvar SliderSwitch = /*#__PURE__*/function (_React$Component) {\n  _inherits(SliderSwitch, _React$Component);\n\n  var _super = _createSuper(SliderSwitch);\n\n  function SliderSwitch(props) {\n    var _props$activeValue;\n\n    var _this;\n\n    _classCallCheck(this, SliderSwitch);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"firstButton\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"secondButton\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSwitch\", function (value) {\n      var onSwitch = _this.props.onSwitch;\n\n      _this.setState(function () {\n        return {\n          activeValue: value\n        };\n      }, function () {\n        onSwitch && onSwitch(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstClick\", function () {\n      var options = _this.props.options;\n      var value = options[0].value;\n\n      _this.onSwitch(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondClick\", function () {\n      var options = _this.props.options;\n      var value = options[1].value;\n\n      _this.onSwitch(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 0\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetFocusedOption\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: -1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchByKey\", function (event) {\n      var _options$find;\n\n      if (event.key !== \"Enter\" && event.key !== \"Spacebar\" && event.key !== \" \") {\n        return;\n      }\n\n      event.preventDefault();\n      var options = _this.props.options;\n      var activeValue = _this.state.activeValue;\n      var value = (_options$find = options.find(function (option) {\n        return option.value !== activeValue;\n      })) === null || _options$find === void 0 ? void 0 : _options$find.value;\n\n      if (value !== undefined) {\n        _this.onSwitch(value);\n      }\n\n      if (options[0].value === value) {\n        var _this$firstButton$cur;\n\n        (_this$firstButton$cur = _this.firstButton.current) === null || _this$firstButton$cur === void 0 ? void 0 : _this$firstButton$cur.focus();\n      } else {\n        var _this$secondButton$cu;\n\n        (_this$secondButton$cu = _this.secondButton.current) === null || _this$secondButton$cu === void 0 ? void 0 : _this$secondButton$cu.focus();\n      }\n    });\n\n    _this.state = {\n      activeValue: (_props$activeValue = props.activeValue) !== null && _props$activeValue !== void 0 ? _props$activeValue : \"\",\n      hoveredOptionId: -1\n    };\n    _this.firstButton = /*#__PURE__*/React.createRef();\n    _this.secondButton = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(SliderSwitch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (process.env.NODE_ENV === \"development\") {\n        warn(\"Этот компонент устарел и будет удален в 5.0.0. Используйте SegmentedControl.\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          name = _this$props.name,\n          options = _this$props.options,\n          _activeValue = _this$props.activeValue,\n          onSwitch = _this$props.onSwitch,\n          restProps = _objectWithoutProperties(_this$props, _excluded);\n\n      var _this$state = this.state,\n          activeValue = _this$state.activeValue,\n          hoveredOptionId = _this$state.hoveredOptionId;\n\n      var _options = _slicedToArray(options, 2),\n          firstOption = _options[0],\n          secondOption = _options[1];\n\n      var firstActive = firstOption.value === activeValue;\n      var secondActive = secondOption.value === activeValue;\n      return createScopedElement(\"div\", _extends({}, restProps, {\n        vkuiClass: \"SliderSwitch\",\n        onKeyDown: this.switchByKey,\n        onMouseLeave: this.resetFocusedOption\n      }), !firstActive && !secondActive && createScopedElement(\"div\", {\n        vkuiClass: \"SliderSwitch__border\"\n      }), createScopedElement(\"div\", {\n        vkuiClass: classNames(\"SliderSwitch__slider\", (_classNames = {}, _defineProperty(_classNames, \"SliderSwitch--firstActive\", firstActive), _defineProperty(_classNames, \"SliderSwitch--secondActive\", secondActive), _classNames))\n      }), createScopedElement(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: activeValue\n      }), createScopedElement(SliderSwitchButton, {\n        active: firstActive,\n        hovered: hoveredOptionId === 0,\n        \"aria-pressed\": firstActive,\n        onClick: this.handleFirstClick,\n        onMouseEnter: this.handleFirstHover,\n        getRootRef: this.firstButton\n      }, firstOption.name), createScopedElement(SliderSwitchButton, {\n        active: secondActive,\n        hovered: hoveredOptionId === 1,\n        onClick: this.handleSecondClick,\n        onMouseEnter: this.handleSecondHover,\n        getRootRef: this.secondButton\n      }, secondOption.name));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.activeValue && nextProps.activeValue !== prevState.activeValue) {\n        return {\n          activeValue: nextProps.activeValue\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SliderSwitch;\n}(React.Component);\n\n_defineProperty(SliderSwitch, \"defaultProps\", {\n  options: [{\n    name: \"\",\n    value: \"\"\n  }, {\n    name: \"\",\n    value: \"\"\n  }]\n});\n\nexport { SliderSwitch };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT;AACA,SAASC,UAAT;AACA,SAASC,QAAT;AA0BA,IAAMC,IAAI,GAAGD,QAAQ,CAAC,cAAD,CAArB;AACA;AACA;AACA;;IACME,Y;;;;;AAIJ,wBAAmBC,KAAnB,EAA6C;AAAA;;AAAA;;AAAAC;;AAC3CC,8BAAMF,KAAN;;AAD2CG;;AAAAA;;AAAAA,+DAsBlC,UAACC,KAAD,EAAiD;AAC1D,UAAQC,QAAR,GAAqBH,MAAKF,KAAL,CAAbK,QAAR;;AAEAH,YAAKI,QAAL,CACE;AAAA,eAAO;AACLC,qBAAW,EAAEH;AADR,SAAP;AADF,SAIE,YAAM;AACJC,gBAAQ,IAAIA,QAAQ,CAACD,KAAD,CAApBC;AALJ;AAzB2C;;AAAAF,uEAmC1B,YAAM;AACvB,UAAQK,OAAR,GAAoBN,MAAKF,KAAL,CAAZQ,OAAR;AACA,UAAQJ,KAAR,GAAkBI,OAAO,CAAC,CAAD,CAAPA,CAAVJ,KAAR;;AAEAF,YAAKG,QAAL,CAAcD,KAAd;AAvC2C;;AAAAD,wEA0CzB,YAAM;AACxB,UAAQK,OAAR,GAAoBN,MAAKF,KAAL,CAAZQ,OAAR;AACA,UAAQJ,KAAR,GAAkBI,OAAO,CAAC,CAAD,CAAPA,CAAVJ,KAAR;;AAEAF,YAAKG,QAAL,CAAcD,KAAd;AA9C2C;;AAAAD,uEAiD1B,YAAM;AACvBD,YAAKI,QAAL,CAAc;AAAA,eAAO;AACnBG,yBAAe,EAAE;AADE,SAAP;AAAd;AAlD2C;;AAAAN,wEAuDzB,YAAM;AACxBD,YAAKI,QAAL,CAAc;AAAA,eAAO;AACnBG,yBAAe,EAAE;AADE,SAAP;AAAd;AAxD2C;;AAAAN,yEA6DxB,YAAM;AACzBD,YAAKI,QAAL,CAAc;AAAA,eAAO;AACnBG,yBAAe,EAAE,CAAC;AADC,SAAP;AAAd;AA9D2C;;AAAAN,kEAmE/B,UAACO,KAAD,EAAgC;AAAA;;AAC5C,UACEA,KAAK,CAACC,GAAND,KAAc,OAAdA,IACAA,KAAK,CAACC,GAAND,KAAc,UADdA,IAEAA,KAAK,CAACC,GAAND,KAAc,GAHhB,EAIE;AACA;AACD;;AACDA,WAAK,CAACE,cAANF;AAEA,UAAQF,OAAR,GAAoBN,MAAKF,KAAL,CAAZQ,OAAR;AACA,UAAQD,WAAR,GAAwBL,MAAKW,KAAL,CAAhBN,WAAR;AACA,UAAMH,KAAK,oBAAGI,OAAO,CAACM,IAARN,CAAa,UAACO,MAAD;AAAA,eAAYA,MAAM,CAACX,KAAPW,KAAiBR,WAA7B;AAAb,QAAH,kDAAGS,cAAwDZ,KAAtE;;AAEA,UAAIA,KAAK,KAAKa,SAAd,EAAyB;AACvBf,cAAKG,QAAL,CAAcD,KAAd;AACD;;AAED,UAAII,OAAO,CAAC,CAAD,CAAPA,CAAWJ,KAAXI,KAAqBJ,KAAzB,EAAgC;AAAA;;AAC9B,uCAAKc,WAAL,CAAiBC,OAAjB,gFAA0BC,KAA1B;AADF,aAEO;AAAA;;AACL,uCAAKC,YAAL,CAAkBF,OAAlB,gFAA2BC,KAA3B;AACD;AAzF0C;;AAG3ClB,UAAKW,KAAL,GAAa;AACXN,iBAAW,wBAAEP,KAAK,CAACO,WAAR,mEAAuB,EADvB;AAEXE,qBAAe,EAAE,CAAC;AAFP,KAAb;AAKAP,UAAKgB,WAAL,gBAAmBxB,KAAK,CAAC4B,SAAN5B,EAAnB;AACAQ,UAAKmB,YAAL,gBAAoB3B,KAAK,CAAC4B,SAAN5B,EAApB;AAT2C;AAU5C;;;;WAkGD,6BAA0B;AACxB,UAAI6B,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,aAA7B,EAA4C;AAC1CzB,YAAI,CACF,8EADE,CAAJA;AAGD;AACF;;;WAED,kBAAgB;AAAA;;AACd,wBAMI,KAAKE,KANT;AAAA,UACE0B,IADF,eACEA,IADF;AAAA,UAEElB,OAFF,eAEEA,OAFF;AAAA,UAGemB,YAHf,eAGEpB,WAHF;AAAA,UAIEF,QAJF,eAIEA,QAJF;AAAA,UAKKuB,SALL;;AAOA,wBAAyC,KAAKf,KAA9C;AAAA,UAAQN,WAAR,eAAQA,WAAR;AAAA,UAAqBE,eAArB,eAAqBA,eAArB;;AAEA,oCAAoCD,OAApC;AAAA,UAAOqB,WAAP;AAAA,UAAoBC,YAApB;;AACA,UAAMC,WAAW,GAAGF,WAAW,CAACzB,KAAZyB,KAAsBtB,WAA1C;AACA,UAAMyB,YAAY,GAAGF,YAAY,CAAC1B,KAAb0B,KAAuBvB,WAA5C;AAEA,aACE0B,wCACML,SADN;AAEEM,iBAAS,EAAC,cAFZ;AAGEC,iBAAS,EAAE,KAAKC,WAHlB;AAIEC,oBAAY,EAAE,KAAKC;AAJrB,UAMG,CAACP,WAAD,IAAgB,CAACC,YAAjB,IACCC;AAAKC,iBAAS,EAAC;AAAf,QAPJ,EASED;AACEC,iBAAS,EAAEtC,UAAU,CAAC,sBAAD,kDAClB,2BADkB,EACYmC,WADZ,gCAElB,4BAFkB,EAEaC,YAFb;AADvB,QATF,EAeEC;AAAOM,YAAI,EAAC,QAAZ;AAAqBb,YAAI,EAAEA,IAA3B;AAAiCtB,aAAK,EAAEG;AAAxC,QAfF,EAgBE0B,oBAACtC,kBAAD;AACE6C,cAAM,EAAET,WADV;AAEEU,eAAO,EAAEhC,eAAe,KAAK,CAF/B;AAGE,wBAAcsB,WAHhB;AAIEW,eAAO,EAAE,KAAKC,gBAJhB;AAKEC,oBAAY,EAAE,KAAKC,gBALrB;AAMEC,kBAAU,EAAE,KAAK5B;AANnB,SAQGW,WAAW,CAACH,IARf,CAhBF,EA0BEO,oBAACtC,kBAAD;AACE6C,cAAM,EAAER,YADV;AAEES,eAAO,EAAEhC,eAAe,KAAK,CAF/B;AAGEiC,eAAO,EAAE,KAAKK,iBAHhB;AAIEH,oBAAY,EAAE,KAAKI,iBAJrB;AAKEF,kBAAU,EAAE,KAAKzB;AALnB,SAOGS,YAAY,CAACJ,IAPhB,CA1BF,CADF;AAsCD;;;WA5ED,kCACEuB,SADF,EAEEC,SAFF,EAGE;AACA,UACED,SAAS,CAAC1C,WAAV0C,IACAA,SAAS,CAAC1C,WAAV0C,KAA0BC,SAAS,CAAC3C,WAFtC,EAGE;AACA,eAAO;AACLA,qBAAW,EAAE0C,SAAS,CAAC1C;AADlB,SAAP;AAGD;;AAED,aAAO,IAAP;AACD;;;;EA9GwBb,KAAK,CAACyD,S;;gBAA3BpD,c,gBAgBkB;AACpBS,SAAO,EAAE,CACP;AAAEkB,QAAI,EAAE,EAAR;AAAYtB,SAAK,EAAE;AAAnB,GADO,EAEP;AAAEsB,QAAI,EAAE,EAAR;AAAYtB,SAAK,EAAE;AAAnB,GAFO;AADW;;AA+JxB,SAASL,YAAT","names":["React","SliderSwitchButton","classNames","warnOnce","warn","SliderSwitch","props","_classCallCheck","_this","_defineProperty","value","onSwitch","setState","activeValue","options","hoveredOptionId","event","key","preventDefault","state","find","option","_options$find","undefined","firstButton","current","focus","secondButton","createRef","process","env","NODE_ENV","name","_activeValue","restProps","firstOption","secondOption","firstActive","secondActive","createScopedElement","vkuiClass","onKeyDown","switchByKey","onMouseLeave","resetFocusedOption","type","active","hovered","onClick","handleFirstClick","onMouseEnter","handleFirstHover","getRootRef","handleSecondClick","handleSecondHover","nextProps","prevState","Component"],"sources":["../../../src/components/SliderSwitch/SliderSwitch.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { SliderSwitchButton } from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { HasPlatform } from \"../../types\";\nimport \"./SliderSwitch.css\";\n\nexport interface SliderSwitchOptionInterface {\n  name: string;\n  value: string | number;\n}\n\nexport interface SliderSwitchProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    HasPlatform {\n  options: Array<{\n    name: string;\n    value: string | number;\n  }>;\n  activeValue?: SliderSwitchOptionInterface[\"value\"];\n  name?: string;\n  onSwitch?: (value: SliderSwitchOptionInterface[\"value\"]) => void;\n}\n\ninterface SliderSwitchState {\n  activeValue: SliderSwitchOptionInterface[\"value\"];\n  hoveredOptionId: number;\n}\n\nconst warn = warnOnce(\"SliderSwitch\");\n/**\n * @deprecated Этот компонент устарел и будет удален в 5.0.0. Используйте [`SegmentedControl`](#/SegmentedControl).\n */\nclass SliderSwitch extends React.Component<\n  SliderSwitchProps,\n  SliderSwitchState\n> {\n  public constructor(props: SliderSwitchProps) {\n    super(props);\n\n    this.state = {\n      activeValue: props.activeValue ?? \"\",\n      hoveredOptionId: -1,\n    };\n\n    this.firstButton = React.createRef();\n    this.secondButton = React.createRef();\n  }\n\n  static defaultProps = {\n    options: [\n      { name: \"\", value: \"\" },\n      { name: \"\", value: \"\" },\n    ],\n  };\n\n  firstButton: React.RefObject<HTMLDivElement>;\n  secondButton: React.RefObject<HTMLDivElement>;\n\n  onSwitch = (value: SliderSwitchOptionInterface[\"value\"]) => {\n    const { onSwitch } = this.props;\n\n    this.setState(\n      () => ({\n        activeValue: value,\n      }),\n      () => {\n        onSwitch && onSwitch(value);\n      }\n    );\n  };\n\n  handleFirstClick = () => {\n    const { options } = this.props;\n    const { value } = options[0];\n\n    this.onSwitch(value);\n  };\n\n  handleSecondClick = () => {\n    const { options } = this.props;\n    const { value } = options[1];\n\n    this.onSwitch(value);\n  };\n\n  handleFirstHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 0,\n    }));\n  };\n\n  handleSecondHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 1,\n    }));\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      hoveredOptionId: -1,\n    }));\n  };\n\n  switchByKey = (event: React.KeyboardEvent) => {\n    if (\n      event.key !== \"Enter\" &&\n      event.key !== \"Spacebar\" &&\n      event.key !== \" \"\n    ) {\n      return;\n    }\n    event.preventDefault();\n\n    const { options } = this.props;\n    const { activeValue } = this.state;\n    const value = options.find((option) => option.value !== activeValue)?.value;\n\n    if (value !== undefined) {\n      this.onSwitch(value);\n    }\n\n    if (options[0].value === value) {\n      this.firstButton.current?.focus();\n    } else {\n      this.secondButton.current?.focus();\n    }\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: SliderSwitchProps,\n    prevState: SliderSwitchState\n  ) {\n    if (\n      nextProps.activeValue &&\n      nextProps.activeValue !== prevState.activeValue\n    ) {\n      return {\n        activeValue: nextProps.activeValue,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount(): void {\n    if (process.env.NODE_ENV === \"development\") {\n      warn(\n        \"Этот компонент устарел и будет удален в 5.0.0. Используйте SegmentedControl.\"\n      );\n    }\n  }\n\n  public render() {\n    const {\n      name,\n      options,\n      activeValue: _activeValue,\n      onSwitch,\n      ...restProps\n    } = this.props;\n    const { activeValue, hoveredOptionId } = this.state;\n\n    const [firstOption, secondOption] = options;\n    const firstActive = firstOption.value === activeValue;\n    const secondActive = secondOption.value === activeValue;\n\n    return (\n      <div\n        {...restProps}\n        vkuiClass=\"SliderSwitch\"\n        onKeyDown={this.switchByKey}\n        onMouseLeave={this.resetFocusedOption}\n      >\n        {!firstActive && !secondActive && (\n          <div vkuiClass=\"SliderSwitch__border\" />\n        )}\n        <div\n          vkuiClass={classNames(\"SliderSwitch__slider\", {\n            [\"SliderSwitch--firstActive\"]: firstActive,\n            [\"SliderSwitch--secondActive\"]: secondActive,\n          })}\n        />\n        <input type=\"hidden\" name={name} value={activeValue} />\n        <SliderSwitchButton\n          active={firstActive}\n          hovered={hoveredOptionId === 0}\n          aria-pressed={firstActive}\n          onClick={this.handleFirstClick}\n          onMouseEnter={this.handleFirstHover}\n          getRootRef={this.firstButton}\n        >\n          {firstOption.name}\n        </SliderSwitchButton>\n        <SliderSwitchButton\n          active={secondActive}\n          hovered={hoveredOptionId === 1}\n          onClick={this.handleSecondClick}\n          onMouseEnter={this.handleSecondHover}\n          getRootRef={this.secondButton}\n        >\n          {secondOption.name}\n        </SliderSwitchButton>\n      </div>\n    );\n  }\n}\n\nexport { SliderSwitch };\n"]},"metadata":{},"sourceType":"module"}