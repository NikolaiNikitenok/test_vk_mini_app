{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChange\", \"defaultValue\", \"min\", \"max\", \"value\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { clamp } from \"../../helpers/math\";\nimport { UniversalSlider } from \"../RangeSlider/UniversalSlider\";\n\nvar Slider = function Slider(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var isControlled = value != null;\n\n  var _React$useState = React.useState(defaultValue == null ? min : defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localValue = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _value = clamp(isControlled ? value : localValue, min, max);\n\n  var handleChange = React.useCallback(function (nextValue, event) {\n    if (props.disabled || _value === nextValue[1]) {\n      return;\n    }\n\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [props.disabled, _value, isControlled, onChange]);\n  var rangeValue = React.useMemo(function () {\n    return [null, _value];\n  }, [_value]);\n  return createScopedElement(UniversalSlider, _extends({}, props, {\n    value: rangeValue,\n    onChange: handleChange,\n    min: min,\n    max: max\n  }));\n}; // eslint-disable-next-line import/no-default-export\n\n\nexport default Slider;","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT;AACA,SACEC,eADF;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAOI;AAAA,MANjBC,QAMiB,QANjBA,QAMiB;AAAA,MALjBC,YAKiB,QALjBA,YAKiB;AAAA,sBAJjBC,GAIiB;AAAA,MAJjBA,GAIiB,yBAJX,CAIW;AAAA,sBAHjBC,GAGiB;AAAA,MAHjBA,GAGiB,yBAHX,GAGW;AAAA,wBAFjBC,KAEiB;AAAA,MAFjBA,KAEiB,2BAFT,CAES;AAAA,MADdC,KACc;;AACjB,MAAMC,YAAY,GAAGF,KAAK,IAAI,IAA9B;;AAEA,wBAA+BR,KAAK,CAACW,QAANX,CAC7BK,YAAY,IAAI,IAAhBA,GAAuBC,GAAvBD,GAA6BA,YADAL,CAA/B;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,QAAnB;;AAGA,MAAMC,MAAM,GAAGb,KAAK,CAACS,YAAY,GAAGF,KAAH,GAAWI,UAAxB,EAAoCN,GAApC,EAAyCC,GAAzC,CAApB;;AAEA,MAAMQ,YAA8D,GAClEf,KAAK,CAACgB,WAANhB,CACE,UAACiB,SAAD,EAAYC,KAAZ,EAAsB;AACpB,QAAIT,KAAK,CAACU,QAANV,IAAkBK,MAAM,KAAKG,SAAS,CAAC,CAAD,CAA1C,EAA+C;AAC7C;AACD;;AACD,KAACP,YAAD,IAAiBG,QAAQ,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAb,YAAQ,IAAIA,QAAQ,CAACa,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApBd;AANJ,KAQE,CAACK,KAAK,CAACU,QAAP,EAAiBL,MAAjB,EAAyBJ,YAAzB,EAAuCN,QAAvC,CARFJ,CADF;AAYA,MAAMoB,UAA0B,GAAGpB,KAAK,CAACqB,OAANrB,CACjC;AAAA,WAAM,CAAC,IAAD,EAAOc,MAAP,CAAN;AADiC,KAEjC,CAACA,MAAD,CAFiCd,CAAnC;AAIA,SACEsB,oBAACpB,eAAD,eACMO,KADN;AAEED,SAAK,EAAEY,UAFT;AAGEhB,YAAQ,EAAEW,YAHZ;AAIET,OAAG,EAAEA,GAJP;AAKEC,OAAG,EAAEA;AALP,KADF;AA/BF,E,CA0CA;;;AACA,eAAeJ,MAAf","names":["React","clamp","UniversalSlider","Slider","onChange","defaultValue","min","max","value","props","isControlled","useState","localValue","setValue","_value","handleChange","useCallback","nextValue","event","disabled","rangeValue","useMemo","createScopedElement"],"sources":["../../../src/components/Slider/Slider.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { clamp } from \"../../helpers/math\";\nimport {\n  UniversalSlider,\n  UniversalSliderProps,\n  UniversalValue,\n} from \"../RangeSlider/UniversalSlider\";\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({\n  onChange,\n  defaultValue,\n  min = 0,\n  max = 100,\n  value = 0,\n  ...props\n}: SliderProps) => {\n  const isControlled = value != null;\n\n  const [localValue, setValue] = React.useState(\n    defaultValue == null ? min : defaultValue\n  );\n  const _value = clamp(isControlled ? value : localValue, min, max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>[\"onChange\"] =\n    React.useCallback(\n      (nextValue, event) => {\n        if (props.disabled || _value === nextValue[1]) {\n          return;\n        }\n        !isControlled && setValue(nextValue[1]);\n        onChange && onChange(nextValue[1], event);\n      },\n      [props.disabled, _value, isControlled, onChange]\n    );\n\n  const rangeValue: [null, number] = React.useMemo(\n    () => [null, _value],\n    [_value]\n  );\n  return (\n    <UniversalSlider\n      {...props}\n      value={rangeValue}\n      onChange={handleChange}\n      min={min}\n      max={max}\n    />\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}