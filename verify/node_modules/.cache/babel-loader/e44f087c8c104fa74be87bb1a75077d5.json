{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Now, `closestIndexTo` doesn't throw an exception\r\n *   when the second argument is not an array, and returns Invalid Date instead.\r\n *\r\n * @param {Date | Number} dateToCompare - the date to compare with\r\n * @param {Array<Date> | Array<number>} datesArray - the array to search\r\n * @returns {Number | undefined} an index of the date closest to the given date or undefined if no valid value is given\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return NaN;\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < Number(minDistance)) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/Users/k8909/OneDrive/Документы/GitHub/test_vk_mini_app/verify/node_modules/date-fns/esm/closestIndexTo/index.js"],"names":["toDate","requiredArgs","closestIndexTo","dirtyDateToCompare","dirtyDatesArray","arguments","dateToCompare","isNaN","Number","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","index","currentDate","distance","Math","abs"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,kBAAxB,EAA4CC,eAA5C,EAA6D;AAC1EH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,aAAa,GAAGN,MAAM,CAACG,kBAAD,CAA1B;AACA,MAAII,KAAK,CAACC,MAAM,CAACF,aAAD,CAAP,CAAT,EAAkC,OAAOG,GAAP;AAClC,MAAIC,aAAa,GAAGJ,aAAa,CAACK,OAAd,EAApB;AACA,MAAIC,UAAJ,CAL0E,CAK1D;;AAEhB,MAAIR,eAAe,IAAI,IAAvB,EAA6B;AAC3BQ,IAAAA,UAAU,GAAG,EAAb,CAD2B,CACV;AAClB,GAFD,MAEO,IAAI,OAAOR,eAAe,CAACS,OAAvB,KAAmC,UAAvC,EAAmD;AACxDD,IAAAA,UAAU,GAAGR,eAAb,CADwD,CAC1B;AAC/B,GAFM,MAEA;AACLQ,IAAAA,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bb,eAA3B,CAAb;AACD;;AAED,MAAIc,MAAJ;AACA,MAAIC,WAAJ;AACAP,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqBC,KAArB,EAA4B;AAC7C,QAAIC,WAAW,GAAGtB,MAAM,CAACoB,SAAD,CAAxB;;AAEA,QAAIb,KAAK,CAACC,MAAM,CAACc,WAAD,CAAP,CAAT,EAAgC;AAC9BJ,MAAAA,MAAM,GAAGT,GAAT;AACAU,MAAAA,WAAW,GAAGV,GAAd;AACA;AACD;;AAED,QAAIc,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASf,aAAa,GAAGY,WAAW,CAACX,OAAZ,EAAzB,CAAf;;AAEA,QAAIO,MAAM,IAAI,IAAV,IAAkBK,QAAQ,GAAGf,MAAM,CAACW,WAAD,CAAvC,EAAsD;AACpDD,MAAAA,MAAM,GAAGG,KAAT;AACAF,MAAAA,WAAW,GAAGI,QAAd;AACD;AACF,GAfD;AAgBA,SAAOL,MAAP;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Now, `closestIndexTo` doesn't throw an exception\r\n *   when the second argument is not an array, and returns Invalid Date instead.\r\n *\r\n * @param {Date | Number} dateToCompare - the date to compare with\r\n * @param {Array<Date> | Array<number>} datesArray - the array to search\r\n * @returns {Number | undefined} an index of the date closest to the given date or undefined if no valid value is given\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\n\r\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\r\n  requiredArgs(2, arguments);\r\n  var dateToCompare = toDate(dirtyDateToCompare);\r\n  if (isNaN(Number(dateToCompare))) return NaN;\r\n  var timeToCompare = dateToCompare.getTime();\r\n  var datesArray; // `dirtyDatesArray` is undefined or null\r\n\r\n  if (dirtyDatesArray == null) {\r\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\r\n  } else {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  }\r\n\r\n  var result;\r\n  var minDistance;\r\n  datesArray.forEach(function (dirtyDate, index) {\r\n    var currentDate = toDate(dirtyDate);\r\n\r\n    if (isNaN(Number(currentDate))) {\r\n      result = NaN;\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n\r\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\r\n\r\n    if (result == null || distance < Number(minDistance)) {\r\n      result = index;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n  return result;\r\n}"]},"metadata":{},"sourceType":"module"}