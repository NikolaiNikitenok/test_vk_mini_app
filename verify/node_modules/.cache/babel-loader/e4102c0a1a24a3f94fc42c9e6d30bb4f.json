{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize/xnf\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp) {\n  assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n  return comp;\n}\n\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ensNormalize(name));\n  const comps = [];\n\n  if (name.length === 0) {\n    return comps;\n  }\n\n  let last = 0;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i]; // A separator (i.e. \".\"); copy this component\n\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  } // There was a stray separator at the end of the name\n\n\n  assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\n\n\nexport function ensNormalize(name) {\n  try {\n    return ens_normalize(name);\n  } catch (error) {\n    assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n  }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\n\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n\n  return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\n\nexport function namehash(name) {\n  assertArgument(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n\n  return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\n\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"mappings":"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","names":["keccak256","concat","hexlify","assertArgument","toUtf8Bytes","ens_normalize","Zeros","Uint8Array","fill","checkComponent","comp","length","ensNameSplit","name","bytes","ensNormalize","comps","last","i","d","push","slice","error","message","isValidName","namehash","result","pop","dnsEncode","map","Error","set"],"sourceRoot":"","sources":["../../src.ts/hash/namehash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}