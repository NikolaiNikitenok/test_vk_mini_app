{"ast":null,"code":"/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\n\nconst _keccak256 = function (data) {\n  return keccak_256(data);\n};\n\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\n\nexport function keccak256(_data) {\n  const data = getBytes(_data, \"data\");\n  return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\n\nkeccak256.lock = function () {\n  locked = true;\n};\n\nkeccak256.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"keccak256 is locked\");\n  }\n\n  __keccak256 = func;\n};\n\nObject.freeze(keccak256);","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAASA,UAAT,QAA2B,oBAA3B;AAEA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;AAKA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,UAAU,GAAG,UAASC,IAAT,EAAyB;AACxC,SAAOL,UAAU,CAACK,IAAD,CAAjB;AACH,CAFD;;AAIA,IAAIC,WAAW,GAAoCF,UAAnD;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUG,SAAV,CAAoBC,KAApB,EAAoC;AACtC,QAAMH,IAAI,GAAGJ,QAAQ,CAACO,KAAD,EAAQ,MAAR,CAArB;AACA,SAAON,OAAO,CAACI,WAAW,CAACD,IAAD,CAAZ,CAAd;AACH;AACDE,SAAS,CAACE,CAAV,GAAcL,UAAd;;AACAG,SAAS,CAACG,IAAV,GAAiB;AAAmBP,QAAM,GAAG,IAAT;AAAgB,CAApD;;AACAI,SAAS,CAACI,QAAV,GAAqB,UAASC,IAAT,EAA8C;AAC/D,MAAIT,MAAJ,EAAY;AAAE,UAAM,IAAIU,SAAJ,CAAc,qBAAd,CAAN;AAA6C;;AAC3DP,aAAW,GAAGM,IAAd;AACH,CAHD;;AAIAE,MAAM,CAACC,MAAP,CAAcR,SAAd","names":["keccak_256","getBytes","hexlify","locked","_keccak256","data","__keccak256","keccak256","_data","_","lock","register","func","TypeError","Object","freeze"],"sourceRoot":"","sources":["../../src.ts/crypto/keccak.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}