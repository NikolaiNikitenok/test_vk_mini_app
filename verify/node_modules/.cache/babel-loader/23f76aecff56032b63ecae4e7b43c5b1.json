{"ast":null,"code":"/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``maticmum``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, hexlify, toQuantity, FetchRequest, assert, assertArgument, isError, toUtf8String } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\nconst THROTTLE = 2000;\n\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\n\nexport class EtherscanPlugin extends NetworkPlugin {\n  /**\n   *  The Etherscan API base URL.\n   */\n  baseUrl;\n  /**\n   *  Creates a new **EtherscanProvider** which will use\n   *  %%baseUrl%%.\n   */\n\n  constructor(baseUrl) {\n    super(EtherscanPluginId);\n    defineProperties(this, {\n      baseUrl\n    });\n  }\n\n  clone() {\n    return new EtherscanPlugin(this.baseUrl);\n  }\n\n}\nlet nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\n\nexport class EtherscanProvider extends AbstractProvider {\n  /**\n   *  The connected network.\n   */\n  network;\n  /**\n   *  The API key or null if using the community provided bandwidth.\n   */\n\n  apiKey;\n  #plugin;\n  /**\n   *  Creates a new **EtherscanBaseProvider**.\n   */\n\n  constructor(_network, _apiKey) {\n    const apiKey = _apiKey != null ? _apiKey : null;\n    super();\n    const network = Network.from(_network);\n    this.#plugin = network.getPlugin(EtherscanPluginId);\n    defineProperties(this, {\n      apiKey,\n      network\n    }); // Test that the network is supported by Etherscan\n\n    this.getBaseUrl();\n  }\n  /**\n   *  Returns the base URL.\n   *\n   *  If an [[EtherscanPlugin]] is configured on the\n   *  [[EtherscanBaseProvider_network]], returns the plugin's\n   *  baseUrl.\n   */\n\n\n  getBaseUrl() {\n    if (this.#plugin) {\n      return this.#plugin.baseUrl;\n    }\n\n    switch (this.network.name) {\n      case \"mainnet\":\n        return \"https:/\\/api.etherscan.io\";\n\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n\n      case \"maticmum\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n\n      default:\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", this.network);\n  }\n  /**\n   *  Returns the URL for the %%module%% and %%params%%.\n   */\n\n\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;\n  }\n  /**\n   *  Returns the URL for using POST requests.\n   */\n\n\n  getPostUrl() {\n    return `${this.getBaseUrl()}/api`;\n  }\n  /**\n   *  Returns the parameters for using POST requests.\n   */\n\n\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n\n  async detectNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the result of calling %%module%% with %%params%%.\n   *\n   *  If %%post%%, the request is made as a POST request.\n   */\n\n\n  async fetch(module, params, post) {\n    const id = nextId++;\n    const url = post ? this.getPostUrl() : this.getUrl(module, params);\n    const payload = post ? this.getPostData(module, params) : null;\n    this.emit(\"debug\", {\n      action: \"sendRequest\",\n      id,\n      url,\n      payload: payload\n    });\n    const request = new FetchRequest(url);\n    request.setThrottleParams({\n      slotInterval: 1000\n    });\n\n    request.retryFunc = (req, resp, attempt) => {\n      if (this.isCommunityResource()) {\n        showThrottleMessage(\"Etherscan\");\n      }\n\n      return Promise.resolve(true);\n    };\n\n    request.processFunc = async (request, response) => {\n      const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};\n      const throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n\n      if (module === \"proxy\") {\n        // This JSON response indicates we are being throttled\n        if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"proxy-NOTOK\",\n            error: result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      } else {\n        if (throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"null result\",\n            error: result.result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      }\n\n      return response;\n    };\n\n    if (payload) {\n      request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      request.body = Object.keys(payload).map(k => `${k}=${payload[k]}`).join(\"&\");\n    }\n\n    const response = await request.send();\n\n    try {\n      response.assertOk();\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error,\n        reason: \"assertOk\"\n      });\n      assert(false, \"response error\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n\n    if (!response.hasBody()) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error: \"missing body\",\n        reason: \"null body\"\n      });\n      assert(false, \"missing response\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n\n    const result = JSON.parse(toUtf8String(response.body));\n\n    if (module === \"proxy\") {\n      if (result.jsonrpc != \"2.0\") {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"invalid JSON-RPC\"\n        });\n        assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n\n      if (result.error) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"JSON-RPC error\"\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    } else {\n      // getLogs, getHistory have weird success responses\n      if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        this.emit(\"debug\", {\n          action: \"receiveRequest\",\n          id,\n          result\n        });\n        return result.result;\n      }\n\n      if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    }\n  }\n  /**\n   *  Returns %%transaction%% normalized for the Etherscan API.\n   */\n\n\n  _getTransactionPostData(transaction) {\n    const result = {};\n\n    for (let key in transaction) {\n      if (transaction[key] == null) {\n        continue;\n      }\n\n      let value = transaction[key];\n\n      if (key === \"type\" && value === 0) {\n        continue;\n      } // Quantity-types require no leading zero, unless 0\n\n\n      if ({\n        type: true,\n        gasLimit: true,\n        gasPrice: true,\n        maxFeePerGs: true,\n        maxPriorityFeePerGas: true,\n        nonce: true,\n        value: true\n      }[key]) {\n        value = toQuantity(value);\n      } else if (key === \"accessList\") {\n        value = \"[\" + accessListify(value).map(set => {\n          return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n        }).join(\",\") + \"]\";\n      } else {\n        value = hexlify(value);\n      }\n\n      result[key] = value;\n    }\n\n    return result;\n  }\n  /**\n   *  Throws the normalized Etherscan error.\n   */\n\n\n  _checkError(req, error, transaction) {\n    // Pull any message out if, possible\n    let message = \"\";\n\n    if (isError(error, \"SERVER_ERROR\")) {\n      // Check for an error emitted by a proxy call\n      try {\n        message = error.info.result.error.message;\n      } catch (e) {}\n\n      if (!message) {\n        try {\n          message = error.info.message;\n        } catch (e) {}\n      }\n    }\n\n    if (req.method === \"estimateGas\") {\n      if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n        assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: req.transaction\n        });\n      }\n    }\n\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      if (message.match(/execution reverted/i)) {\n        let data = \"\";\n\n        try {\n          data = error.info.result.error.data;\n        } catch (error) {}\n\n        const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n        e.info = {\n          request: req,\n          error\n        };\n        throw e;\n      }\n    }\n\n    if (message) {\n      if (req.method === \"broadcastTransaction\") {\n        const transaction = Transaction.from(req.signedTransaction);\n\n        if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n          assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n            transaction\n          });\n        }\n\n        if (message.match(/insufficient funds/)) {\n          assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n            transaction\n          });\n        }\n\n        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n          assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n            transaction\n          });\n        }\n      }\n    } // Something we could not process\n\n\n    throw error;\n  }\n\n  async _detectNetwork() {\n    return this.network;\n  }\n\n  async _perform(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return this.network.chainId;\n\n      case \"getBlockNumber\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_blockNumber\"\n        });\n\n      case \"getGasPrice\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_gasPrice\"\n        });\n\n      case \"getBalance\":\n        // Returns base-10 result\n        return this.fetch(\"account\", {\n          action: \"balance\",\n          address: req.address,\n          tag: req.blockTag\n        });\n\n      case \"getTransactionCount\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionCount\",\n          address: req.address,\n          tag: req.blockTag\n        });\n\n      case \"getCode\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getCode\",\n          address: req.address,\n          tag: req.blockTag\n        });\n\n      case \"getStorage\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getStorageAt\",\n          address: req.address,\n          position: req.position,\n          tag: req.blockTag\n        });\n\n      case \"broadcastTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_sendRawTransaction\",\n          hex: req.signedTransaction\n        }, true).catch(error => {\n          return this._checkError(req, error, req.signedTransaction);\n        });\n\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return this.fetch(\"proxy\", {\n            action: \"eth_getBlockByNumber\",\n            tag: req.blockTag,\n            boolean: req.includeTransactions ? \"true\" : \"false\"\n          });\n        }\n\n        assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"getBlock(blockHash)\"\n        });\n\n      case \"getTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionByHash\",\n          txhash: req.hash\n        });\n\n      case \"getTransactionReceipt\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionReceipt\",\n          txhash: req.hash\n        });\n\n      case \"call\":\n        {\n          if (req.blockTag !== \"latest\") {\n            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n          }\n\n          const postData = this._getTransactionPostData(req.transaction);\n\n          postData.module = \"proxy\";\n          postData.action = \"eth_call\";\n\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n\n      case \"estimateGas\":\n        {\n          const postData = this._getTransactionPostData(req.transaction);\n\n          postData.module = \"proxy\";\n          postData.action = \"eth_estimateGas\";\n\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n\n      /*\n                  case \"getLogs\": {\n                      // Needs to complain if more than one address is passed in\n                      const args: Record<string, any> = { action: \"getLogs\" }\n      \n                      if (params.filter.fromBlock) {\n                          args.fromBlock = checkLogTag(params.filter.fromBlock);\n                      }\n      \n                      if (params.filter.toBlock) {\n                          args.toBlock = checkLogTag(params.filter.toBlock);\n                      }\n      \n                      if (params.filter.address) {\n                          args.address = params.filter.address;\n                      }\n      \n                      // @TODO: We can handle slightly more complicated logs using the logs API\n                      if (params.filter.topics && params.filter.topics.length > 0) {\n                          if (params.filter.topics.length > 1) {\n                              logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                          }\n                          if (params.filter.topics.length === 1) {\n                              const topic0 = params.filter.topics[0];\n                              if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                  logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                              }\n                              args.topic0 = topic0;\n                          }\n                      }\n      \n                      const logs: Array<any> = await this.fetch(\"logs\", args);\n      \n                      // Cache txHash => blockHash\n                      let blocks: { [tag: string]: string } = {};\n      \n                      // Add any missing blockHash to the logs\n                      for (let i = 0; i < logs.length; i++) {\n                          const log = logs[i];\n                          if (log.blockHash != null) { continue; }\n                          if (blocks[log.blockNumber] == null) {\n                              const block = await this.getBlock(log.blockNumber);\n                              if (block) {\n                                  blocks[log.blockNumber] = block.hash;\n                              }\n                          }\n      \n                          log.blockHash = blocks[log.blockNumber];\n                      }\n      \n                      return logs;\n                  }\n      */\n\n      default:\n        break;\n    }\n\n    return super._perform(req);\n  }\n\n  async getNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the current price of ether.\n   *\n   *  This returns ``0`` on any network other than ``mainnet``.\n   */\n\n\n  async getEtherPrice() {\n    if (this.network.name !== \"mainnet\") {\n      return 0.0;\n    }\n\n    return parseFloat((await this.fetch(\"stats\", {\n      action: \"ethprice\"\n    })).ethusd);\n  }\n  /**\n   *  Resolves to a [Contract]] for %%address%%, using the\n   *  Etherscan API to retreive the Contract ABI.\n   */\n\n\n  async getContract(_address) {\n    let address = this._getAddress(_address);\n\n    if (isPromise(address)) {\n      address = await address;\n    }\n\n    try {\n      const resp = await this.fetch(\"contract\", {\n        action: \"getabi\",\n        address\n      });\n      const abi = JSON.parse(resp);\n      return new Contract(address, abi, this);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbiCoder","Contract","accessListify","Transaction","defineProperties","hexlify","toQuantity","FetchRequest","assert","assertArgument","isError","toUtf8String","AbstractProvider","Network","NetworkPlugin","showThrottleMessage","THROTTLE","isPromise","value","then","EtherscanPluginId","EtherscanPlugin","baseUrl","constructor","clone","nextId","EtherscanProvider","network","apiKey","_network","_apiKey","from","getPlugin","getBaseUrl","name","getUrl","module","params","query","Object","keys","reduce","accum","key","getPostUrl","getPostData","apikey","detectNetwork","fetch","post","id","url","payload","emit","action","request","setThrottleParams","slotInterval","retryFunc","req","resp","attempt","isCommunityResource","Promise","resolve","processFunc","response","result","hasBody","JSON","parse","body","throttle","toLowerCase","indexOf","status","message","reason","error","throwThrottleError","setHeader","map","k","join","send","assertOk","jsonrpc","info","match","_getTransactionPostData","transaction","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","set","address","storageKeys","_checkError","e","method","data","getBuiltinCallException","signedTransaction","_detectNetwork","_perform","chainId","tag","blockTag","position","hex","catch","boolean","includeTransactions","operation","txhash","hash","Error","postData","getNetwork","getEtherPrice","parseFloat","ethusd","getContract","_address","_getAddress","abi"],"sourceRoot":"","sources":["../../src.ts/providers/provider-etherscan.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}