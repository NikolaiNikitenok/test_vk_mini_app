{"ast":null,"code":"import { WebSocket as _WebSocket } from \"./ws.js\";\n/*-browser*/\n\nimport { SocketProvider } from \"./provider-socket.js\";\nexport class WebSocketProvider extends SocketProvider {\n  #connect;\n  #websocket;\n\n  get websocket() {\n    if (this.#websocket == null) {\n      throw new Error(\"websocket closed\");\n    }\n\n    return this.#websocket;\n  }\n\n  constructor(url, network) {\n    super(network);\n\n    if (typeof url === \"string\") {\n      this.#connect = () => {\n        return new _WebSocket(url);\n      };\n\n      this.#websocket = this.#connect();\n    } else if (typeof url === \"function\") {\n      this.#connect = url;\n      this.#websocket = url();\n    } else {\n      this.#connect = null;\n      this.#websocket = url;\n    }\n\n    this.websocket.onopen = async () => {\n      try {\n        await this._start();\n        this.resume();\n      } catch (error) {\n        console.log(\"failed to start WebsocketProvider\", error); // @TODO: now what? Attempt reconnect?\n      }\n    };\n\n    this.websocket.onmessage = message => {\n      this._processMessage(message.data);\n    };\n    /*\r\n            this.websocket.onclose = (event) => {\r\n                // @TODO: What event.code should we reconnect on?\r\n                const reconnect = false;\r\n                if (reconnect) {\r\n                    this.pause(true);\r\n                    if (this.#connect) {\r\n                        this.#websocket = this.#connect();\r\n                        this.#websocket.onopen = ...\r\n                        // @TODO: this requires the super class to rebroadcast; move it there\r\n                    }\r\n                    this._reconnect();\r\n                }\r\n            };\r\n    */\n\n  }\n\n  async _write(message) {\n    this.websocket.send(message);\n  }\n\n  async destroy() {\n    if (this.#websocket != null) {\n      this.#websocket.close();\n      this.#websocket = null;\n    }\n\n    super.destroy();\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,IAAIC,UAAtB,QAAwC,SAAxC;AAAmD;;AAEnD,SAASC,cAAT,QAA+B,sBAA/B;AAiBA,OAAM,MAAOC,iBAAP,SAAiCD,cAAjC,CAA+C;AACjD;AAEA;;AACa,MAATE,SAAS;AACT,QAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AAAE,YAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AAAsC;;AACrE,WAAO,KAAK,UAAZ;AACH;;AAEDC,cAAYC,GAAZ,EAA4DC,OAA5D,EAAgF;AAC5E,UAAMA,OAAN;;AACA,QAAI,OAAOD,GAAP,KAAgB,QAApB,EAA8B;AAC1B,WAAK,QAAL,GAAgB,MAAK;AAAG,eAAO,IAAIN,UAAJ,CAAeM,GAAf,CAAP;AAA6B,OAArD;;AACA,WAAK,UAAL,GAAkB,KAAK,QAAL,EAAlB;AACH,KAHD,MAGO,IAAI,OAAOA,GAAP,KAAgB,UAApB,EAAgC;AACnC,WAAK,QAAL,GAAgBA,GAAhB;AACA,WAAK,UAAL,GAAkBA,GAAG,EAArB;AACH,KAHM,MAGA;AACH,WAAK,QAAL,GAAgB,IAAhB;AACA,WAAK,UAAL,GAAkBA,GAAlB;AACH;;AAED,SAAKH,SAAL,CAAeK,MAAf,GAAwB,YAAW;AAC/B,UAAI;AACA,cAAM,KAAKC,MAAL,EAAN;AACA,aAAKC,MAAL;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,eAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,KAAjD,EADY,CAEZ;AACH;AACJ,KARD;;AAUA,SAAKR,SAAL,CAAeW,SAAf,GAA4BC,OAAD,IAA8B;AACrD,WAAKC,eAAL,CAAqBD,OAAO,CAACE,IAA7B;AACH,KAFD;AAGR;;;;;;;;;;;;;;;;AAeK;;AAEW,QAANC,MAAM,CAACH,OAAD,EAAgB;AACxB,SAAKZ,SAAL,CAAegB,IAAf,CAAoBJ,OAApB;AACH;;AAEY,QAAPK,OAAO;AACT,QAAI,KAAK,UAAL,IAAmB,IAAvB,EAA6B;AACzB,WAAK,UAAL,CAAgBC,KAAhB;AACA,WAAK,UAAL,GAAkB,IAAlB;AACH;;AACD,UAAMD,OAAN;AACH;;AA9DgD","names":["WebSocket","_WebSocket","SocketProvider","WebSocketProvider","websocket","Error","constructor","url","network","onopen","_start","resume","error","console","log","onmessage","message","_processMessage","data","_write","send","destroy","close"],"sourceRoot":"","sources":["../../src.ts/providers/provider-websocket.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}