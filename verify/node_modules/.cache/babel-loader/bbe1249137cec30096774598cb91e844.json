{"ast":null,"code":"/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\n\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n    let i = 0;\n\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n\n      i++;\n    }\n\n    return i;\n  } // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n\n\n  if (reason === \"OVERRUN\") {\n    return bytes.length - offset - 1;\n  } // Nothing to skip\n\n\n  return 0;\n}\n\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === \"OVERLONG\") {\n    assertArgument(typeof badCodepoint === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n    output.push(badCodepoint);\n    return 0;\n  } // Put the replacement character into the output\n\n\n  output.push(0xfffd); // Otherwise, process as if ignoring errors\n\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. `\\ufffd`) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\n\n\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n}); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\nfunction getUtf8CodePoints(_bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n\n  const bytes = getBytes(_bytes, \"bytes\");\n  const result = [];\n  let i = 0; // Invalid bytes are ignored\n\n  while (i < bytes.length) {\n    const c = bytes[i++]; // 0xxx xxxx\n\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    } // Multibyte; how many bytes left for this character?\n\n\n    let extraLength = null;\n    let overlongMask = null; // 110x xxxx 10xx xxxx\n\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n      } else {\n        i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n      }\n\n      continue;\n    } // Do we have enough bytes in our data?\n\n\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(\"OVERRUN\", i - 1, bytes, result);\n      continue;\n    } // Remove the length prefix from the char\n\n\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i]; // Invalid continuation byte\n\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n        res = null;\n        break;\n      }\n\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    } // See above loop for invalid continuation byte\n\n\n    if (res === null) {\n      continue;\n    } // Maximum code point\n\n\n    if (res > 0x10ffff) {\n      i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Reserved for UTF-16 surrogate halves\n\n\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Check for overlong sequences (more bytes than needed)\n\n\n    if (res <= overlongMask) {\n      i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n} // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\n\n\nexport function toUtf8Bytes(str, form) {\n  if (form != null) {\n    assertNormalize(form);\n    str = str.normalize(form);\n  }\n\n  let result = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n      assertArgument(i < str.length && (c2 & 0xfc00) === 0xdc00, \"invalid surrogate pair\", \"str\", str); // Surrogate Pair\n\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n\n  return new Uint8Array(result);\n}\n; //export \n\nfunction _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\n\n\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\n\nexport function toUtf8CodePoints(str, form) {\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"mappings":"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","names":["getBytes","assertArgument","assertNormalize","errorFunc","reason","offset","bytes","output","badCodepoint","ignoreFunc","i","o","length","replaceFunc","push","Utf8ErrorFuncs","Object","freeze","error","ignore","replace","getUtf8CodePoints","_bytes","onError","result","c","extraLength","overlongMask","res","j","nextChar","toUtf8Bytes","str","form","normalize","charCodeAt","c2","pair","Uint8Array","_toUtf8String","codePoints","map","codePoint","String","fromCharCode","join","toUtf8String","toUtf8CodePoints"],"sourceRoot":"","sources":["../../src.ts/utils/utf8.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}