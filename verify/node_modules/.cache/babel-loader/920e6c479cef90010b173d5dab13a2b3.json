{"ast":null,"code":"// Electronic Code Book\nimport { ModeOfOperation } from \"./mode.js\";\nexport class ECB extends ModeOfOperation {\n  constructor(key) {\n    super(\"ECB\", key, ECB);\n  }\n\n  encrypt(plaintext) {\n    if (plaintext.length % 16) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n\n    const crypttext = new Uint8Array(plaintext.length);\n\n    for (let i = 0; i < plaintext.length; i += 16) {\n      crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n    }\n\n    return crypttext;\n  }\n\n  decrypt(crypttext) {\n    if (crypttext.length % 16) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n\n    const plaintext = new Uint8Array(crypttext.length);\n\n    for (let i = 0; i < crypttext.length; i += 16) {\n      plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n    }\n\n    return plaintext;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,eAAT,QAAgC,WAAhC;AAEA,OAAM,MAAOC,GAAP,SAAmBD,eAAnB,CAAkC;AAEtCE,cAAYC,GAAZ,EAA2B;AACzB,UAAM,KAAN,EAAaA,GAAb,EAAkBF,GAAlB;AACD;;AAEDG,SAAO,CAACC,SAAD,EAAsB;AAC3B,QAAIA,SAAS,CAACC,MAAV,GAAmB,EAAvB,EAA2B;AACvB,YAAM,IAAIC,SAAJ,CAAc,uDAAd,CAAN;AACH;;AAED,UAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAeJ,SAAS,CAACC,MAAzB,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACC,MAA9B,EAAsCI,CAAC,IAAI,EAA3C,EAA+C;AAC3CF,eAAS,CAACG,GAAV,CAAc,KAAKC,GAAL,CAASR,OAAT,CAAiBC,SAAS,CAACQ,QAAV,CAAmBH,CAAnB,EAAsBA,CAAC,GAAG,EAA1B,CAAjB,CAAd,EAA+DA,CAA/D;AACH;;AAED,WAAOF,SAAP;AACD;;AAEDM,SAAO,CAACN,SAAD,EAAsB;AAC3B,QAAIA,SAAS,CAACF,MAAV,GAAmB,EAAvB,EAA2B;AACvB,YAAM,IAAIC,SAAJ,CAAc,wDAAd,CAAN;AACH;;AAED,UAAMF,SAAS,GAAG,IAAII,UAAJ,CAAeD,SAAS,CAACF,MAAzB,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACF,MAA9B,EAAsCI,CAAC,IAAI,EAA3C,EAA+C;AAC3CL,eAAS,CAACM,GAAV,CAAc,KAAKC,GAAL,CAASE,OAAT,CAAiBN,SAAS,CAACK,QAAV,CAAmBH,CAAnB,EAAsBA,CAAC,GAAG,EAA1B,CAAjB,CAAd,EAA+DA,CAA/D;AACH;;AAED,WAAOL,SAAP;AACD;;AA9BqC","names":["ModeOfOperation","ECB","constructor","key","encrypt","plaintext","length","TypeError","crypttext","Uint8Array","i","set","aes","subarray","decrypt"],"sourceRoot":"","sources":["../src.ts/mode-ecb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}