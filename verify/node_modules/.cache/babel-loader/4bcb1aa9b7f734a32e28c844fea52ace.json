{"ast":null,"code":"/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nimport { CTR } from \"aes-js\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\nimport { version } from \"../_version.js\";\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\n\nexport function isKeystoreJson(json) {\n  try {\n    const data = JSON.parse(json);\n    const version = data.version != null ? parseInt(data.version) : 0;\n\n    if (version === 3) {\n      return true;\n    }\n  } catch (error) {}\n\n  return false;\n}\n\nfunction decrypt(data, key, ciphertext) {\n  const cipher = spelunk(data, \"crypto.cipher:string\");\n\n  if (cipher === \"aes-128-ctr\") {\n    const iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\n    const aesCtr = new CTR(key, iv);\n    return hexlify(aesCtr.decrypt(ciphertext));\n  }\n\n  assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"decrypt\"\n  });\n}\n\nfunction getAccount(data, _key) {\n  const key = getBytes(_key);\n  const ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\n  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n  assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n  const address = computeAddress(privateKey);\n\n  if (data.address) {\n    let check = data.address.toLowerCase();\n\n    if (check.substring(0, 2) !== \"0x\") {\n      check = \"0x\" + check;\n    }\n\n    assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n  }\n\n  const account = {\n    address,\n    privateKey\n  }; // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\n  const version = spelunk(data, \"x-ethers.version:string\");\n\n  if (version === \"0.1\") {\n    const mnemonicKey = key.slice(32, 64);\n    const mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\n    const mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\n    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    account.mnemonic = {\n      path: spelunk(data, \"x-ethers.path:string\") || defaultPath,\n      locale: spelunk(data, \"x-ethers.locale:string\") || \"en\",\n      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n    };\n  }\n\n  return account;\n}\n\nfunction getDecryptKdfParams(data) {\n  const kdf = spelunk(data, \"crypto.kdf:string\");\n\n  if (kdf && typeof kdf === \"string\") {\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      const N = spelunk(data, \"crypto.kdfparams.n:int!\");\n      const r = spelunk(data, \"crypto.kdfparams.r:int!\");\n      const p = spelunk(data, \"crypto.kdfparams.p:int!\"); // Make sure N is a power of 2\n\n      assertArgument(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n      assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n      const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n      return {\n        name: \"scrypt\",\n        salt,\n        N,\n        r,\n        p,\n        dkLen: 64\n      };\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\n      const prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\n      const algorithm = prf.split(\"-\").pop();\n      assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n      const count = spelunk(data, \"crypto.kdfparams.c:int!\");\n      const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\n      assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n      return {\n        name: \"pbkdf2\",\n        salt,\n        count,\n        dkLen,\n        algorithm\n      };\n    }\n  }\n\n  assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\n\n\nexport function decryptKeystoreJsonSync(json, _password) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password);\n  const params = getDecryptKdfParams(data);\n\n  if (params.name === \"pbkdf2\") {\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = pbkdf2(password, salt, count, dkLen, algorithm);\n    return getAccount(data, key);\n  }\n\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = scryptSync(password, salt, N, r, p, dkLen);\n  return getAccount(data, key);\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\n\n\nexport async function decryptKeystoreJson(json, _password, progress) {\n  const data = JSON.parse(json);\n  const password = getPassword(_password);\n  const params = getDecryptKdfParams(data);\n\n  if (params.name === \"pbkdf2\") {\n    if (progress) {\n      progress(0);\n      await stall(0);\n    }\n\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = pbkdf2(password, salt, count, dkLen, algorithm);\n\n    if (progress) {\n      progress(1);\n      await stall(0);\n    }\n\n    return getAccount(data, key);\n  }\n\n  assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n  return getAccount(data, key);\n}\n\nfunction getEncryptKdfParams(options) {\n  // Check/generate the salt\n  const salt = options.salt != null ? getBytes(options.salt, \"options.salt\") : randomBytes(32); // Override the scrypt password-based key derivation function parameters\n\n  let N = 1 << 17,\n      r = 8,\n      p = 1;\n\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n\n  assertArgument(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n  assertArgument(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n  assertArgument(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n  return {\n    name: \"scrypt\",\n    dkLen: 32,\n    salt,\n    N,\n    r,\n    p\n  };\n}\n\nfunction _encryptKeystore(key, kdf, account, options) {\n  const privateKey = getBytes(account.privateKey, \"privateKey\"); // Override initialization vector\n\n  const iv = options.iv != null ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\n  assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv); // Override the uuid\n\n  const uuidRandom = options.uuid != null ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\n  assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv); // This will be used to encrypt the wallet (as per Web3 secret storage)\n  // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\n  const derivedKey = key.slice(0, 16);\n  const macPrefix = key.slice(16, 32); // Encrypt the private key\n\n  const aesCtr = new CTR(derivedKey, iv);\n  const ciphertext = getBytes(aesCtr.encrypt(privateKey)); // Compute the message authentication code, used to check the password\n\n  const mac = keccak256(concat([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\n  const data = {\n    address: account.address.substring(2).toLowerCase(),\n    id: uuidV4(uuidRandom),\n    version: 3,\n    Crypto: {\n      cipher: \"aes-128-ctr\",\n      cipherparams: {\n        iv: hexlify(iv).substring(2)\n      },\n      ciphertext: hexlify(ciphertext).substring(2),\n      kdf: \"scrypt\",\n      kdfparams: {\n        salt: hexlify(kdf.salt).substring(2),\n        n: kdf.N,\n        dklen: 32,\n        p: kdf.p,\n        r: kdf.r\n      },\n      mac: mac.substring(2)\n    }\n  }; // If we have a mnemonic, encrypt it into the JSON wallet\n\n  if (account.mnemonic) {\n    const client = options.client != null ? options.client : `ethers/${version}`;\n    const path = account.mnemonic.path || defaultPath;\n    const locale = account.mnemonic.locale || \"en\";\n    const mnemonicKey = key.slice(32, 64);\n    const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n    const mnemonicIv = randomBytes(16);\n    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n    const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n    const now = new Date();\n    const timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n    const gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n    data[\"x-ethers\"] = {\n      client,\n      gethFilename,\n      path,\n      locale,\n      mnemonicCounter: hexlify(mnemonicIv).substring(2),\n      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n      version: \"0.1\"\n    };\n  }\n\n  return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\n\n\nexport function encryptKeystoreJsonSync(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  const passwordBytes = getPassword(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\n\nexport async function encryptKeystoreJson(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  const passwordBytes = getPassword(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n  return _encryptKeystore(getBytes(key), kdf, account, options);\n}","map":{"version":3,"mappings":"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","names":["CTR","getAddress","keccak256","pbkdf2","randomBytes","scrypt","scryptSync","computeAddress","concat","getBytes","hexlify","uuidV4","assert","assertArgument","getPassword","spelunk","zpad","version","defaultPath","isKeystoreJson","json","data","JSON","parse","parseInt","error","decrypt","key","ciphertext","cipher","iv","aesCtr","operation","getAccount","_key","computedMAC","slice","substring","toLowerCase","privateKey","address","check","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","mnemonic","path","locale","entropy","getDecryptKdfParams","kdf","salt","N","r","p","dkLen","name","prf","algorithm","split","pop","count","decryptKeystoreJsonSync","_password","password","params","stall","duration","Promise","resolve","setTimeout","decryptKeystoreJson","progress","getEncryptKdfParams","options","Number","isSafeInteger","BigInt","_encryptKeystore","length","uuidRandom","uuid","derivedKey","macPrefix","encrypt","mac","id","Crypto","cipherparams","kdfparams","n","dklen","client","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","mnemonicCounter","stringify","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","progressCallback"],"sourceRoot":"","sources":["../../src.ts/wallet/json-keystore.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}