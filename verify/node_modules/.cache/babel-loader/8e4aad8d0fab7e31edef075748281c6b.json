{"ast":null,"code":"//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { getBytes } from \"./data.js\";\n\nfunction hexlifyByte(value) {\n  let result = value.toString(16);\n\n  while (result.length < 2) {\n    result = \"0\" + result;\n  }\n\n  return \"0x\" + result;\n}\n\nfunction unarrayifyInteger(data, offset, length) {\n  let result = 0;\n\n  for (let i = 0; i < length; i++) {\n    result = result * 256 + data[offset + i];\n  }\n\n  return result;\n}\n\nfunction _decodeChildren(data, offset, childOffset, length) {\n  const result = [];\n\n  while (childOffset < offset + 1 + length) {\n    const decoded = _decode(data, childOffset);\n\n    result.push(decoded.result);\n    childOffset += decoded.consumed;\n    assert(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\n      buffer: data,\n      length,\n      offset\n    });\n  }\n\n  return {\n    consumed: 1 + length,\n    result: result\n  };\n} // returns { consumed: number, result: Object }\n\n\nfunction _decode(data, offset) {\n  assert(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\n    buffer: data,\n    length: 0,\n    offset: 1\n  });\n\n  const checkOffset = offset => {\n    assert(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\n      buffer: data,\n      length: data.length,\n      offset\n    });\n  }; // Array with extra length prefix\n\n\n  if (data[offset] >= 0xf8) {\n    const lengthLength = data[offset] - 0xf7;\n    checkOffset(offset + 1 + lengthLength);\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n    checkOffset(offset + 1 + lengthLength + length);\n    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n  } else if (data[offset] >= 0xc0) {\n    const length = data[offset] - 0xc0;\n    checkOffset(offset + 1 + length);\n    return _decodeChildren(data, offset, offset + 1, length);\n  } else if (data[offset] >= 0xb8) {\n    const lengthLength = data[offset] - 0xb7;\n    checkOffset(offset + 1 + lengthLength);\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n    checkOffset(offset + 1 + lengthLength + length);\n    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n    return {\n      consumed: 1 + lengthLength + length,\n      result: result\n    };\n  } else if (data[offset] >= 0x80) {\n    const length = data[offset] - 0x80;\n    checkOffset(offset + 1 + length);\n    const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n    return {\n      consumed: 1 + length,\n      result: result\n    };\n  }\n\n  return {\n    consumed: 1,\n    result: hexlifyByte(data[offset])\n  };\n}\n/**\n *  Decodes %%data%% into the structured data it represents.\n */\n\n\nexport function decodeRlp(_data) {\n  const data = getBytes(_data, \"data\");\n\n  const decoded = _decode(data, 0);\n\n  assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\n  return decoded.result;\n}","map":{"version":3,"mappings":"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","names":["hexlify","assert","assertArgument","getBytes","hexlifyByte","value","result","toString","length","unarrayifyInteger","data","offset","i","_decodeChildren","childOffset","decoded","_decode","push","consumed","buffer","checkOffset","lengthLength","slice","decodeRlp","_data"],"sourceRoot":"","sources":["../../src.ts/utils/rlp-decode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}