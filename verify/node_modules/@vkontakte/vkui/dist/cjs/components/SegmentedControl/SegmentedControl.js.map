{"version":3,"sources":["../../../../src/components/SegmentedControl/SegmentedControl.tsx"],"names":["warn","SegmentedControl","size","name","options","getRootRef","onChange","noop","value","defaultValue","children","restProps","initialValue","React","useState","activeOptionIdx","updateActiveOptionIdx","activeValue","updateActiveValue","nameRef","useRef","_activeOptionIdx","findIndex","option","process","env","NODE_ENV","translateX","handleOnChange","width","length","transform","WebkitTransform","map","label","optionProps","current"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { generateRandomId, noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { SegmentedControlOption } from \"./SegmentedControlOption/SegmentedControlOption\";\nimport { HasRootRef } from \"../../types\";\nimport \"./SegmentedControl.css\";\n\nexport type SegmentedControlValue = string | number | undefined;\n\nexport interface SegmentedControlOptionInterface\n  extends Omit<React.HTMLAttributes<HTMLElement>, \"label\"> {\n  label: React.ReactChild;\n  value: SegmentedControlValue;\n}\n\nexport interface SegmentedControlProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\">,\n    HasRootRef<HTMLDivElement> {\n  options: SegmentedControlOptionInterface[];\n  size?: \"m\" | \"l\";\n  name?: string;\n  onChange?: (value: SegmentedControlValue) => void;\n  value?: SegmentedControlValue;\n  defaultValue?: SegmentedControlValue;\n}\n\nconst warn = warnOnce(\"SegmentedControl\");\nexport const SegmentedControl: React.FC<SegmentedControlProps> = ({\n  size = \"l\",\n  name,\n  options,\n  getRootRef,\n  onChange = noop,\n  value,\n  defaultValue,\n  children,\n  ...restProps\n}) => {\n  let initialValue = defaultValue ?? value;\n\n  if (!initialValue) {\n    initialValue = options[0]?.value;\n  }\n\n  const [activeOptionIdx, updateActiveOptionIdx] = React.useState<number>(0);\n  const [activeValue, updateActiveValue] =\n    React.useState<SegmentedControlValue>(initialValue);\n\n  const nameRef = React.useRef<string>(name ?? generateRandomId());\n\n  useIsomorphicLayoutEffect(() => {\n    const _activeOptionIdx = options.findIndex(\n      (option) => option.value === activeValue\n    );\n\n    if (_activeOptionIdx === -1 && process.env.NODE_ENV === \"development\") {\n      warn(\"defaultValue: такого значения нет среди опций!\");\n    }\n\n    updateActiveOptionIdx(_activeOptionIdx);\n  }, [activeValue, options]);\n\n  const translateX = `translateX(${100 * activeOptionIdx}%)`;\n\n  const handleOnChange = (value: SegmentedControlValue) => {\n    updateActiveValue(value);\n    onChange(value);\n  };\n\n  return (\n    <div\n      {...restProps}\n      vkuiClass={classNames(\"SegmentedControl\", `SegmentedControl--${size}`)}\n      ref={getRootRef}\n    >\n      <div role=\"radiogroup\" vkuiClass=\"SegmentedControl__in\">\n        {activeOptionIdx > -1 && (\n          <div\n            aria-hidden=\"true\"\n            vkuiClass=\"SegmentedControl__slider\"\n            style={{\n              width: `${100 / options.length}%`,\n              transform: translateX,\n              WebkitTransform: translateX,\n            }}\n          />\n        )}\n        {options.map(({ label, ...optionProps }) => (\n          <SegmentedControlOption\n            key={`${optionProps.value}`}\n            {...optionProps}\n            vkuiClass=\"SegmentedControl__option\"\n            name={nameRef.current}\n            checked={activeValue === optionProps.value}\n            onChange={() => handleOnChange(optionProps.value)}\n          >\n            {label}\n          </SegmentedControlOption>\n        ))}\n      </div>\n    </div>\n  );\n};\n"],"file":"SegmentedControl.js"}