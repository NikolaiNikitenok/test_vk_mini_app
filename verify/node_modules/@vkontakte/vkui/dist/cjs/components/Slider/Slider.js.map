{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":["Slider","onChange","defaultValue","min","max","value","props","isControlled","React","useState","localValue","setValue","_value","handleChange","useCallback","nextValue","event","disabled","rangeValue","useMemo"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAQA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAOI;AAAA,MANjBC,QAMiB,QANjBA,QAMiB;AAAA,MALjBC,YAKiB,QALjBA,YAKiB;AAAA,sBAJjBC,GAIiB;AAAA,MAJjBA,GAIiB,yBAJX,CAIW;AAAA,sBAHjBC,GAGiB;AAAA,MAHjBA,GAGiB,yBAHX,GAGW;AAAA,wBAFjBC,KAEiB;AAAA,MAFjBA,KAEiB,2BAFT,CAES;AAAA,MADdC,KACc;AACjB,MAAMC,YAAY,GAAGF,KAAK,IAAI,IAA9B;;AAEA,wBAA+BG,KAAK,CAACC,QAAN,CAC7BP,YAAY,IAAI,IAAhB,GAAuBC,GAAvB,GAA6BD,YADA,CAA/B;AAAA;AAAA,MAAOQ,UAAP;AAAA,MAAmBC,QAAnB;;AAGA,MAAMC,MAAM,GAAG,iBAAML,YAAY,GAAGF,KAAH,GAAWK,UAA7B,EAAyCP,GAAzC,EAA8CC,GAA9C,CAAf;;AAEA,MAAMS,YAA8D,GAClEL,KAAK,CAACM,WAAN,CACE,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACpB,QAAIV,KAAK,CAACW,QAAN,IAAkBL,MAAM,KAAKG,SAAS,CAAC,CAAD,CAA1C,EAA+C;AAC7C;AACD;;AACD,KAACR,YAAD,IAAiBI,QAAQ,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAd,IAAAA,QAAQ,IAAIA,QAAQ,CAACc,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GAPH,EAQE,CAACV,KAAK,CAACW,QAAP,EAAiBL,MAAjB,EAAyBL,YAAzB,EAAuCN,QAAvC,CARF,CADF;AAYA,MAAMiB,UAA0B,GAAGV,KAAK,CAACW,OAAN,CACjC;AAAA,WAAM,CAAC,IAAD,EAAOP,MAAP,CAAN;AAAA,GADiC,EAEjC,CAACA,MAAD,CAFiC,CAAnC;AAIA,SACE,qCAAC,gCAAD,6BACMN,KADN;AAEE,IAAA,KAAK,EAAEY,UAFT;AAGE,IAAA,QAAQ,EAAEL,YAHZ;AAIE,IAAA,GAAG,EAAEV,GAJP;AAKE,IAAA,GAAG,EAAEC;AALP,KADF;AASD,CAxCD,C,CA0CA;;;eACeJ,M","sourcesContent":["import * as React from \"react\";\nimport { clamp } from \"../../helpers/math\";\nimport {\n  UniversalSlider,\n  UniversalSliderProps,\n  UniversalValue,\n} from \"../RangeSlider/UniversalSlider\";\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({\n  onChange,\n  defaultValue,\n  min = 0,\n  max = 100,\n  value = 0,\n  ...props\n}: SliderProps) => {\n  const isControlled = value != null;\n\n  const [localValue, setValue] = React.useState(\n    defaultValue == null ? min : defaultValue\n  );\n  const _value = clamp(isControlled ? value : localValue, min, max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>[\"onChange\"] =\n    React.useCallback(\n      (nextValue, event) => {\n        if (props.disabled || _value === nextValue[1]) {\n          return;\n        }\n        !isControlled && setValue(nextValue[1]);\n        onChange && onChange(nextValue[1], event);\n      },\n      [props.disabled, _value, isControlled, onChange]\n    );\n\n  const rangeValue: [null, number] = React.useMemo(\n    () => [null, _value],\n    [_value]\n  );\n  return (\n    <UniversalSlider\n      {...props}\n      value={rangeValue}\n      onChange={handleChange}\n      min={min}\n      max={max}\n    />\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default Slider;\n"],"file":"Slider.js"}