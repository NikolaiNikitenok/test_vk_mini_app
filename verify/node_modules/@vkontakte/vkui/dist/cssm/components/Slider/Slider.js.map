{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":["React","clamp","UniversalSlider","Slider","onChange","defaultValue","min","max","value","props","isControlled","useState","localValue","setValue","_value","handleChange","useCallback","nextValue","event","disabled","rangeValue","useMemo"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT;AACA,SACEC,eADF;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAOI;AAAA,MANjBC,QAMiB,QANjBA,QAMiB;AAAA,MALjBC,YAKiB,QALjBA,YAKiB;AAAA,sBAJjBC,GAIiB;AAAA,MAJjBA,GAIiB,yBAJX,CAIW;AAAA,sBAHjBC,GAGiB;AAAA,MAHjBA,GAGiB,yBAHX,GAGW;AAAA,wBAFjBC,KAEiB;AAAA,MAFjBA,KAEiB,2BAFT,CAES;AAAA,MADdC,KACc;;AACjB,MAAMC,YAAY,GAAGF,KAAK,IAAI,IAA9B;;AAEA,wBAA+BR,KAAK,CAACW,QAAN,CAC7BN,YAAY,IAAI,IAAhB,GAAuBC,GAAvB,GAA6BD,YADA,CAA/B;AAAA;AAAA,MAAOO,UAAP;AAAA,MAAmBC,QAAnB;;AAGA,MAAMC,MAAM,GAAGb,KAAK,CAACS,YAAY,GAAGF,KAAH,GAAWI,UAAxB,EAAoCN,GAApC,EAAyCC,GAAzC,CAApB;;AAEA,MAAMQ,YAA8D,GAClEf,KAAK,CAACgB,WAAN,CACE,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACpB,QAAIT,KAAK,CAACU,QAAN,IAAkBL,MAAM,KAAKG,SAAS,CAAC,CAAD,CAA1C,EAA+C;AAC7C;AACD;;AACD,KAACP,YAAD,IAAiBG,QAAQ,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAb,IAAAA,QAAQ,IAAIA,QAAQ,CAACa,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GAPH,EAQE,CAACT,KAAK,CAACU,QAAP,EAAiBL,MAAjB,EAAyBJ,YAAzB,EAAuCN,QAAvC,CARF,CADF;AAYA,MAAMgB,UAA0B,GAAGpB,KAAK,CAACqB,OAAN,CACjC;AAAA,WAAM,CAAC,IAAD,EAAOP,MAAP,CAAN;AAAA,GADiC,EAEjC,CAACA,MAAD,CAFiC,CAAnC;AAIA,SACE,oBAAC,eAAD,eACML,KADN;AAEE,IAAA,KAAK,EAAEW,UAFT;AAGE,IAAA,QAAQ,EAAEL,YAHZ;AAIE,IAAA,GAAG,EAAET,GAJP;AAKE,IAAA,GAAG,EAAEC;AALP,KADF;AASD,CAxCD,C,CA0CA;;;AACA,eAAeJ,MAAf","sourcesContent":["import * as React from \"react\";\nimport { clamp } from \"../../helpers/math\";\nimport {\n  UniversalSlider,\n  UniversalSliderProps,\n  UniversalValue,\n} from \"../RangeSlider/UniversalSlider\";\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({\n  onChange,\n  defaultValue,\n  min = 0,\n  max = 100,\n  value = 0,\n  ...props\n}: SliderProps) => {\n  const isControlled = value != null;\n\n  const [localValue, setValue] = React.useState(\n    defaultValue == null ? min : defaultValue\n  );\n  const _value = clamp(isControlled ? value : localValue, min, max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>[\"onChange\"] =\n    React.useCallback(\n      (nextValue, event) => {\n        if (props.disabled || _value === nextValue[1]) {\n          return;\n        }\n        !isControlled && setValue(nextValue[1]);\n        onChange && onChange(nextValue[1], event);\n      },\n      [props.disabled, _value, isControlled, onChange]\n    );\n\n  const rangeValue: [null, number] = React.useMemo(\n    () => [null, _value],\n    [_value]\n  );\n  return (\n    <UniversalSlider\n      {...props}\n      value={rangeValue}\n      onChange={handleChange}\n      min={min}\n      max={max}\n    />\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default Slider;\n"],"file":"Slider.js"}