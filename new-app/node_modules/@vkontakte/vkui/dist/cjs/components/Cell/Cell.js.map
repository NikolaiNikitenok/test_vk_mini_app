{"version":3,"sources":["../../../../src/components/Cell/Cell.tsx"],"names":["warn","Cell","propsMode","mode","onRemove","noop","removePlaceholder","onDragFinish","before","after","disabled","deprecatedRemovable","removable","draggable","deprecatedSelectable","selectable","Component","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","restProps","process","env","NODE_ENV","platform","dragging","rootElRef","draggableProps","React","useContext","ListContext","toggleDrag","useEffect","undefined","dragger","checkbox","checkboxProps","simpleCellDisabled","hasActive","cellClasses","simpleCell","ANDROID","VKCOM","IOS","e","current"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, IOS, VKCOM } from \"../../lib/platform\";\nimport SimpleCell, { SimpleCellProps } from \"../SimpleCell/SimpleCell\";\nimport { HasPlatform } from \"../../types\";\nimport { Removable, RemovableProps } from \"../Removable/Removable\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useDraggable } from \"./useDraggable\";\nimport { ListContext } from \"../List/ListContext\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { CellCheckbox, CellCheckboxProps } from \"./CellCheckbox/CellCheckbox\";\nimport \"./Cell.css\";\n\nexport interface CellProps\n  extends SimpleCellProps,\n    HasPlatform,\n    RemovableProps {\n  mode?: \"removable\" | \"selectable\";\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * @deprecated Будет удалено в 5.0.0. Используйте mode=\"removable\"\n   */\n  removable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * @deprecated Будет удалено в 5.0.0. Используйте mode=\"selectable\"\n   */\n  selectable?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\nconst warn = warnOnce(\"Cell\");\nexport const Cell: React.FC<CellProps> = ({\n  mode: propsMode, // TODO: убрать переименование в propsMode перед 5.0.0\n  onRemove = noop,\n  removePlaceholder = \"Удалить\",\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  removable: deprecatedRemovable, // TODO: удалить перед 5.0.0\n  draggable,\n  selectable: deprecatedSelectable, // TODO: удалить перед 5.0.0\n  Component,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = \"Перенести ячейку\",\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  // TODO: удалить перед 5.0.0\n  let mode: CellProps[\"mode\"] = propsMode;\n\n  if (!propsMode && (deprecatedSelectable || deprecatedRemovable)) {\n    mode = deprecatedSelectable ? \"selectable\" : \"removable\";\n\n    if (process.env.NODE_ENV === \"development\") {\n      deprecatedSelectable &&\n        warn(\n          'Свойство selectable устарелo и будет удалено в 5.0.0. Используйте mode=\"selectable\".'\n        );\n      deprecatedRemovable &&\n        warn(\n          'Свойство removable устарелo и будет удалено в 5.0.0. Используйте mode=\"removable\".'\n        );\n    }\n  }\n  // /end TODO\n\n  const selectable = mode === \"selectable\";\n  const removable = mode === \"removable\";\n\n  const platform = usePlatform();\n\n  const { dragging, rootElRef, ...draggableProps } = useDraggable({\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        vkuiClass=\"Cell__dragger\"\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox vkuiClass=\"Cell__checkbox\" {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || removable || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(getClassName(\"Cell\", platform), {\n    \"Cell--dragging\": dragging,\n    \"Cell--removable\": removable,\n    \"Cell--selectable\": selectable,\n    \"Cell--disabled\": disabled,\n  });\n\n  const simpleCell = (\n    <SimpleCell\n      hasActive={hasActive}\n      hasHover={hasActive}\n      {...restProps}\n      vkuiClass=\"Cell__content\"\n      disabled={simpleCellDisabled}\n      Component={selectable ? \"label\" : Component}\n      before={\n        <React.Fragment>\n          {draggable && (platform === ANDROID || platform === VKCOM) && dragger}\n          {selectable && checkbox}\n          {before}\n        </React.Fragment>\n      }\n      after={\n        <React.Fragment>\n          {draggable && platform === IOS && dragger}\n          {after}\n        </React.Fragment>\n      }\n    />\n  );\n\n  if (removable) {\n    return (\n      <Removable\n        vkuiClass={cellClasses}\n        className={className}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef?.current)}\n      >\n        {simpleCell}\n      </Removable>\n    );\n  }\n\n  return (\n    <div\n      vkuiClass={cellClasses}\n      className={className}\n      style={style}\n      ref={rootElRef}\n    >\n      {simpleCell}\n    </div>\n  );\n};\n"],"file":"Cell.js"}