{"version":3,"sources":["../../../../src/components/ChipsSelect/useChipsSelect.ts"],"names":["useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","React","useState","opened","setOpened","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","useMemo","filter","option","length","filteredSet","Set","selected","map","item","includes","delete"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ChipsInputOption } from \"../ChipsInput/ChipsInput\";\nimport { useChipsInput } from \"../ChipsInput/useChipsInput\";\nimport { ChipsSelectProps } from \"./ChipsSelect\";\n\nexport const useChipsSelect = <Option extends ChipsInputOption>(\n  props: Partial<ChipsSelectProps<Option>>\n) => {\n  const { options, filterFn, getOptionLabel, getOptionValue } = props;\n\n  const [opened, setOpened] = React.useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<\n    number | null\n  >(0);\n  const [focusedOption, setFocusedOption] = React.useState<Option | null>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } =\n    useChipsInput(props);\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement> | undefined\n  ) => {\n    if (!e) {\n      return;\n    }\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = React.useMemo(() => {\n    return filterFn\n      ? options!.filter((option) =>\n          filterFn(fieldValue, option, getOptionLabel)\n        )\n      : (options as Option[]);\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = React.useMemo(() => {\n    if (!filteredOptions.length) {\n      return filteredOptions;\n    }\n\n    const filteredSet = new Set(filteredOptions);\n    const selected = selectedOptions.map((item) => getOptionValue!(item));\n\n    for (const item of filteredSet) {\n      if (selected.includes(getOptionValue!(item))) {\n        filteredSet.delete(item);\n      }\n    }\n\n    return [...filteredSet];\n  }, [filteredOptions, selectedOptions, getOptionValue]);\n\n  return {\n    ...chipsInputState,\n    fieldValue,\n    handleInputChange,\n    opened,\n    setOpened,\n    filteredOptions,\n    focusedOptionIndex,\n    setFocusedOptionIndex,\n    focusedOption,\n    setFocusedOption,\n    selectedOptions,\n  };\n};\n"],"file":"useChipsSelect.js"}