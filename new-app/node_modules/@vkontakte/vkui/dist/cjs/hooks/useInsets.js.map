{"version":3,"sources":["../../../src/hooks/useInsets.ts"],"names":["initialState","bottom","top","left","right","resolveInsets","e","detail","type","data","insets","vkBridge","subscribe","useInsets","React","useState","setInsets","connectListener","unsubscribe"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AASA,IAAIA,YAAoB,GAAG;AACzBC,EAAAA,MAAM,EAAE,IADiB;AAEzBC,EAAAA,GAAG,EAAE,IAFoB;AAGzBC,EAAAA,IAAI,EAAE,IAHmB;AAIzBC,EAAAA,KAAK,EAAE;AAJkB,CAA3B;;AAgBA,SAASC,aAAT,CAAuBC,CAAvB,EAAsD;AACpD,kBAAuBA,CAAC,CAACC,MAAzB;AAAA,MAAQC,IAAR,aAAQA,IAAR;AAAA,MAAcC,IAAd,aAAcA,IAAd;;AACA,UAAQD,IAAR;AACE,SAAK,sBAAL;AACA,SAAK,sBAAL;AAA6B;AAC3B,UAAQE,MAAR,GAAmBD,IAAnB,CAAQC,MAAR;;AACA,UAAIA,MAAJ,EAAY;AACV,2EACKA,MADL;AAEET,UAAAA,MAAM,EAAES,MAAM,CAACT,MAAP,GAAgB,GAAhB,GAAsB,CAAtB,GAA0BS,MAAM,CAACT,MAF3C,CAEmD;;AAFnD;AAID;;AATL;;AAWA,SAAO,IAAP;AACD;;AAEDU,kBAASC,SAAT,CAAmB,UAACN,CAAD,EAAoB;AACrC,MAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,MAAII,MAAJ,EAAY;AACVV,IAAAA,YAAY,GAAGU,MAAf;AACD;AACF,CALD;;AAOO,SAASG,SAAT,GAA6B;AAClC,wBAA4BC,KAAK,CAACC,QAAN,CAAuBf,YAAvB,CAA5B;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeM,SAAf;;AAEA,4DAA0B,YAAM;AAC9B,aAASC,eAAT,CAAyBX,CAAzB,EAAyC;AACvC,UAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,UAAII,MAAJ,EAAY;AACVM,QAAAA,SAAS,CAACN,MAAD,CAAT;AACD;AACF;;AAEDC,sBAASC,SAAT,CAAmBK,eAAnB;;AACA,WAAO,YAAM;AACXN,wBAASO,WAAT,CAAqBD,eAArB;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;AAcA,SAAOP,MAAP;AACD","sourcesContent":["import * as React from \"react\";\nimport vkBridge, { Insets as BridgeInsets } from \"@vkontakte/vk-bridge\";\nimport { useIsomorphicLayoutEffect } from \"../lib/useIsomorphicLayoutEffect\";\n\nexport interface Insets {\n  bottom: BridgeInsets[\"bottom\"] | null;\n  top: BridgeInsets[\"top\"] | null;\n  left: BridgeInsets[\"left\"] | null;\n  right: BridgeInsets[\"right\"] | null;\n}\n\nlet initialState: Insets = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null,\n};\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nfunction resolveInsets(e: BridgeEvent): Insets | null {\n  const { type, data } = e.detail;\n  switch (type) {\n    case \"VKWebAppUpdateConfig\":\n    case \"VKWebAppUpdateInsets\": // Устаревшее событие vk-bridge\n      const { insets } = data;\n      if (insets) {\n        return {\n          ...insets,\n          bottom: insets.bottom > 150 ? 0 : insets.bottom, // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n        };\n      }\n  }\n  return null;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const insets = resolveInsets(e);\n  if (insets) {\n    initialState = insets;\n  }\n});\n\nexport function useInsets(): Insets {\n  const [insets, setInsets] = React.useState<Insets>(initialState);\n\n  useIsomorphicLayoutEffect(() => {\n    function connectListener(e: BridgeEvent) {\n      const insets = resolveInsets(e);\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return () => {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n\n  return insets;\n}\n"],"file":"useInsets.js"}