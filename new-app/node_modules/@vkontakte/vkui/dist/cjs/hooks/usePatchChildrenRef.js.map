{"version":3,"sources":["../../../src/hooks/usePatchChildrenRef.ts"],"names":["isDOMTypeElement","element","type","warn","usePatchChildrenRef","children","childRef","React","isValidElement","ref","props","getRootRef","patchedRef","useEffect","current","process","env","NODE_ENV","cloneElement"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,OADuB,EAEmB;AAC1C,SAAO,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAA/B;AACD,CAJD;;AAMA,IAAMC,IAAI,GAAG,wBAAS,qBAAT,CAAb;;AACO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,QADiC,EAEsC;AACvE,MAAMC,QAAQ,GACZ,aAAAC,KAAK,CAACC,cAAN,CAAqBH,QAArB,MACCL,gBAAgB,CAACK,QAAD,CAAhB,GACIA,QAAQ,CAACI,GADb,GAEGJ,QAAQ,CAACK,KAAT,CAAeC,UAHnB,CADF;AAKA,MAAMC,UAAU,GAAG,gCAAgBN,QAAhB,CAAnB;AACAC,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACD,UAAU,CAACE,OAAZ,IAAuBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAApD,EAAmE;AACjEd,MAAAA,IAAI,CACF,wGACE,0DAFA,CAAJ;AAID;AACF,GAPD,EAOG,CAACE,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEH,IAAX,EAAiBU,UAAjB,CAPH;AAQA,SAAO,CACLA,UADK,EAEL,aAAAL,KAAK,CAACC,cAAN,CAAqBH,QAArB,iBACIE,KAAK,CAACW,YAAN,CAAmBb,QAAnB,oCACGL,gBAAgB,CAACK,QAAD,CAAhB,GAA6B,KAA7B,GAAqC,YADxC,EACuDO,UADvD,EADJ,GAIIP,QANC,CAAP;AAQD,CAzBM","sourcesContent":["import * as React from \"react\";\nimport { useExternRef } from \"./useExternRef\";\nimport { warnOnce } from \"../lib/warnOnce\";\n\ntype ChildrenElement<T> = React.ReactElement<{ getRootRef?: React.Ref<T> }>;\n\nconst isDOMTypeElement = (\n  element: React.ReactElement\n): element is React.DOMElement<any, any> => {\n  return typeof element.type === \"string\";\n};\n\nconst warn = warnOnce(\"usePatchChildrenRef\");\nexport const usePatchChildrenRef = <T = HTMLElement>(\n  children?: ChildrenElement<T>\n): [React.MutableRefObject<T | null>, ChildrenElement<T> | undefined] => {\n  const childRef =\n    React.isValidElement(children) &&\n    (isDOMTypeElement(children)\n      ? (children.ref as React.Ref<T>)\n      : children.props.getRootRef);\n  const patchedRef = useExternRef<T>(childRef);\n  React.useEffect(() => {\n    if (!patchedRef.current && process.env.NODE_ENV === \"development\") {\n      warn(\n        \"Кажется, в `children` передан компонент, который не поддерживает свойство `getRootRef`. Мы не можем\" +\n          \"получить ссылку на корневой dom-элемент этого компонента\"\n      );\n    }\n  }, [children?.type, patchedRef]);\n  return [\n    patchedRef,\n    React.isValidElement(children)\n      ? React.cloneElement(children, {\n          [isDOMTypeElement(children) ? \"ref\" : \"getRootRef\"]: patchedRef,\n        })\n      : children,\n  ];\n};\n"],"file":"usePatchChildrenRef.js"}