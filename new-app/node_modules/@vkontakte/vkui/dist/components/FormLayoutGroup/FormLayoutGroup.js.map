{"version":3,"sources":["../../../src/components/FormLayoutGroup/FormLayoutGroup.tsx"],"names":["getClassName","classNames","noop","useExternRef","usePlatform","Removable","useAdaptivity","FormLayoutGroup","children","mode","removable","removePlaceholder","onRemove","getRootRef","restProps","platform","sizeY","isRemovable","rootEl","e","current"],"mappings":";;;;AAEA,SAASA,YAAT;AACA,SAASC,UAAT;AACA,SAASC,IAAT;AACA,SAASC,YAAT;AACA,SAASC,WAAT;AACA,SAASC,SAAT;AACA,SAASC,aAAT;;AAcA,IAAMC,eAA+C,GAAG,SAAlDA,eAAkD,OAQ5B;AAAA,MAP1BC,QAO0B,QAP1BA,QAO0B;AAAA,uBAN1BC,IAM0B;AAAA,MAN1BA,IAM0B,0BANnB,UAMmB;AAAA,MAL1BC,SAK0B,QAL1BA,SAK0B;AAAA,mCAJ1BC,iBAI0B;AAAA,MAJ1BA,iBAI0B,sCAJN,SAIM;AAAA,2BAH1BC,QAG0B;AAAA,MAH1BA,SAG0B,8BAHfV,IAGe;AAAA,MAF1BW,UAE0B,QAF1BA,UAE0B;AAAA,MADvBC,SACuB;;AAC1B,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AACA,uBAAkBE,aAAa,EAA/B;AAAA,MAAQU,KAAR,kBAAQA,KAAR;;AACA,MAAMC,WAAW,GAAGP,SAAS,IAAID,IAAI,KAAK,YAA1C;AACA,MAAMS,MAAM,GAAGf,YAAY,CAACU,UAAD,CAA3B;AAEA,SACE;AACE,IAAA,GAAG,EAAEK,MADP;AAEE,IAAA,SAAS,EAAEjB,UAAU,CACnBD,YAAY,CAAC,iBAAD,EAAoBe,QAApB,CADO,mCAEOC,KAFP,8BAGCP,IAHD,GAInB;AACE,oCAA8BQ;AADhC,KAJmB;AAFvB,KAUMH,SAVN,GAYGG,WAAW,GACV,oBAAC,SAAD;AACE,IAAA,SAAS,EAAC,4BADZ;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,iBAAiB,EAAEN,iBAHrB;AAIE,IAAA,QAAQ,EAAE,kBAACQ,CAAD,EAAO;AACf,UAAID,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEE,OAAZ,EAAqB;AACnBR,QAAAA,SAAQ,CAACO,CAAD,EAAID,MAAM,CAACE,OAAX,CAAR;AACD;AACF;AARH,KAUGZ,QAVH,CADU,GAcVA,QA1BJ,CADF;AA+BD,CA7CD,C,CA+CA;;;AACA,eAAeD,eAAf","sourcesContent":["import * as React from \"react\";\nimport { HasRootRef } from \"../../types\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { noop } from \"../../lib/utils\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Removable, RemovableProps } from \"../Removable/Removable\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport \"./FormLayoutGroup.css\";\n\nexport interface FormLayoutGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: \"vertical\" | \"horizontal\";\n  /**\n   * Только для режима horizontal. Дает возможность удалить всю группу `FormItem`.\n   */\n  removable?: boolean;\n}\n\nconst FormLayoutGroup: React.FC<FormLayoutGroupProps> = ({\n  children,\n  mode = \"vertical\",\n  removable,\n  removePlaceholder = \"Удалить\",\n  onRemove = noop,\n  getRootRef,\n  ...restProps\n}: FormLayoutGroupProps) => {\n  const platform = usePlatform();\n  const { sizeY } = useAdaptivity();\n  const isRemovable = removable && mode === \"horizontal\";\n  const rootEl = useExternRef(getRootRef);\n\n  return (\n    <div\n      ref={rootEl}\n      vkuiClass={classNames(\n        getClassName(\"FormLayoutGroup\", platform),\n        `FormLayoutGroup--sizeY-${sizeY}`,\n        `FormLayoutGroup--${mode}`,\n        {\n          \"FormLayoutGroup--removable\": isRemovable,\n        }\n      )}\n      {...restProps}\n    >\n      {isRemovable ? (\n        <Removable\n          vkuiClass=\"FormLayoutGroup__removable\"\n          align=\"start\"\n          removePlaceholder={removePlaceholder}\n          onRemove={(e) => {\n            if (rootEl?.current) {\n              onRemove(e, rootEl.current);\n            }\n          }}\n        >\n          {children}\n        </Removable>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default FormLayoutGroup;\n"],"file":"FormLayoutGroup.js"}