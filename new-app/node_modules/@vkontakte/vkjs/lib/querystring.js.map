{"version":3,"sources":["../src/querystring.ts"],"names":["parse","query","trim","replace","matches","exec","str","split","reduce","acc","item","param","decodeURIComponent","stringify","data","options","encode","value","encodeURIComponent","String","Object","keys","key","undefined","skipNull","push","join","Array","isArray","map","arrayItem","querystring"],"mappings":";;;;;;;;;;;;;;;;;AAIA,SAASA,KAAT,CAAeC,KAAf,EAAiD;AAC/C,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAEDA,EAAAA,KAAK,GAAGA,KAAK,CAACC,IAAN,GAAaC,OAAb,CAAqB,QAArB,EAA+B,EAA/B,CAAR;;AACA,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,MAAMG,OAAO,GAAG,YAAYC,IAAZ,CAAiBJ,KAAjB,CAAhB;AACA,MAAMK,GAAG,GAAGF,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgBH,KAAnC;AAEA,SAAOK,GAAG,CACPC,KADI,CACE,GADF,EAEJC,MAFI,CAEG,UAACC,GAAD,EAAmBC,IAAnB,EAAoC;AAC1C,QAAMC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAd;;AAEA,QAAII,KAAK,CAAC,CAAD,CAAT,EAAc;AACZF,MAAAA,GAAG,CAACE,KAAK,CAAC,CAAD,CAAN,CAAH,GAAgBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAlC;AACD;;AAED,WAAOF,GAAP;AACD,GAVI,EAUF,EAVE,CAAP;AAWD;;AAuBD,SAASI,SAAT,CAAmBC,IAAnB,EAAiF;AAAA,MAAxCC,OAAwC,uEAAZ,EAAY;;AAC/E,MAAI,yBAAOD,IAAP,MAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,WAAO,EAAP;AACD;;AAEDC,EAAAA,OAAO;AACLC,IAAAA,MAAM,EAAE;AADH,KAEFD,OAFE,CAAP;;AAKA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAwB;AACrC,WAAOF,OAAO,CAACC,MAAR,GAAiBE,kBAAkB,CAACD,KAAD,CAAnC,GAA6CE,MAAM,CAACF,KAAD,CAA1D;AACD,GAFD;;AAIA,SAAOG,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBN,MAAlB,CAAmC,UAACC,GAAD,EAAMa,GAAN,EAAc;AACtD,QAAML,KAAK,GAAGH,IAAI,CAACQ,GAAD,CAAlB;;AAEA,QAAIL,KAAK,KAAKM,SAAd,EAAyB;AACvB,aAAOd,GAAP;AACD;;AAED,QAAIQ,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAI,CAACF,OAAO,CAACS,QAAb,EAAuB;AACrBf,QAAAA,GAAG,CAACgB,IAAJ,CAAS,CAACT,MAAM,CAACM,GAAD,CAAP,EAAc,EAAd,EAAkBI,IAAlB,CAAuB,GAAvB,CAAT;AACD;;AAED,aAAOjB,GAAP;AACD;;AAED,QAAIkB,KAAK,CAACC,OAAN,CAAcX,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,CAACY,GAAN,CAAU,UAACC,SAAD,EAAe;AACvBrB,QAAAA,GAAG,CAACgB,IAAJ,WAAYT,MAAM,CAACM,GAAD,CAAlB,gBAA6BN,MAAM,CAACc,SAAD,CAAnC;AACD,OAFD,EAEGJ,IAFH;AAGA,aAAOjB,GAAP;AACD;;AAEDA,IAAAA,GAAG,CAACgB,IAAJ,CAAS,CAACT,MAAM,CAACM,GAAD,CAAP,EAAcN,MAAM,CAACC,KAAD,CAApB,EAA6BS,IAA7B,CAAkC,GAAlC,CAAT;AACA,WAAOjB,GAAP;AACD,GAxBM,EAwBJ,EAxBI,EAwBAiB,IAxBA,CAwBK,GAxBL,CAAP;AAyBD;;AAEM,IAAMK,WAAW,GAAG;AACzB/B,EAAAA,KAAK,EAALA,KADyB;AAEzBa,EAAAA,SAAS,EAATA;AAFyB,CAApB","sourcesContent":["export interface ParsedQuery<T = string> {\n  [key: string]: T | T[] | null;\n}\n\nfunction parse(query: string | any): ParsedQuery {\n  if (typeof query !== 'string') {\n    return {};\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return {};\n  }\n\n  const matches = /\\?(.+)$/ig.exec(query);\n  const str = matches ? matches[1] : query;\n\n  return str\n    .split('&')\n    .reduce((acc: ParsedQuery, item: string) => {\n      const param = item.split('=');\n\n      if (param[1]) {\n        acc[param[0]] = decodeURIComponent(param[1]);\n      }\n\n      return acc;\n    }, {});\n}\n\ntype StringifyQueryItem = string | boolean | number | null | undefined;\n\ntype StringifyQuery = Record<string, StringifyQueryItem | readonly StringifyQueryItem[]>;\n\ninterface StringifyOptions {\n  /**\n   * URL encode the keys and values\n   *\n   * @default true\n   */\n  encode?: boolean;\n\n  /**\n   * Skip keys with `null` as the value.\n   * Keys with `undefined` as the value are always ignored.\n   *\n   * @default true\n   */\n  skipNull?: true;\n}\n\nfunction stringify(data: StringifyQuery, options: StringifyOptions = {}): string {\n  if (typeof data !== 'object' || data === null) {\n    return '';\n  }\n\n  options = {\n    encode: true,\n    ...options,\n  };\n\n  const encode = (value: any): string => {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n\n  return Object.keys(data).reduce<string[]>((acc, key) => {\n    const value = data[key];\n\n    if (value === undefined) {\n      return acc;\n    }\n\n    if (value === null) {\n      if (!options.skipNull) {\n        acc.push([encode(key), ''].join('='));\n      }\n\n      return acc;\n    }\n\n    if (Array.isArray(value)) {\n      value.map((arrayItem) => {\n        acc.push(`${encode(key)}[]=${encode(arrayItem)}`);\n      }).join();\n      return acc;\n    }\n\n    acc.push([encode(key), encode(value)].join('='));\n    return acc;\n  }, []).join('&');\n}\n\nexport const querystring = {\n  parse,\n  stringify,\n};\n"],"file":"querystring.js"}