{"version":3,"sources":["../src/date.ts"],"names":["SECONDS_IN_THE_DAY","MILLISECONDS_IN_THE_DAY","isDateToday","date","now","Date","d","getDate","m","getMonth","y","getFullYear","isDateYesterday","yesterdayDate","getTime","isDateTomorrow","tomorrowDate","isSameDate","d1","d2","getBeginningOfDay","year","month","day","isLeapYear","getLastDayOfMonth","getStartOfWeek","weekDay","getDay","addDays","dayCount","modified","setDate","createDateFromUnixTimestamp","timestamp","getUnixTimestampFromDate","Math","floor","convertDateToInputFormat","join"],"mappings":"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","sourcesContent":["import { leadingZero } from './numbers';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\nexport function isDateToday(date: Date): boolean {\n  const now = new Date();\n  const d = now.getDate();\n  const m = now.getMonth();\n  const y = now.getFullYear();\n\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\nexport function isSameDate(d1: Date, d2: Date): boolean {\n  return d1.getDate() === d2.getDate()\n    && d1.getMonth() === d2.getMonth()\n    && d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\nexport function isLeapYear(year: number) {\n  return ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0));\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"],"file":"date.js"}