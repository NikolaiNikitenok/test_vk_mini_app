{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\n\nfunction getOrientation(window) {\n  var _window$screen$orient, _window$screen, _window$screen$orient2;\n\n  if (!window) {\n    return \"portrait\";\n  }\n\n  var angle = Math.abs((_window$screen$orient = (_window$screen = window.screen) === null || _window$screen === void 0 ? void 0 : (_window$screen$orient2 = _window$screen.orientation) === null || _window$screen$orient2 === void 0 ? void 0 : _window$screen$orient2.angle) !== null && _window$screen$orient !== void 0 ? _window$screen$orient : Number(window.orientation));\n  return angle === 90 ? \"landscape\" : \"portrait\";\n}\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\n\n\nexport function useOrientationChange() {\n  var _useDOM = useDOM(),\n      window = _useDOM.window;\n\n  var _React$useState = React.useState(function () {\n    return getOrientation(window);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      orientation = _React$useState2[0],\n      setOrientation = _React$useState2[1];\n\n  useGlobalEventListener(window, \"orientationchange\", function () {\n    return setOrientation(getOrientation(window));\n  });\n  return orientation;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT;AACA,SAASC,sBAAT;AAIA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,MAAxB,EAAiE;AAAA;;AAC/D,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,UAAP;AACD;;AAED,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAALD,4CACZF,MAAM,CAACI,MADK,6EACZC,eAAeC,WADH,2DACZC,uBAA4BN,KADhB,yEACyBO,MAAM,CAACR,MAAM,CAACM,WAAR,CAD/BJ,CAAd;AAIA,SAAOD,KAAK,KAAK,EAAVA,GAAe,WAAfA,GAA6B,UAApC;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASQ,oBAAT,GAA6C;AAClD,gBAAmBZ,MAAM,EAAzB;AAAA,MAAQG,MAAR,WAAQA,MAAR;;AAEA,wBAAsCJ,KAAK,CAACc,QAANd,CAAe;AAAA,WACnDG,cAAc,CAACC,MAAD,CADqC;AAAf,IAAtC;AAAA;AAAA,MAAOM,WAAP;AAAA,MAAoBK,cAApB;;AAIAb,wBAAsB,CAACE,MAAD,EAAS,mBAAT,EAA8B;AAAA,WAClDW,cAAc,CAACZ,cAAc,CAACC,MAAD,CAAf,CADoC;AAA9B,IAAtBF;AAIA,SAAOQ,WAAP;AACD","names":["React","useDOM","useGlobalEventListener","getOrientation","window","angle","Math","abs","screen","_window$screen","orientation","_window$screen$orient2","Number","useOrientationChange","useState","setOrientation"],"sources":["../../src/hooks/useOrientationChange.ts"],"sourcesContent":["import * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\ntype Orientation = \"portrait\" | \"landscape\";\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window: Window | undefined): Orientation {\n  if (!window) {\n    return \"portrait\";\n  }\n\n  const angle = Math.abs(\n    window.screen?.orientation?.angle ?? Number(window.orientation)\n  );\n\n  return angle === 90 ? \"landscape\" : \"portrait\";\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange(): Orientation {\n  const { window } = useDOM();\n\n  const [orientation, setOrientation] = React.useState(() =>\n    getOrientation(window)\n  );\n\n  useGlobalEventListener(window, \"orientationchange\", () =>\n    setOrientation(getOrientation(window))\n  );\n\n  return orientation;\n}\n"]},"metadata":{},"sourceType":"module"}