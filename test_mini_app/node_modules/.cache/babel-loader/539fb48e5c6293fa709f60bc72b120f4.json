{"ast":null,"code":"import { computeBrowserInfo } from \"./browser\";\nexport var Platform;\n\n(function (Platform) {\n  Platform[\"ANDROID\"] = \"android\";\n  Platform[\"IOS\"] = \"ios\";\n  Platform[\"VKCOM\"] = \"vkcom\";\n})(Platform || (Platform = {}));\n\nexport var ANDROID = Platform.ANDROID;\nexport var IOS = Platform.IOS;\nexport var VKCOM = Platform.VKCOM;\nexport function platform(browserInfo) {\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === \"ios\" ? IOS : ANDROID;\n}\nvar platformName = platform();\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nexport var IS_PLATFORM_IOS = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nexport var IS_PLATFORM_ANDROID = platformName === ANDROID;","map":{"version":3,"mappings":"AAAA,SAAsBA,kBAAtB;AAEA,WAAYC,QAAZ;;WAAYA,U;AAAAA,U,WAAAA,G,SAAAA;AAAAA,U,OAAAA,G,KAAAA;AAAAA,U,SAAAA,G,OAAAA;GAAAA,Q,KAAAA,Q;;AAMZ,OAAO,IAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAzB;AACP,OAAO,IAAMC,GAAG,GAAGF,QAAQ,CAACE,GAArB;AACP,OAAO,IAAMC,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AAQP,OAAO,SAASC,QAAT,CAAkBC,WAAlB,EAA2D;AAChE,MAAI,CAACA,WAAL,EAAkB;AAChBA,eAAW,GAAGN,kBAAkB,EAAhCM;AACD;;AAED,SAAOA,WAAW,CAACC,MAAZD,KAAuB,KAAvBA,GAA+BH,GAA/BG,GAAqCJ,OAA5C;AACD;AAED,IAAMM,YAAY,GAAGH,QAAQ,EAA7B;AAEA;AACA;AACA;;AACA,OAAO,IAAMI,eAAwB,GAAGD,YAAY,KAAKL,GAAlD;AACP;AACA;AACA;;AACA,OAAO,IAAMO,mBAA4B,GAAGF,YAAY,KAAKN,OAAtD","names":["computeBrowserInfo","Platform","ANDROID","IOS","VKCOM","platform","browserInfo","system","platformName","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"sources":["../../src/lib/platform.ts"],"sourcesContent":["import { BrowserInfo, computeBrowserInfo } from \"./browser\";\n\nexport enum Platform {\n  ANDROID = \"android\",\n  IOS = \"ios\",\n  VKCOM = \"vkcom\",\n}\n\nexport const ANDROID = Platform.ANDROID;\nexport const IOS = Platform.IOS;\nexport const VKCOM = Platform.VKCOM;\n\nexport type PlatformType =\n  | Platform.ANDROID\n  | Platform.IOS\n  | Platform.VKCOM\n  | string;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === \"ios\" ? IOS : ANDROID;\n}\n\nconst platformName = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = platformName === ANDROID;\n"]},"metadata":{},"sourceType":"module"}