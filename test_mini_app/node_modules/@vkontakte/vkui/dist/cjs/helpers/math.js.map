{"version":3,"sources":["../../../src/helpers/math.ts"],"names":["clamp","value","min","max","Math","precisionRound","number","precision","factor","pow","round","split","length","decimatedClamp","val","step","prec","decimatedOffset","decimatedRange","floor","rescale","from","to","options","scaled"],"mappings":";;;;;;;;;AAAO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAgBC,GAAhB,EAA6BC,GAA7B;AAAA,SACnBC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAcE,IAAI,CAACF,GAAL,CAASD,KAAT,EAAgBE,GAAhB,CAAd,CADmB;AAAA,CAAd;;;;AAGA,SAASE,cAAT,CAAwBC,MAAxB,EAAuD;AAAA,MAAfC,SAAe,uEAAH,CAAG;AAC5D,MAAIC,MAAM,GAAGJ,IAAI,CAACK,GAAL,CAAS,EAAT,EAAaF,SAAb,CAAb;AACA,SAAOH,IAAI,CAACM,KAAL,CAAWJ,MAAM,GAAGE,MAApB,IAA8BA,MAArC;AACD;;AAED,SAASD,SAAT,CAAmBD,MAAnB,EAAmC;AACjC,SAAO,CAAC,UAAGA,MAAH,EAAYK,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,KAA6B,EAA9B,EAAkCC,MAAzC;AACD;;AAED,SAASC,cAAT,CAAwBC,GAAxB,EAAqCZ,GAArC,EAAkDC,GAAlD,EAA+DY,IAA/D,EAA8E;AAC5E,MAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,CAA5B,EAA+B;AAC7B,WAAOf,KAAK,CAACc,GAAD,EAAMZ,GAAN,EAAWC,GAAX,CAAZ;AACD;;AACD,MAAMa,IAAI,GAAGT,SAAS,CAACQ,IAAD,CAAtB,CAJ4E,CAK5E;;AACA,MAAME,eAAe,GAAGZ,cAAc,CACpCD,IAAI,CAACM,KAAL,CAAW,CAACI,GAAG,GAAGZ,GAAP,IAAca,IAAzB,IAAiCA,IADG,EAEpCC,IAFoC,CAAtC,CAN4E,CAU5E;;AACA,MAAME,cAAc,GAAGb,cAAc,CACnCD,IAAI,CAACe,KAAL,CAAW,CAAChB,GAAG,GAAGD,GAAP,IAAca,IAAzB,IAAiCA,IADE,EAEnCC,IAFmC,CAArC;AAIA,SAAOd,GAAG,GAAGF,KAAK,CAACiB,eAAD,EAAkB,CAAlB,EAAqBC,cAArB,CAAlB;AACD;;AAEM,SAASE,OAAT,CACLnB,KADK,EAELoB,IAFK,EAGLC,EAHK,EAKL;AAAA,MADAC,OACA,uEAD6B,EAC7B;AACA,MAAMC,MAAM,GACT,CAACvB,KAAK,GAAGoB,IAAI,CAAC,CAAD,CAAb,KAAqBA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAnC,CAAD,IAA6CC,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAvD,IAA8DA,EAAE,CAAC,CAAD,CADlE;AAEA,SAAOT,cAAc,CAACW,MAAD,EAASF,EAAE,CAAC,CAAD,CAAX,EAAgBA,EAAE,CAAC,CAAD,CAAlB,EAAuBC,OAAO,CAACR,IAA/B,CAArB;AACD","sourcesContent":["export const clamp = (value: number, min: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n\nexport function precisionRound(number: number, precision = 1) {\n  let factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\nfunction precision(number: number) {\n  return (`${number}`.split(\".\")[1] || \"\").length;\n}\n\nfunction decimatedClamp(val: number, min: number, max: number, step?: number) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n  const prec = precision(step);\n  // Round value to nearest min + k1 * step\n  const decimatedOffset = precisionRound(\n    Math.round((val - min) / step) * step,\n    prec\n  );\n  // Round range length _down_ to nearest min + k2 * step\n  const decimatedRange = precisionRound(\n    Math.floor((max - min) / step) * step,\n    prec\n  );\n  return min + clamp(decimatedOffset, 0, decimatedRange);\n}\n\nexport function rescale(\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {}\n) {\n  const scaled =\n    ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}\n"],"file":"math.js"}