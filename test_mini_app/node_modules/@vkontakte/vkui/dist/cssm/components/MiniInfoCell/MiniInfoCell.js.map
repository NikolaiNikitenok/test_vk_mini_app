{"version":3,"sources":["../../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"names":["classNames","usePlatform","getClassName","Text","Tappable","hasReactNode","MiniInfoCell","props","platform","before","after","mode","textWrap","textLevel","children","restProps","isClickable","onClick","undefined","defaultProps"],"mappings":";;;;;AACA,SAASA,UAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,OAAOC,IAAP;AACA,OAAOC,QAAP;AACA,SAASC,YAAT;AACA;AA4CA,OAAO,IAAMC,YAAyC,GAAG,SAA5CA,YAA4C,CACvDC,KADuD,EAEpD;AAAA;;AACH,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,MAAQQ,MAAR,GACEF,KADF,CAAQE,MAAR;AAAA,MAAgBC,KAAhB,GACEH,KADF,CAAgBG,KAAhB;AAAA,MAAuBC,IAAvB,GACEJ,KADF,CAAuBI,IAAvB;AAAA,MAA6BC,QAA7B,GACEL,KADF,CAA6BK,QAA7B;AAAA,MAAuCC,SAAvC,GACEN,KADF,CAAuCM,SAAvC;AAAA,MAAkDC,QAAlD,GACEP,KADF,CAAkDO,QAAlD;AAAA,MAA+DC,SAA/D,4BACER,KADF;;AAGA,MAAMS,WAAW,GAAG,CAAC,CAACD,SAAS,CAACE,OAAhC;AAEA,SACE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,QAAQ,EAAE,CAACD,WAFb;AAGE,IAAA,IAAI,EAAEA,WAAW,GAAG,QAAH,GAAcE;AAHjC,KAIMH,SAJN;AAKE,IAAA,SAAS,EAAEf,UAAU,CACnBE,YAAY,CAAC,cAAD,EAAiBM,QAAjB,CADO,6EAGIG,IAHJ,GAGaA,IAAI,KAAK,MAHtB,2DAIIC,QAJJ,GAIiBA,QAAQ,KAAK,QAJ9B,6CAMEC,SANF;AALvB,MAcE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAsCJ,MAAtC,CAdF,EAeE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,MAAM,EAAEE,IAAI,KAAK,MAAT,GAAkB,QAAlB,GAA6B;AAFvC,KAIGG,QAJH,CAfF,EAqBGT,YAAY,CAACK,KAAD,CAAZ,IACC;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAuCA,KAAvC,CAtBJ,CADF;AA2BD,CApCM;AAsCPJ,YAAY,CAACa,YAAb,GAA4B;AAC1BR,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,QAAQ,EAAE,QAFgB;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5B","sourcesContent":["import * as React from \"react\";\nimport { classNames } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Text from \"../Typography/Text/Text\";\nimport Tappable from \"../../components/Tappable/Tappable\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport \"./MiniInfoCell.css\";\n\nexport interface MiniInfoCellProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: \"base\" | \"add\" | \"more\";\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: \"nowrap\" | \"short\" | \"full\";\n\n  /**\n   * Стиль текста:\n   *\n   * - `primary` – используйте этот стиль, если хотите выделить информацию в общем списке.<br />Пример использования: подробная информация на странице сообщества\n   * - `secondary` – стиль по-умолчанию.\n   */\n  textLevel?: \"primary\" | \"secondary\";\n}\n\nexport const MiniInfoCell: React.FC<MiniInfoCellProps> = (\n  props: MiniInfoCellProps\n) => {\n  const platform = usePlatform();\n  const { before, after, mode, textWrap, textLevel, children, ...restProps } =\n    props;\n\n  const isClickable = !!restProps.onClick;\n\n  return (\n    <Tappable\n      Component=\"div\"\n      disabled={!isClickable}\n      role={isClickable ? \"button\" : undefined}\n      {...restProps}\n      vkuiClass={classNames(\n        getClassName(\"MiniInfoCell\", platform),\n        {\n          [`MiniInfoCell--md-${mode}`]: mode !== \"base\",\n          [`MiniInfoCell--wr-${textWrap}`]: textWrap !== \"nowrap\",\n        },\n        `MiniInfoCell--lvl-${textLevel}`\n      )}\n    >\n      <span vkuiClass=\"MiniInfoCell__icon\">{before}</span>\n      <Text\n        vkuiClass=\"MiniInfoCell__content\"\n        weight={mode === \"more\" ? \"medium\" : \"regular\"}\n      >\n        {children}\n      </Text>\n      {hasReactNode(after) && (\n        <span vkuiClass=\"MiniInfoCell__after\">{after}</span>\n      )}\n    </Tappable>\n  );\n};\n\nMiniInfoCell.defaultProps = {\n  mode: \"base\",\n  textWrap: \"nowrap\",\n  textLevel: \"secondary\",\n};\n"],"file":"MiniInfoCell.js"}