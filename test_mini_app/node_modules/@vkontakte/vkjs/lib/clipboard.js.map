{"version":3,"sources":["../src/clipboard.ts"],"names":["copyWithNavigator","text","navigator","clipboard","writeText","then","copyWithFakeElement","Promise","resolve","reject","textareaEl","document","createElement","range","createRange","value","style","position","contentEditable","body","appendChild","focus","select","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","setSelectionRange","successful","execCommand","Error","error","removeChild","copyTextToClipboard"],"mappings":";;;;;;;AAAA,SAASA,iBAAT,CAA2BC,IAA3B,EAA2D;AACzD,SAAOC,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,IAA9B,EAAoCI,IAApC,CAAyC;AAAA,WAAM,IAAN;AAAA,GAAzC,CAAP;AACD;;AAED,SAASC,mBAAT,CAA6BL,IAA7B,EAA6D;AAC3D,SAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAnB;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACG,WAAT,EAAd;AAEAJ,IAAAA,UAAU,CAACK,KAAX,GAAmBd,IAAnB;AACAS,IAAAA,UAAU,CAACM,KAAX,CAAiBC,QAAjB,GAA4B,OAA5B,CALsC,CAKD;;AACrCP,IAAAA,UAAU,CAACQ,eAAX,GAA6B,MAA7B;AAEAP,IAAAA,QAAQ,CAACQ,IAAT,CAAcC,WAAd,CAA0BV,UAA1B;AAEAA,IAAAA,UAAU,CAACW,KAAX;AACAX,IAAAA,UAAU,CAACY,MAAX;AAEAT,IAAAA,KAAK,CAACU,kBAAN,CAAyBb,UAAzB;AAEA,QAAMc,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;;AACA,QAAIF,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,eAAV;AACAH,MAAAA,SAAS,CAACI,QAAV,CAAmBf,KAAnB;AACD;;AAEDH,IAAAA,UAAU,CAACmB,iBAAX,CAA6B,CAA7B,EAAgC,MAAhC;;AAEA,QAAI;AACF,UAAMC,UAAU,GAAGnB,QAAQ,CAACoB,WAAT,CAAqB,MAArB,CAAnB;;AACA,UAAID,UAAJ,EAAgB;AACdtB,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFD,MAEO;AACLC,QAAAA,MAAM,CAAC,IAAIuB,KAAJ,CAAU,aAAV,CAAD,CAAN;AACD;AACF,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdxB,MAAAA,MAAM,CAACwB,KAAD,CAAN;AACD;;AAED,QAAIT,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,eAAV;AACD;;AAEDhB,IAAAA,QAAQ,CAACQ,IAAT,CAAce,WAAd,CAA0BxB,UAA1B;AACD,GAvCM,CAAP;AAwCD;;AAEM,SAASyB,mBAAT,CAA6BlC,IAA7B,EAA6D;AAClE,MAAIC,SAAS,CAACC,SAAd,EAAyB;AACvB,WAAOH,iBAAiB,CAACC,IAAD,CAAxB;AACD,GAFD,MAEO;AACL,WAAOK,mBAAmB,CAACL,IAAD,CAA1B;AACD;AACF","sourcesContent":["function copyWithNavigator(text: string): Promise<boolean> {\n  return navigator.clipboard.writeText(text).then(() => true);\n}\n\nfunction copyWithFakeElement(text: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    const textareaEl = document.createElement('textarea');\n    const range = document.createRange();\n\n    textareaEl.value = text;\n    textareaEl.style.position = 'fixed'; // Avoid scrolling to bottom\n    textareaEl.contentEditable = 'true';\n\n    document.body.appendChild(textareaEl);\n\n    textareaEl.focus();\n    textareaEl.select();\n\n    range.selectNodeContents(textareaEl);\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n\n    textareaEl.setSelectionRange(0, 999999);\n\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        resolve(true);\n      } else {\n        reject(new Error('copy failed'));\n      }\n    } catch (error) {\n      reject(error);\n    }\n\n    if (selection) {\n      selection.removeAllRanges();\n    }\n\n    document.body.removeChild(textareaEl);\n  });\n}\n\nexport function copyTextToClipboard(text: string): Promise<boolean> {\n  if (navigator.clipboard) {\n    return copyWithNavigator(text);\n  } else {\n    return copyWithFakeElement(text);\n  }\n}\n"],"file":"clipboard.js"}