function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import { IconSettingsContext } from './IconSettings';
var svgStyle = {
  display: 'block'
};

function iconClass(fragments, _ref) {
  var classPrefix = _ref.classPrefix,
      globalClasses = _ref.globalClasses;
  var res = '';

  for (var i = 0; i < fragments.length; i++) {
    if (classPrefix) {
      res += ' ' + (classPrefix + fragments[i]);
    }

    if (!classPrefix || globalClasses) {
      res += ' ' + fragments[i];
    }
  }

  return res;
}

export var SvgIcon = function SvgIcon(_ref2) {
  var width = _ref2.width,
      height = _ref2.height,
      viewBox = _ref2.viewBox,
      id = _ref2.id,
      className = _ref2.className,
      style = _ref2.style,
      fill = _ref2.fill,
      getRootRef = _ref2.getRootRef,
      Component = _ref2.Component,
      restProps = _objectWithoutProperties(_ref2, ["width", "height", "viewBox", "id", "className", "style", "fill", "getRootRef", "Component"]);

  var size = Math.max(width, height);
  var iconSettings = useContext(IconSettingsContext);
  var ownClass = iconClass(['Icon', "Icon--".concat(size), "Icon--w-".concat(width), "Icon--h-".concat(height), "Icon--".concat(id)], iconSettings);
  return /*#__PURE__*/React.createElement(Component, _extends({
    role: "presentation"
  }, restProps, {
    ref: getRootRef,
    className: "".concat(ownClass, " ").concat(className),
    style: _objectSpread(_objectSpread({}, style), {}, {
      width: width,
      height: height
    })
  }), /*#__PURE__*/React.createElement("svg", {
    viewBox: viewBox,
    width: width,
    height: height,
    style: svgStyle
  }, /*#__PURE__*/React.createElement("use", {
    xlinkHref: "#".concat(id),
    style: {
      fill: 'currentColor',
      color: fill
    }
  })));
};
SvgIcon.defaultProps = {
  Component: 'div',
  className: '',
  style: {}
};
//# sourceMappingURL=SvgIcon.js.map